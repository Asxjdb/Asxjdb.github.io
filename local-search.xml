<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java笔记</title>
    <link href="/2023/06/24/Java%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/24/Java%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h2><h3 id="2022年8月17日"><a href="#2022年8月17日" class="headerlink" title="2022年8月17日"></a>2022年8月17日</h3><ul><li>设置→编辑器→文件编码：全为UTF-8</li></ul><hr><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="Java后端学习路线"><a href="#Java后端学习路线" class="headerlink" title="Java后端学习路线"></a>Java后端学习路线</h3><h4 id="javase基础语法"><a href="#javase基础语法" class="headerlink" title="javase基础语法"></a>javase基础语法</h4><p>尚硅谷，宋红康老师</p><h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><p>韩顺平，剑指offer，<br>力扣，题解k神，宫水三叶</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>mysql，尚硅谷，mysql必知必会<br>牛客刷题</p><h3 id="JDBC不推荐学"><a href="#JDBC不推荐学" class="headerlink" title="JDBC不推荐学"></a>JDBC不推荐学</h3><h4 id="前段三剑客"><a href="#前段三剑客" class="headerlink" title="前段三剑客"></a>前段三剑客</h4><h4 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h4><p>计算机网络，操作系统，哈工大，王道考研  </p><h4 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h4><p>ssm，spring， spring boot，spring cloud，尚硅谷，遇见狂神说</p><h4 id="做项目"><a href="#做项目" class="headerlink" title="做项目"></a>做项目</h4><p>b站尚硅谷，黑马程序员，mooc网<br>实践认知，学习新技术。<br>redis</p><h4 id="焦虑的反面就是具体"><a href="#焦虑的反面就是具体" class="headerlink" title="焦虑的反面就是具体"></a>焦虑的反面就是具体</h4><h4 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h4><p>boss直聘，牛客</p><hr><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>有参构造会清除无参构造</li></ul><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>子类不能继承父类的<code>private</code>的属性和方法</li><li>父类的构造器必须在子类构造器的第一行</li></ul><hr><h3 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h3><p><img src="/Java%E7%AC%94%E8%AE%B0/image-20220901152144899.png" alt="image-20220901152144899"></p><h4 id="StringBilder类"><a href="#StringBilder类" class="headerlink" title="StringBilder类"></a><code>StringBilder</code>类</h4><p><strong>可变字符串</strong></p><ul><li><code>append()</code>添加字符</li><li><code>toString()</code>转换为字符串</li><li>访问控制<img src="/2023/06/24/Java%E7%AC%94%E8%AE%B0/1661048393108.png" alt="1661048393108"></li></ul><h4 id="ArryayList类"><a href="#ArryayList类" class="headerlink" title="ArryayList类"></a><code>ArryayList</code>类</h4><ul><li><p>顺序容器</p></li><li><p>包：<code>java.util.ArrayList</code></p></li><li><p>调用：不能为基元类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; notes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th><th align="center">样例</th></tr></thead><tbody><tr><td align="center">add(elem)</td><td align="center">添加元素</td><td align="center">notes.add(“hello”)</td></tr><tr><td align="center">add(elem, index)</td><td align="center">指定位置添加元素</td><td align="center">notes.add(“hello”,1)</td></tr><tr><td align="center">size()</td><td align="center">查看元素数目</td><td align="center">notes.size()</td></tr><tr><td align="center">get(index)</td><td align="center">得到指定下标的元素</td><td align="center">notes.get(1)</td></tr><tr><td align="center">String remove(index)</td><td align="center">删除元素</td><td align="center">notes.remove(1)</td></tr><tr><td align="center">elem toArray(array)</td><td align="center">整体复制到数组中</td><td align="center">notes.roArray(array)</td></tr><tr><td align="center">blooean contains(elem)</td><td align="center">判断是否包含</td><td align="center">notes.comtains(“hello”)</td></tr></tbody></table></li></ul><h4 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a><code>HashSet</code>类</h4><ul><li><p>集合容器</p></li><li><p>包：<code>java.util.HashSet</code></p></li><li><p>调用：不能为基元类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet&lt;String&gt; notes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th><th align="center">样例</th></tr></thead><tbody><tr><td align="center">add(elem)</td><td align="center">添加元素</td><td align="center">notes.add(“hello”)</td></tr></tbody></table></li></ul><h4 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a><code>HashMap</code>类</h4><ul><li><p>散列表</p></li><li><p>包：<code>java.util.HashMap</code></p></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;k,v&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;k,v&gt;();<br>HashMap&lt;Integer,String&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,String&gt;();<br></code></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th><th align="center">样例</th></tr></thead><tbody><tr><td align="center">put(Key,Value)</td><td align="center">添加元素</td><td align="center">name.put(1,v)</td></tr><tr><td align="center">Value get(Key)</td><td align="center">取出元素</td><td align="center">name.get(1)</td></tr><tr><td align="center">keySet()</td><td align="center">返回键值集合</td><td align="center">name.keySet()</td></tr></tbody></table></li></ul><hr><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//异常语句,制造并抛出异常的对象</span><br>&#125;<span class="hljs-keyword">catch</span>(要处理的异常)&#123;<br>    <span class="hljs-comment">//处理方式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所有的异常都继承自<code>Expection</code>,</p><ol><li>运行时异常</li></ol><ul><li>异常的第一种类型是运行时异常，如上述的列子，在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错的），这样的异常称为运行时异常。所有的运行时异常都继承自<code>RuntimeException</code>。</li><li>这种异常不用在方法后声明</li></ul><ol start="2"><li>编译时异常</li></ol><p>异常的另一种类型是编译时异常，编译时异常是明确会出现的异常，在编译阶段就需要进行处理的异常（捕获异常）如果不进行处理，将无法通过编译！默认继承自<code>Exception</code>类的异常都是编译时异常。</p><ul><li><code>finally</code>相当于<code>default</code>。不管是否有异常被捕获，<code>final</code>中的语句都会执行</li></ul><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误比异常更严重，异常就是不同寻常，但不一定会导致致命的问题，而错误是致命问题，一般出现错误可能JVM就无法继续正常运行了，比如<code>OutOfMemoryError</code>就是内存溢出错误（内存占用已经超出限制，无法继续申请内存了）。</p><ol><li>运行时异常</li></ol><p>异常的第一种类型是运行时异常，如上述的列子，在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错的），这样的异常称为运行时异常。所有的运行时异常都继承自<code>RuntimeException</code>。</p><ol start="2"><li>编译时异常</li></ol><p>异常的另一种类型是编译时异常，编译时异常是明确会出现的异常，在编译阶段就需要进行处理的异常（捕获异常）如果不进行处理，将无法通过编译！默认继承自<code>Exception</code>类的异常都是编译时异常。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><ul><li>泛型也是一种变量，提高了代码的扩展性</li></ul><p>形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//file1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&lt;T&gt;&#123;<br>    T score;<br>&#125;<br><br><span class="hljs-comment">//file2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Student&lt;String&gt; stu1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>&lt;String&gt;();<br>        <span class="hljs-comment">//此时，score为String类型</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//file3</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Student&lt;Integer&gt; stu2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">//此时，score为Integer类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：泛型只能为包类型，不能为int&#x2F;double等类型。<strong>因为他们无法转换为Object对象。</strong></li><li><strong>静态方法</strong>无法直接使用类定义的泛型</li></ul><blockquote><p>注：窃以为泛型是相比于形参更高一层的抽象。比如T相当于<code>int sum(int a,int b)</code>中的a&#x2F;b，而调用时的String&#x2F;Integer则相当于<code>sum(1,2)</code>中的1,2。</p></blockquote><ul><li>在静态方法中使用泛型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(E e)</span>&#123;<br>    System.out.println(e);<br>&#125;<span class="hljs-comment">//静态调用：在方法定义前声明泛型</span><br></code></pre></td></tr></table></figure><ul><li><p>在成员方法中使用泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(E e)</span>&#123;<br>    System.out.println()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>也可以使用<code>?</code>通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Score&lt;?&gt; score;   <span class="hljs-comment">//score可以引用任意的Score类型对象了！</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="泛型的界限"><a href="#泛型的界限" class="headerlink" title="泛型的界限"></a>泛型的界限</h4><p>规定<strong>泛型的上界或下界</strong>：</p><p>上界：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义时：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; &#123;<span class="hljs-comment">//设定泛型上界，</span><br>     <span class="hljs-comment">//规定Student的泛型只能是Number或其子类</span><br>    <span class="hljs-comment">//code...</span><br>&#125;<br><span class="hljs-comment">//初始化时：</span><br>Student&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; stu = Student&lt;Integer&gt;();<br></code></pre></td></tr></table></figure><p>下界：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义时：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &lt;T <span class="hljs-built_in">super</span> Integer&gt; &#123;<span class="hljs-comment">//设定泛型下界，</span><br>        <span class="hljs-comment">//规定Student的泛型只能是Integer或其父类</span><br>    <span class="hljs-comment">//code...</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>语言入门</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端笔记</title>
    <link href="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>前端技术栈</p><ul><li>HTML：结构</li><li>CSS：样式</li><li>JavaScript：交互</li><li>http协议：传输</li></ul><p>快捷</p><ul><li><p><code>!</code>  快速生成html框架</p></li><li><p><code>ul&gt;li*6</code>   生成含有6个元素的无序列表</p></li><li><p>div.box 交集选择器</p></li><li><p>div,p,span 并集选择器</p></li><li><p><code>div</code>占一行</p></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>自闭合：input, img</p><p>遇到的小标签</p><ul><li><code>&lt;hr&gt;</code>  分割线</li><li></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>三种列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>世界电影票房排行榜<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>阿凡达<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>泰坦尼克号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>复仇者联盟<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物清单<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-comment">&lt;!-- key-value形式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>霸王别姬<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>导演：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>陈凯歌<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>主演：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>张国荣<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>张丰毅<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>巩俐<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>上映日期：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>1993-01-01<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>target = &quot;_blank&quot;</code>表示在新标签页打开</li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://upload.wikimedia.org/wikipedia/zh/thumb/1/13/Baidu_baike_logo.svg/1200px-Baidu_baike_logo.svg.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;能看到吧&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/...&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>controls</code>显示控制音频的按钮</li></ul><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/...&quot;</span> <span class="hljs-attr">cintrols</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;input a number&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;2018-02-10&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>Hey<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>input使用：</p><ul><li><code>placeholder</code>用于提示人们在输入框中输入什么信息</li><li>为了防止用户在缺少所需信息时提交你的表单，你需要将 <code>required</code> 属性添加到 <code>input</code> 元素。 无需为 <code>required</code> 属性设置值。 只需将单词 <code>required</code> 添加到 <code>input</code> 元素，确保它和其他属性之间有空格。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span> 苹果<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>/&gt;</span>梨<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sport&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sport&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;countries&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countries&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Greece<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>US<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>UK<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/url&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--action中为表单的接收地址--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;https://&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        天才<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我最喜欢的一本书是<span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>小王子<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在<span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>第一章<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>，我们讲过<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>字符串是不可变量<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>const<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>声明创建一个只读的常量。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><br>const add=(a,b)=&gt;a+b;<br><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在投资之前，<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>一定要做风险评估<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Cats <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>are<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> cute animals.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><img src="./image-20230118210722069.png" width=750><ul><li>HTML的语义化</li><li><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230118211327562.png" alt="image-20230118211327562"></li></ul><p>语义化的好处</p><ul><li>代码可读性</li><li>可维护性</li><li>搜索引擎优化</li><li>提升无障碍性</li></ul><p><strong>HTML：传达内容，而不是样式</strong></p><p>如何做到可视化</p><ul><li>了解每个标签和属性的含义</li><li>思考什么标签最适合描述这个内容</li><li>不适用可视化工具生成代码</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230118214125735.png" alt="image-20230118214125735"></p><ul><li><p><code>h1&#123;   &#125;</code>：一条规则</p></li><li><p>起手式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;  //<span class="hljs-attribute">width</span>包含<span class="hljs-attribute">padding</span>和<span class="hljs-attribute">border</span><br>    <span class="hljs-attribute">content</span>-box; //<span class="hljs-attribute">width</span>只包含<span class="hljs-attribute">content</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>移除链接下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: none;<br></code></pre></td></tr></table></figure></li><li><p>移除<code>li</code>圆点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">list-style</span>: none;<br></code></pre></td></tr></table></figure></li><li><p>居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">垂直：line-hight = <span class="hljs-attribute">height</span>;<br> <span class="hljs-attribute">vertical-align</span>: baseline | top | middle | bottom //只适用于 行内元素 和 行内块元素<br>水平：text-align: center;<br> <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure></li><li><p>背景颜色作用到border内</p></li><li><p>清除<code>input</code>默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline</span>: none;<br></code></pre></td></tr></table></figure></li></ul><h4 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h4><ul><li><p>定义常量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>    <span class="hljs-attr">--grey</span>: <span class="hljs-number">#f7f7f7</span>;<br>    <span class="hljs-attr">--white</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--grey); <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>溢出省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*1. 宽度要固定，先强制一行内显示文本*/</span> <br><span class="hljs-attribute">white-space</span>: nowrap; （ 默认 <span class="hljs-attribute">normal</span> 自动换行） <br><span class="hljs-comment">/*2. 超出的部分隐藏*/</span> <br><span class="hljs-attribute">overflow</span>: hidden; <br><span class="hljs-comment">/*3. 文字用省略号替代超出的部分*/</span> <br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure></li></ul><h4 id="在页面中使用CSS"><a href="#在页面中使用CSS" class="headerlink" title="在页面中使用CSS"></a>在页面中使用CSS</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!-- 外链 --&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/style<span class="hljs-selector-class">.css</span>&quot;&gt;<br><br>&lt;!-- 嵌入 --&gt;<br>&lt;style&gt;<br><span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">list-style</span>: none;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin</span>: lem <span class="hljs-number">0</span>;&#125;<br>&lt;/style&gt;<br><br>&lt;!-- 内联 --&gt;<br>&lt;<span class="hljs-selector-tag">p</span> style=&quot;magin: lem <span class="hljs-number">0</span><span class="hljs-string">&quot;&gt;Example Content&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230118215437795.png" alt="image-20230118215437795"></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>Selector</p></li><li><p>找出页面中的元素，以便给他们设置样式</p></li><li><p>使用多种方式选择元素</p><ul><li>按照标签名、类名或id</li><li>按照属性</li><li>按照DOM树中的位置</li></ul></li></ul><p>种类：</p><ul><li><p>统配选择器 <code>* &#123;......&#125;</code></p></li><li><p>标签选择器 <code>h1 &#123;&#125;</code></p></li><li><p>ID选择器 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span> id=&quot;title&quot;&gt;<br><br><span class="hljs-selector-id">#title</span> &#123;......&#125;<br></code></pre></td></tr></table></figure></li><li><p>类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">li</span> class=&quot;done&quot;&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br><br><span class="hljs-selector-class">.done</span> &#123;......&#125;<br></code></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">input</span> value=&quot;zhao&quot; disabled /&gt;<br>&lt;<span class="hljs-selector-tag">input</span> value=&quot;<span class="hljs-number">123456</span>&quot; type=&quot;password&quot; /&gt;<br><br><span class="hljs-selector-attr">[disabled]</span> &#123;......&#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;password&quot;</span>]</span> &#123;......&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><ul><li><p>pseudo-classes</p></li><li><p>不基于标签和属性定位元素</p></li><li><p>几种伪类</p><ul><li><p>状态伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!-- 对&lt;<span class="hljs-selector-tag">a</span>&gt;属性设置不同状态下的规则 --&gt;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>: black;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>: gray;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: orange;&#125;&lt;!-- 鼠标移到链接上 --&gt;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span> &#123;<span class="hljs-attribute">outline</span>: <span class="hljs-number">2px</span> solid orange&#125;<br></code></pre></td></tr></table></figure></li><li><p>结构性伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">ol</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;阿凡达&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;泰坦尼克号&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;星球大战&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;复仇者联盟&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;侏罗纪世界&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ol</span>&gt;<br><br>&lt;style&gt;<br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5em</span>;<br>&#125;<br><br><span class="hljs-selector-tag">li</span>: first-child &#123;<br>    <span class="hljs-attribute">color</span>: coral;<br>&#125;<br><br><span class="hljs-selector-tag">li</span>: last-child &#123;<br>    <span class="hljs-attribute">border-bottom</span>: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><ul><li>Combinators</li></ul><table><thead><tr><th>名称</th><th>语法</th><th>说明</th><th align="center">示例</th></tr></thead><tbody><tr><td>直接组合</td><td>AB</td><td>满足A的同时满足B</td><td align="center">input: focus</td></tr><tr><td>后代组合</td><td>A B</td><td>选中B，如果他是A的子孙</td><td align="center">nav a</td></tr><tr><td>亲自组合</td><td>A &gt; B</td><td>选中B，如果他是A的子元素</td><td align="center">section &gt; p</td></tr><tr><td>兄弟选择器</td><td>A ~ B</td><td>选中B，如果他在A后且和A同级</td><td align="center">h2 ~ p</td></tr><tr><td>相邻选择器</td><td>A + B</td><td>选中B，如果他紧跟在A后面</td><td align="center">h2 + p</td></tr></tbody></table><h4 id="选择器组"><a href="#选择器组" class="headerlink" title="选择器组"></a>选择器组</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span>, <span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;radio&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承、层叠、优先"><a href="#继承、层叠、优先" class="headerlink" title="继承、层叠、优先"></a>继承、层叠、优先</h3><ul><li>某些属性会自动继承其父元素的计算值，除非显示指定一个值</li><li>和文字相关的一般都可以继承，和模型相关的都不可继承</li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p><code>继承/* &lt; 元素 &lt; 类 &lt; id &lt; 行内 &lt; !important</code></p><h4 id="特异度"><a href="#特异度" class="headerlink" title="特异度"></a>特异度</h4><ul><li>Specificity</li></ul><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230122152458566.png" alt="image-20230122152458566"></p><h4 id="显式继承"><a href="#显式继承" class="headerlink" title="显式继承"></a>显式继承</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">box-sizing</span>: inherit;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.some-widget</span> &#123;<br>    <span class="hljs-attribute">box-sizing</span>: content-box; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><ul><li>CSS中，每个属性都有一个初始值<ul><li><code>background-color</code>的初始值为<code>transparent</code></li><li><code>margin-left</code>的初始值为0</li></ul></li><li>可以用<code>initial</code>关键字显式重置为初始值<ul><li><code>background-color: initial</code></li></ul></li></ul><h4 id="CSS求值过程"><a href="#CSS求值过程" class="headerlink" title="CSS求值过程"></a>CSS求值过程</h4><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230122160227566.png" alt="image-20230122160227566"></p><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230122160302425.png" alt="image-20230122160302425"></p><img src="./value-16743747236631.svg"><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>对于html: </p><ul><li>文本级标签：p、span、a、b、i、u、em。</li><li>容器级标签：div、h系列、li、dt、dd。</li></ul><p>对于css: </p><ul><li>行内元素：除了p之外，所有的文本级标签，都是行内元素。p是个文本级，但是是个块级元素。</li><li>块级元素：所有的容器级标签都是块级元素，还有p标签。</li></ul><p>行内元素：</p><ul><li>与其他行内元素并排；</li><li>不能设置宽、高。默认的宽度，就是文字的宽度。</li></ul><p>块级元素：</p><ul><li>霸占一行，不能与其他任何元素并列；</li><li>能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%</li></ul><p>pink网页布局准则</p><ul><li>多个块级元素纵向排列找标准流，多个块级元素和你选哪个排列找浮动</li><li></li></ul><p>创建浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: right|left|none;<br></code></pre></td></tr></table></figure><p>性质：</p><ul><li>脱离标准流的控制移动到指定位置（脱标）</li><li>浮动的盒子不再保留原来的位置</li><li><strong>相当于行内块元素</strong></li></ul><p>注意：</p><ul><li>兄弟们应该一起浮动</li><li>浮动的盒子只影响后面的标准流，不会影响前面的标准流</li></ul><p>清除浮动的方法：</p><ul><li><p>隔墙法：在末尾添加一个空块元素，如<code>div</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>父级添加<code>overflow</code>属性，只适用于块级元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure></li><li><p>父级添加<code>after</code>伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mainBox</span><span class="hljs-selector-pseudo">:after</span>&#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>:both;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>    <span class="hljs-attribute">overflow</span>:hidden;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父级添加双伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: flex;<br></code></pre></td></tr></table></figure><hr><p>&#x3D;&#x3D;以下6个属性设置在容器上&#x3D;&#x3D;</p><h5 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h5><p>决定主轴的方向（即项目的排列方向）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | column-reverse<br></code></pre></td></tr></table></figure><h5 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h5><p>是否换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;<br></code></pre></td></tr></table></figure><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><p>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><h5 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h5><p>定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;<br></code></pre></td></tr></table></figure><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h5 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a><code>align-items</code>属性</h5><p>定义项目在纵轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br></code></pre></td></tr></table></figure><ul><li><code>flex-start</code>：纵轴的起点对齐。</li><li><code>flex-end</code>：纵轴的终点对齐。</li><li><code>center</code>：纵轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h5 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a><code>align-content</code>属性</h5><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;<br></code></pre></td></tr></table></figure><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><hr><p>&#x3D;&#x3D;以下6个属性设置在项目上&#x3D;&#x3D;</p><h5 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a><code>order</code>属性</h5><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><h5 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a><code>flex-grow</code>属性</h5><p>定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</p><h5 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a><code>flex-shrink</code>属性</h5><p>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><h5 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a><code>flex-basis</code>属性</h5><p>定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><h5 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a><code>flex</code>属性</h5><p>是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><p><a href="https://www.zhangxinxu.com/wordpress/2019/12/css-flex-deep/">简写</a>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex</span>: x;<br>相当于：<span class="hljs-attribute">flex</span>: x <span class="hljs-number">1</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li><code>flex-grow</code>就是家产剩余家产仍有富余的时候该如何分配。</li><li><code>flex-shrink</code>就是家产剩余家产不足的时候该如何分配。</li><li><code>flex-basis</code>就是分配固定的家产数量。</li></ul><h5 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a><code>align-self</code>属性</h5><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;<br></code></pre></td></tr></table></figure><h4 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h4><ul><li><p>static : 默认值，静态定位，不受<code>left/right...</code>影响</p></li><li><p>relative：相对自己，不影响文档流</p><p>子绝父相</p></li><li><p>absolute：相对父亲偏移，移出文档流</p><p>定位基点（一般是父元素）不能是<code>static</code>定位，否则定位基点就会变成整个网页的根元素<code>html</code></p></li><li><p>fixed:  固定定位，相对浏览器窗口，脱离文档流。适合用于固定浮窗、导航条</p><p>会把元素的宽高设置成内容的宽高，<code>right:0  left:0 </code>可以让宽度占满包含容器</p></li><li><p>sticky:  相当于relative和fixed的结合体</p></li></ul><p>Layout</p><ul><li>确定内容的大小和位置的算法</li><li>依据元素、容器、兄弟节点和内容等信息来计算</li></ul><p>布局相关技术</p><ul><li>常规流<ul><li>行级</li><li>块级</li><li>表格布局</li><li>FlexBox</li><li>Grid布局</li></ul></li><li>浮动</li><li>绝对定位</li></ul><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p><a href="https://www.cnblogs.com/keithwang/p/3139517.html">https://www.cnblogs.com/keithwang/p/3139517.html</a></p><ul><li><code>block</code>:  块级元素，相当于一行，无视<strong>宽度</strong>，独占一行</li><li><code>inline</code>:  行级元素，无视<strong>宽度和高度</strong>，大小依内容，内容多大就占多大地方</li><li><code>inline-block</code>:  高度和宽度都生效</li></ul><h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><ul><li><p>content → padding → border → margin</p></li><li><p>内容 → 内边距 → 边框 → 外边距</p></li></ul><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230122162636439.png" alt="image-20230122162636439"></p><h5 id="width"><a href="#width" class="headerlink" title="width"></a>width</h5><ul><li>指定content box宽度</li><li>取值为长度、百分数、auto</li><li>auto由浏览器根据其他属性确定</li><li>百分数相对于容器的content box宽度</li></ul><h5 id="height"><a href="#height" class="headerlink" title="height"></a>height</h5><ul><li>指定content box 高度</li><li>取值为长度、百分数、auto</li><li>auto 取值由内容计算得来</li><li>百分数相对于容器的 content box 高度</li><li>容器有指定的高度时，百分数才生效</li></ul><h5 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h5><img src="./image-20230123165652610.png" width=400px/><ul><li>指定元素四个方向的内边距</li><li>百分数相对于容器宽度</li><li><ul><li>padding</li><li>top-bottom left-right</li><li>top right bottom left</li></ul></li></ul><h5 id="border"><a href="#border" class="headerlink" title="border"></a>border</h5><ul><li><p>指定容器边框样式、粗细和颜色</p></li><li><p>三种属性</p><ul><li>border-width</li><li>border-style</li><li>border-color</li></ul></li><li><p>四个方向</p><ul><li>border-top</li><li>border-right</li><li>border-bottom</li><li>border-left</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br><br><span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br><span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> dotted red;<br><br><span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-style</span>: solid;<br><span class="hljs-attribute">border-color</span>: green blue;<br><br><span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">3px</span>;<br><span class="hljs-attribute">border-top-color</span> <span class="hljs-selector-id">#f00</span>;<br></code></pre></td></tr></table></figure><h5 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h5><ul><li>指定元素四个方向的外边距</li><li>取值可以是长度、百分数、auto</li><li>百分数相对于容器宽度</li></ul><ol><li><p>margin: auto可以水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background</span>: coral;<br>    <span class="hljs-attribute">margin-left</span>: auto;<br>    <span class="hljs-attribute">margin-right</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="margin-collapse"><a href="#margin-collapse" class="headerlink" title="margin collapse"></a>margin collapse</h5><p>margin在垂直方向边距的冗合并&#x2F;折叠</p><h5 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h5><p>可以分为<code>content-box</code>和<code>border-box</code>，默认为前者</p><img src="./image-20230123173430541.png" width=500px/><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.b</span> &#123;<br><span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccC</span>;<br>&#125;<br>&lt;!-- <span class="hljs-selector-tag">a</span>会比<span class="hljs-selector-tag">b</span>宽一点 --&gt;<br>* &#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h5><p>overflow: </p><ul><li>visible </li><li>hidden</li><li>scroll（滚动）</li></ul><h3 id="盒模型-1"><a href="#盒模型-1" class="headerlink" title="盒模型"></a>盒模型</h3><p><strong>可以用<code>padding</code>撑开盒子</strong></p><ul><li><p>块级</p><ul><li>不和其他盒子并列摆放</li><li>适用于所有的盒模型属性</li></ul></li><li><p>行级</p><ul><li>和其他行级盒子一起放在一行或拆开成多行</li><li>盒模型中的width、height不适用</li></ul></li><li><p>块级元素</p><ul><li>生成块级盒子</li><li>body、article、div、main、section、h1-6、p、ul、li</li><li>display: block</li><li><code>margin: 0 auto</code>可以水平居中</li></ul></li><li><p>行级元素</p><ul><li>生成行级盒子，内容分散在多个行盒(line box)中</li><li>span、em、strong、cite、code</li><li>display: inline</li></ul></li></ul><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><ul><li><p>block:  块级盒子</p></li><li><p>inline:  行级盒子</p></li><li><p>inline-block:  </p><ul><li><p>本身是行级，可以放在行盒中；</p></li><li><p>可以设置宽高；</p></li><li><p>作为一个整体不会被拆散成多行</p></li></ul></li><li><p>none:  排版时完全忽略</p></li></ul><h4 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h4><p>normal flow</p><ul><li>根元素、浮动和绝对定位的元素会脱离常规流</li><li>其他元素都在常规流之内(in-flow)</li><li>常规流中的盒子，在某种排版上下文中参与布局<ul><li>行级排版上下文</li><li>块级排版上下文</li><li>Table 排版上下文</li><li>Flex 排版上下文</li><li>Grid 排版上下文</li></ul></li></ul><h5 id="行级排版上下文"><a href="#行级排版上下文" class="headerlink" title="行级排版上下文"></a>行级排版上下文</h5><ul><li>Inline Formatting Context( IFC )</li><li>只包含行级盒子和容器会创建一个 IFC</li><li>IFC 内的排版规则<ul><li>盒子在一行内水平摆放</li><li>一行放不下时，换行显示</li><li>text-align 决定一行内盒子的水平对齐</li><li>vertical-align 决定一个盒子在行内的垂直对齐</li><li>避开浮动( float )元素</li></ul></li></ul><h5 id="块级排版上下文"><a href="#块级排版上下文" class="headerlink" title="块级排版上下文"></a>块级排版上下文</h5><ul><li><p>Block Formatting Context( BFC )</p></li><li><p>某些元素会创建一个BFC</p><ul><li>根元素</li><li>浮动、绝对定位、inlie-block</li><li>Flex 子项和 Grid 子项</li><li>overflow 值不是 visible 的块盒</li><li>display: flow-root</li></ul></li><li><p>BFC 内的排版规则</p><ul><li>盒子从上到下摆放</li><li>垂直 margin 合并</li><li>BFC 内盒子的 margin 不会与外面的合并</li><li>BFC 不会和浮动元素重叠</li></ul></li></ul><h4 id="Flex-1"><a href="#Flex-1" class="headerlink" title="Flex"></a>Flex</h4><ul><li>一种新的排版上下文</li><li>他可以控制子级盒子的：<ul><li>摆放的流向(← →↑↓)</li><li>摆放顺序</li><li>盒子宽度和高度</li><li>水平和垂直方向的对齐</li><li>是否允许折行</li></ul></li></ul><img src="./image-20230125201231629.png" width=500px /><p>justify-content</p><img src="./image-20230125201548832.png" width=500px /><img src="./image-20230125202017909.png" width=500px /><h5 id="Flexibility"><a href="#Flexibility" class="headerlink" title="Flexibility"></a>Flexibility</h5><ul><li>可以设置子项的弹性：当容器有剩余空间时，会伸展；容器空间不够时，会收缩</li><li>flex-grow 有剩余空间时的伸展能力</li><li>flx-shrink 容器空间不足时收缩的能力</li><li>flex-basis 没有伸展或收缩时的基础长度</li></ul><img src="./image-20230125203342344.png" width=600px /><h4 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h4><img src="./image-20230125203610377.png" width=500px /><ul><li>display: grid 使元素生成一个块级的 Grid 容器</li><li>使用grid-template 相关属性将容器划分为网络</li><li>设置每一个子项站哪些行、列</li></ul><p>Grid-line网格线</p><img src="./image-20230125210843783.png" width=600px /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">grid-area</span>: grid-row-start/grid-column-start/grid-row-end/grid-column-end;<br></code></pre></td></tr></table></figure><h4 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h4><p>float</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>position</p><ul><li>static 默认值，非定位元素</li><li>relative  相对于自身原本位置便宜，不脱离文档流</li><li>absolute  绝对定位，相对于非 static 祖先元素定位</li><li>fixed  相对于视口绝对定位</li></ul><h5 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h5><ul><li>在常规流里面布局</li><li>相对于自己本应该在的位置进行偏移</li><li>使用 top、left、bottom、right 设置偏移长度</li><li>流内其他元素当它没有偏移一样布局</li></ul><h5 id="absolue"><a href="#absolue" class="headerlink" title="absolue"></a>absolue</h5><ul><li>脱离常规流</li><li>相对于最近的非static祖先定位</li><li>不会对流内元素布局造成影响</li><li></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h4><p><code>cursor</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor">https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor</a></p><ul><li>pointer: 手，悬浮于链接上</li><li>not-allowed：禁止，不能执行</li><li>grab:  抓取</li><li>default:   默认，一般为箭头</li></ul><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><h5 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h5><ul><li>6位十六进制数</li><li>rgb(a, b, c)，其中abc为0~255的10进制数</li></ul><h5 id="HSL"><a href="#HSL" class="headerlink" title="HSL"></a>HSL</h5><ul><li>Hue色相，如红色、黄色等，取值范围0~350</li><li>Saturation饱和度，色彩的鲜艳程度，越高越鲜艳，取值范围0~100%</li><li>Lightness亮度，明亮程度，越高颜色越亮，取值范围0~100%</li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><h5 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h5><img src="./image-20230122143456074.png" width=700px><ul><li><p>上传字体：Web Fonts</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span>&gt;web fonts are awesome!&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;style&gt;<br><span class="hljs-keyword">@font-face</span> &#123;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Megrim&quot;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https: //fonts.gstatic.com/s/megrim/v11/46kulbz5wjvLqJZVam_hVUdI1w.woff2</span>)format ( <span class="hljs-string">&#x27;woff2&#x27;</span> );<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br><span class="hljs-attribute">font-family</span>: Megrim,Cursive;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h5 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h5><ul><li>关键字<ul><li>small, medium, large</li></ul></li><li>长度<ul><li>px，一个像素</li><li>em，相对于父级的大小</li></ul></li><li>百分数<ul><li>相对于父元素字体大小</li></ul></li></ul><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: h-shadow v-shadow blur spread color insert;<br></code></pre></td></tr></table></figure><img src="./image-20230401164305032.png" width=700px><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>();<br><span class="hljs-attribute">background-repeat</span>: no-repeat;<br><span class="hljs-attribute">background-size</span>: cover 全覆盖背景<br> | contain  最大化显示<br>backdrop-filter: <span class="hljs-built_in">blur</span>(<span class="hljs-number">25px</span>);  //毛玻璃效果<br></code></pre></td></tr></table></figure><h5 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h5><p>复合属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font</span>: font-style font-weight font-size/line-height font-family;<br>&lt;!-- 一定要有字号和字体 --&gt;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>font-family</td><td>“微软雅黑”（”Microsoft Yahei”）, Consol</td><td>先后顺序代表优先级，在最后加一个通用字体族</td></tr><tr><td>font-size</td><td>16px(像素)</td><td>必须加单位</td></tr><tr><td>font-weight</td><td>lighter&#x2F; normal&#x2F; bold&#x2F; bolder&#x2F; number(700)</td><td>字重，推荐用数字  100 ~ 900</td></tr><tr><td>font-style</td><td>normal&#x2F; italic</td><td>很少用</td></tr></tbody></table><h5 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h5><table><thead><tr><th>属性</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>color</td><td>red&#x2F; #000000&#x2F; rgb(0,0,0)</td><td>三种格式</td></tr><tr><td>text-align  对齐文本</td><td>left&#x2F; right&#x2F; center</td><td></td></tr><tr><td>text-decoration  装饰文本</td><td>none&#x2F; underline&#x2F; overline&#x2F; line-through</td><td></td></tr><tr><td>text-indent  文本首行缩进</td><td>xx px&#x2F; 2em</td><td>em是一个相对单位，恒为当前一个字符的大小</td></tr><tr><td>line-height  行高&#x2F;行间距</td><td>xx px</td><td>没有单位时，表示为字体大小的xx倍，是相对大小</td></tr></tbody></table><h5 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h5><p>控制空白符的展示</p><ul><li>normal</li><li>nowrap</li><li>pre</li><li>pre-wrap</li><li>pre-line</li></ul><h5 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h5><ul><li>文本内链接：<code>name</code></li><li><code>target=&quot;_blank|_self|_top|_parent&quot;</code></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p><a href="https://juejin.cn/post/6970883520168198158">https://juejin.cn/post/6970883520168198158</a></p><ul><li>过渡：transition</li><li>2D 转换 transform</li><li>3D 转换 transform</li><li>自定义动画：animation</li></ul><h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><p>实现<strong>补间</strong>动画</p><ul><li>补间动画：自动完成从起始状态到终止状态的的过渡。不用管中间的状态。</li><li>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片。</li></ul><p>相关属性：</p><ul><li><code>transition-property: all;</code> 如果希望所有的属性都发生过渡，就使用all。</li><li><code>transition-duration: 1s;</code> 过渡的持续时间。</li><li><code>transition-timing-function: linear;</code> 运动曲线。属性值可以是：<ul><li><code>linear</code> 线性</li><li><code>ease</code> 减速</li><li><code>ease-in</code> 加速</li><li><code>ease-out</code> 减速</li><li><code>ease-in-out</code> 先加速后减速</li></ul></li><li><code>transition-delay: 1s;</code> 过渡延迟。多长时间后再执行这个过渡动画。</li></ul><p>综合：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;<br><span class="hljs-attribute">transition</span>: all <span class="hljs-number">3s</span> linear <span class="hljs-number">0s</span>;<br></code></pre></td></tr></table></figure><p>触发方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span> linear <span class="hljs-number">0s</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>:hover</code>伪类被触发后，会启动<code>transition</code>向<code>:hover</code>的属性变化</p><p><code>transition</code>只用来控制时长</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><ul><li>2D 转换：缩放、移动、旋转。</li><li>3D 转换：</li></ul><p><strong>2D:</strong></p><h5 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: yellowgreen;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>x:  x方向的缩放倍数</li><li>y:  y方向的缩放倍数</li></ul><h5 id="位移translate"><a href="#位移translate" class="headerlink" title="位移translate"></a>位移translate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br></code></pre></td></tr></table></figure><p>相对于自身移动</p><h5 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span>;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>)<br></code></pre></td></tr></table></figure><p>正值：顺时针；负值：逆时针</p><p><strong>transform: rotate()必须和transition</strong>配合使用</p><p>rotate 旋转时，默认是以盒子的正中心为坐标原点的。如果想<strong>改变旋转的坐标原点</strong>，可以用<code>transform-origin</code>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform-origin</span>: center bottom;   //旋转时，以盒子底部的中心为坐标原点<br></code></pre></td></tr></table></figure><p><strong>3D:</strong></p><p>旋转：</p><ul><li>x: 右</li><li>y: 下</li><li>z: 垂直向上</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">360deg</span>);    //绕 X 轴旋转<span class="hljs-number">360</span>度  //顺时针<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>);    //绕 Y 轴旋转<span class="hljs-number">360</span>度<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">360deg</span>);    //绕 Z 轴旋转<span class="hljs-number">360</span>度<br></code></pre></td></tr></table></figure><p>平移：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>);    //沿着 X 轴移动<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">360px</span>);    //沿着 Y 轴移动<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">360px</span>);    //沿着 Z 轴移动<br></code></pre></td></tr></table></figure><p>透视：perspective</p><p>电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。但仅仅只是视觉呈现出 3d 效果，并不是正真的3d。</p><p>格式有两种写法：</p><ul><li>作为一个属性，设置给父元素，作用于所有3D转换的子元素</li><li>作为 transform 属性的一个值，做用于元素自身。</li></ul><p>格式举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;<br></code></pre></td></tr></table></figure><h4 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">// 关键帧定义<br><span class="hljs-keyword">@keyframes</span> animateName&#123;<br>    <span class="hljs-number">0%</span>   &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>    <span class="hljs-number">50%</span>  &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>; &#125;<br>    <span class="hljs-number">100%</span> &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>&#125;<br>// <span class="hljs-number">0%</span>和<span class="hljs-number">100%</span>分别可以用<span class="hljs-selector-tag">from</span>和<span class="hljs-selector-tag">to</span>代替，也可以省略<br><br><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    // 使用<br>    // <span class="hljs-attribute">animation</span>: 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)<br>    animation-name: test;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">2s</span>;<br>    <span class="hljs-attribute">animation-iteration-count</span>: infinite;<br>    <span class="hljs-attribute">animation-timing-function</span>: linear;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>animation-duration</code>:  动画单次播放时间</p></li><li><p><code>animation-iteration-count</code>:  动画播放次数</p></li><li><p><code>animation-timing-function</code>:  速度函数</p></li><li><p><code>animation-delay</code>:  动画延迟时间</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease（缓解）</td><td>**<code>默认值</code>**：动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>贝塞尔曲线（自定义数值），可到<a href="https://link.juejin.cn/?target=https://cubic-bezier.com/">相关网站</a>可视化设置。</td></tr></tbody></table></li><li><p><code>animation-direction</code>: 动画播放顺序：正序 &#x2F; 逆序</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值。动画按正常播放。</td></tr><tr><td>reverse</td><td>动画反向播放。</td></tr><tr><td>alternate（交替的）</td><td>动画正向交替执行（正向-&gt;反向）Loop。</td></tr><tr><td>alternate-reverse</td><td>动画反向交替执行（反向-&gt;正向）Loop。</td></tr><tr><td>inherit</td><td>从父元素继承该属性。</td></tr></tbody></table></li><li><p>animation-fill-mode</p><p><code>animation-fill-mode</code>用于设置动画的填充模式，主要应用的属性值为：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认值。动画在动画执行前后，不会应用任何样式到目标元素。</td></tr><tr><td>forwards</td><td>在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<code>最后帧</code>动画。</td></tr><tr><td>backwards</td><td>在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<code>起始帧</code>动画。</td></tr></tbody></table></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><ul><li>变量声明：<code>let</code></li><li>常量声明：<code>const</code></li></ul><p>模板字符串</p><ul><li>&#96;&#96;反引号包裹</li><li>内部用<code>$&#123;&#125;</code>包住变量</li></ul><p>类型转换</p><ul><li><code>Number()</code></li><li><code>parseInt()</code></li><li><code>parseFloat()</code></li></ul><p>生命周期函数&#x2F;立即执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//function body</span><br>&#125;)();<span class="hljs-comment">//加分号</span><br><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">形参</span>)&#123;<span class="hljs-keyword">function</span> body&#125;(实参));<br></code></pre></td></tr></table></figure><p>对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person=&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hi~~~~&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">song</span>:......<br>&#125;<br><br><span class="hljs-comment">//调用</span><br>person.<span class="hljs-title function_">sayHi</span>()<br></code></pre></td></tr></table></figure><ul><li>对象类型是浅拷贝</li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li><p>修改类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)<br><br>box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>) <span class="hljs-comment">//添加</span><br>box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;box&#x27;</span>) <span class="hljs-comment">//删除</span><br>box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;active&#x27;</span>) <span class="hljs-comment">//替换</span><br>box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;active&#x27;</span>) <span class="hljs-comment">//查询</span><br>box.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><pre><code class="js">box.style.width 可以当左值，也可以当右值 需要用到驼峰格式 只能操作内联的style<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>+ 自定义属性<br><br>  ```<span class="hljs-selector-tag">html</span><br>  &lt;<span class="hljs-selector-tag">div</span> data-id=<span class="hljs-string">&quot;1&quot;</span> data-spm=<span class="hljs-string">&quot;不知道&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>  console<span class="hljs-selector-class">.log</span>(对象<span class="hljs-selector-class">.dataset</span>.id)<br>  console<span class="hljs-selector-class">.log</span>(对象<span class="hljs-selector-class">.dataset</span>.spm)<br>  对象<span class="hljs-selector-class">.dataset</span>()<span class="hljs-comment">//自定义属性的集合</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>定时器-间歇函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> n = <span class="hljs-built_in">setInterval</span>(函数名，时间（毫秒）)<span class="hljs-comment">//返回定时器的编号</span><br><span class="hljs-title function_">clearIntterval</span>(n)<span class="hljs-comment">//关闭定时器</span><br></code></pre></td></tr></table></figure></li><li><p>事件监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">元素对象.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;事件类型&#x27;</span>，要执行的函数)<br>解绑：元素对象.<span class="hljs-title function_">removeEventListener</span>(事件类型，事件处理函数，【事件捕获或者冒泡阶段】)<br><span class="hljs-comment">//事件类型</span><br>鼠标事件（鼠标触发） ：click鼠标点击，mouseenter鼠标经过，mouseleave鼠标离开<br>焦点事件（表单获得光标）：focus获得焦点，blur失去焦点<br>键盘事件（键盘触发）   ：keydown键盘按下触发，keyuo键盘抬起触发<br>文本事件（表单输入触发）：input用户输入事件<br></code></pre></td></tr></table></figure></li><li><p>事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">元素.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-comment">//event即为事件对象</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>函数对象<code>this</code>：指向调用者</p></li><li><p>捕获和冒泡：默认<code>false</code>，冒泡</p><ul><li>大→小：捕获</li><li>小→大：冒泡</li><li>阻止事件流动传播（冒泡+捕获）：<code>事件对象.stopPropagation()</code></li></ul></li><li><p>鼠标经过事件：</p><ul><li><code>mouseover</code>和<code>mouseout</code>会有冒泡效果</li><li><code>mouseenter</code>和<code>mouseleave</code>没有冒泡效果（推荐）</li></ul></li><li><p>点击返回页面顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> backTop = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#backTop&#x27;</span>)<br>backTop.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> = <span class="hljs-number">0</span><br>    <span class="hljs-comment">//document.documentElement 用于获取html内容</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>获取宽高：</p><ul><li>不包含padding&#x2F;border: <code>clientWidth</code>, <code>clientHeight</code></li><li>包含padding&#x2F;border: <code>offsetWidth</code>, <code>offsetHeight</code></li></ul></li><li><p>获取位置：</p><ul><li>元素距离自己定位父级元素的左、上距离: <code>offestLeft</code>, <code>offsetTop</code></li></ul></li><li><p>获取位置的另一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-title function_">getBoundingClientRect</span>()<br><span class="hljs-comment">// 返回元素的大小及其相对于视口的位置</span><br></code></pre></td></tr></table></figure><img src="./image-20230307140257332.png" width=700px></li><li><p>日期对象</p><img src="./image-20230307151030851.png" width=450px /></li><li><p>获取时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> date=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>date.<span class="hljs-title function_">getTime</span>()<br><br>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><br>D<br></code></pre></td></tr></table></figure></li></ul><h4 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h4><ul><li><p>查找结点</p><ul><li><p>父节点，返回最近一级的父结点，找不到返回NULL：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">子元素.<span class="hljs-property">parentNode</span><br></code></pre></td></tr></table></figure></li><li><p>子节点</p><ul><li><code>childNodes</code>:获得所有子节点、包括文本节点（空格、换行）、注释节点等</li><li><code>children</code>属性: 仅获得所有元素节点，返回一个伪数组</li></ul></li><li><p>兄弟节点</p><ul><li>下一个<code>previousElementSibling</code></li><li>上一个<code>nextElementSibling</code></li></ul></li></ul></li><li><p>创建节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;标签名&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>插入节点</p><ul><li><p>插入到这个父元素的最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">父元素.<span class="hljs-title function_">appendChild</span>(要插入的元素)<br></code></pre></td></tr></table></figure></li><li><p>插入到父元素的某个子元素之前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">父元素.<span class="hljs-title function_">insertBefore</span>(要插入的元素，在哪个元素前面)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>克隆节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">元素.<span class="hljs-title function_">cloneNode</span>(布尔值)<br><span class="hljs-comment">// 布尔值决定是否克隆后代</span><br></code></pre></td></tr></table></figure></li><li><p>删除结点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">父元素.<span class="hljs-title function_">removeChild</span>(要删除的元素)<br></code></pre></td></tr></table></figure></li></ul><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/javascript-json-parse.html">JSON.parse()</a></td><td>用于将一个 JSON 字符串转换为 JavaScript 对象。</td></tr><tr><td><a href="https://www.runoob.com/js/javascript-json-stringify.html">JSON.stringify()</a></td><td>用于将 JavaScript 值转换为 JSON 字符串。</td></tr></tbody></table><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><p><strong>#</strong> 包含了一个位置信息，默认的锚是**#top** 也就是网页的上端。</p><p>而javascript:void(0), 仅仅表示一个死链接。</p><p>在页面很长的时候会使用 <strong>#</strong> 来定位页面的具体位置，格式为：**# + id**。</p><p>如果你要定义一个死链接请使用 javascript:void(0) 。</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>构造：<code>/表达式/修饰符</code></p><ul><li><pre><code class="js">let re = /ab+c/;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ ```js<br>  let re = <span class="hljs-keyword">new</span> RegExp(<span class="hljs-string">&quot;ab+c&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>转义字符：<code>\</code></p><p>特殊字符：</p><p>断言：表示一个匹配在某些条件下发生。断言包含先行断言、后行断言和条件表达式。</p><ul><li><code>x*</code> 前一项<code>x</code>出现零次或多次</li><li><code>^</code> 匹配输入的开始</li><li><code>$</code>匹配输入的结束</li><li><code>\b</code> 匹配单词边界</li><li><code>\B</code> 匹配非单词边界</li><li>先行断言：<code>x(?=y)</code>  x 被 y 跟随时匹配 x</li><li>先行否定断言：<code>x(?!y)</code>   x 没有被 y 紧随时匹配 x</li><li>后行断言：<code>(?&lt;=y)x</code>  x 跟随 y 的情况下匹配 x</li><li>后行否定断言：<code>(?&lt;!y)x</code>   x 不跟随 y 时匹配 x</li></ul><p>字符类：区分不同类型的字符，例如区分字母和数字。 </p><ul><li><code>[xyz][a-c]</code>: 匹配包含在方括号中的任何字符。可以使用连字符指定字符范围</li><li><code>[^xyz][^a-c]</code>: 一个否定或补充的字符类。也就是说，它匹配未包含在方括号中的任何字符</li><li><code>.</code>: 匹配<strong>除行终止符之外的任何单个字符</strong>：<code>\n</code>, <code>\r</code>, <code>\u2028</code> or <code>\u2029</code>. 例如，<code>/.y/</code> 在“yes make my day”中匹配“my”和“ay”，而不是“yes”。 </li><li><code>\d</code>: 数字   相当于 <code>[0-9]</code></li><li><code>\D</code>: 非数   相当于<code>[^0-9]</code></li><li><code>\w</code>:  字母 数字 下划线   相当于 <code>[A-Za-z0-9_]</code></li><li><code>\W</code>: 非<code>\w</code></li><li><code>\s</code>: 单个空白字符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。相当于 <code>[\f\n\r\t\v\u0020\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]</code></li><li><code>\S</code></li></ul><p>组和范围：表示表达式字符的分组和范围。</p><ul><li><code>(x)</code>:  <strong>捕获组：</strong>匹配 x 并记住匹配项。例如，&#x2F;(foo)&#x2F;匹配并记住“foo bar”中的“foo”</li><li><code>(?:x)</code>:  仅分组，不记住 </li><li><code>\n</code>:  其中 n 是一个正整数。对正则表达式中与 n 括号匹配的最后一个子字符串的反向引用 (计算左括号)</li></ul><p>量词：表示匹配的字符或表达式的数量</p><ul><li><code>x+</code>:  <code>x</code>出现一次或多次</li><li><code>x?</code>:  <code>x</code>出现一次或零次</li><li><code>x&#123;n&#125;</code>:  <code>x</code>出现n次</li><li><code>x&#123;n,&#125;</code>:  <code>x</code>至少出现n次</li><li><code>x&#123;n,m&#125;</code>:  <code>x</code>出现n~m次</li></ul><blockquote><p>默认情况下，像 <code>* </code>和 <code>+ </code>这样的量词是“贪婪的”，这意味着它们试图匹配尽可能多的字符串。?量词后面的字符使量词“非贪婪”：意思是它一旦找到匹配就会停止。例如，给定一个字符串“some <foo> <bar> new </bar> </foo> thing”:</p><ul><li><code>/&lt;.*&gt;/</code> will match “<foo> <bar> new </bar> </foo>“</li><li><code>/&lt;.*?&gt;/</code> will match “<foo>“</li></ul></blockquote><p>修饰符：</p><ul><li>i使用此修饰符后，搜索时不区分大小写：<code>A</code> 和 <code>a</code> 之间没有区别（请参见下面的示例）。</li><li>g    使用此修饰符后，搜索时会寻找所有的匹配项 —— 没有它，则仅返回第一个匹配项。</li><li>m   多行模式（详见 <a href="https://zh.javascript.info/regexp-multiline-mode">锚点 ^ $ 的多行模式，修饰符 “m”</a>）。</li><li>s   启用 “dotall” 模式，允许点 <code>.</code> 匹配换行符 <code>\n</code>（在 <a href="https://zh.javascript.info/regexp-character-classes">字符类</a> 中有详细介绍）。</li><li>u   开启完整的 Unicode 支持。该修饰符能够正确处理代理对。详见 <a href="https://zh.javascript.info/regexp-unicode">Unicode：修饰符 “u” 和类 \p{…}</a>。</li><li>y   粘滞模式，在文本中的确切位置搜索（详见 <a href="https://zh.javascript.info/regexp-sticky">粘性修饰符 “y”，在位置处搜索</a>）</li></ul><p>方法：</p><ul><li><p>搜索：<code>str.match(regexp)</code> 方法在字符串 <code>str</code> 中寻找 <code>regexp</code> 的所有匹配项。</p></li><li><p>替换：<code>str.replace(regexp, replacement)</code> 方法使用 <code>replacement</code> 替换在字符串 <code>str</code> 中找到的 <code>regexp</code> 的匹配项： </p><p>（如果带有修饰符 <code>g</code> 则替换所有匹配项，否则只替换第一个）。</p><p>第二个参数是字符串 <code>replacement</code>。我们可以在其中使用特殊的字符组合来对匹配项进行插入：</p><table><thead><tr><th align="left">符号</th><th align="left">在替换字符串中的行为</th></tr></thead><tbody><tr><td align="left"><code>$&amp;</code></td><td align="left">插入整个匹配项</td></tr><tr><td align="left"><code>$</code></td><td align="left">插入字符串中匹配项之前的字符串部分</td></tr><tr><td align="left"><code>$&#39;</code></td><td align="left">插入字符串中匹配项之后的字符串部分</td></tr><tr><td align="left"><code>$n</code></td><td align="left">如果 <code>n</code> 是一个 1-2 位的数字，则插入第 n 个分组的内容，详见 <a href="https://zh.javascript.info/regexp-groups">捕获组</a></td></tr><tr><td align="left"><code>$&lt;name&gt;</code></td><td align="left">插入带有给定 <code>name</code> 的括号内的内容，详见 <a href="https://zh.javascript.info/regexp-groups">捕获组</a></td></tr><tr><td align="left"><code>$$</code></td><td align="left">插入字符 <code>$</code></td></tr></tbody></table></li><li><p>测试:  <code>regexp.test(str)</code> 方法寻找至少一个匹配项，如果找到了，则返回 <code>true</code>，否则返回 <code>false</code>。</p></li></ul><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>来源：<a href="https://es6.ruanyifeng.com/#docs/module">https://es6.ruanyifeng.com/#docs/module</a></p><ul><li><code>export</code>:   规定模块的对外接口</li><li><code>import</code>:   输入 其他模块提供的功能</li></ul><h5 id="export"><a href="#export" class="headerlink" title="export"></a>export</h5><p>别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span>&#123;<br>  原名<span class="hljs-number">1</span> <span class="hljs-keyword">as</span> 别名<span class="hljs-number">1</span>,<br>  原名<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 别名<span class="hljs-number">2</span>,<br>  原名<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 别名<span class="hljs-number">3</span>,<br>&#125;<br><span class="hljs-comment">// 一个原名可以有多个别名</span><br></code></pre></td></tr></table></figure><p>提供接口而不是值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m; <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>没有提供对外接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> &#123;m&#125;;<br><br><span class="hljs-keyword">let</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> &#123;n <span class="hljs-keyword">as</span> m&#125;; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><p>在接口名与模块内部变量之间，建立了一一对应的关系</p><p><strong><code>export</code>输出的接口，与对应的值是动态绑定的关系</strong></p><h5 id="import"><a href="#import" class="headerlink" title="import"></a>import</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;接口名&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;其他模块&#x27;</span><br></code></pre></td></tr></table></figure><p>接口名必须与其他被导入模块的对外接口名相同</p><p>接口的值不允许更改，只读</p><p>整体加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> circle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./circle&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(circle.<span class="hljs-title function_">area</span>(<span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(circle.<span class="hljs-title function_">circumference</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h5 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">area</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>=<span class="hljs-keyword">function</span> <span class="hljs-title function_">area</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-keyword">import</span> anyName <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;area&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>不需要大括号</li><li>不用和输出一致</li></ul><p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a;<br><br><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>export default a</code>的含义是将变量<code>a</code>的值赋给变量<code>default</code>。所以，最后一种写法会报错。</p><p>同样地，因为<code>export default</code>命令的本质是将后面的值，赋给<code>default</code>变量，所以可以直接将一个值写在<code>export default</code>之后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-number">42</span>;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">42</span>;<br></code></pre></td></tr></table></figure><h5 id="export-与-import-的复合写法"><a href="#export-与-import-的复合写法" class="headerlink" title="export 与 import 的复合写法"></a>export 与 import 的复合写法</h5><p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><br><span class="hljs-comment">// 可以简单理解为</span><br><span class="hljs-keyword">import</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123; foo, bar &#125;;<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><blockquote><p>作者：littleyu<br>链接：<a href="https://www.jianshu.com/p/ad22f8463afb">https://www.jianshu.com/p/ad22f8463afb</a></p></blockquote><p>JS（ES5）里面有三种函数调用形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">func</span>(p1, p2)<br>obj.<span class="hljs-property">child</span>.<span class="hljs-title function_">method</span>(p1, p2)<br>func.<span class="hljs-title function_">call</span>(context, p1, p2)<br></code></pre></td></tr></table></figure><p>只有第三种才是一般方式，前两种均为语法糖</p><p>context相当于python中的self,  是一个默认参数</p><p>前两种到第三种的变化方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">func</span>(p1, p2) 等价于<br>func.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>, p1, p2)<br><br>obj.<span class="hljs-property">child</span>.<span class="hljs-title function_">method</span>(p1, p2) 等价于<br>obj.<span class="hljs-property">child</span>.<span class="hljs-property">method</span>.<span class="hljs-title function_">call</span>(obj.<span class="hljs-property">child</span>, p1, p2)<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;其中<code>context</code>就是<code>this</code>&#x3D;&#x3D;,  即</p><ul><li><strong>函数</strong>中，<code>this</code>为<code>undefined</code>，但被替换为<code>window</code></li><li><code>obj.method()</code>中，<code>this</code>为<code>obj</code></li></ul><p>总结：this 就是 call 的第一个参数</p><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;Hello!!&quot;</span>;      <span class="hljs-comment">// 我将调用自己</span><br>&#125;)();<br></code></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><ul><li>匿名函数的<code>this</code>: 匿名函数最经典的总结：就是谁调用匿名函数，匿名函数中的this就指向谁；匿名函数是有执行上下文，只是执行上下文是执行的时候传递过来，<a href="https://so.csdn.net/so/search?q=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">箭头函数</a>中的执行上下文是父级的执行上下文，匿名函数可以作为箭头函数的父级（详见例3）</li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, …, 参数N) =&gt; &#123; 函数声明 &#125;<br><br>(参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, …, 参数N) =&gt; 表达式(单一)<br><span class="hljs-comment">// 相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span><br></code></pre></td></tr></table></figure><p>当只有一个参数时，圆括号是可选的：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">(单一参数) <span class="hljs-operator">=</span>&gt; &#123;函数声明&#125;<br>单一参数 <span class="hljs-operator">=</span>&gt; &#123;函数声明&#125;<br></code></pre></td></tr></table></figure><p>没有参数的函数应该写成一对圆括号:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">() =&gt; &#123;函数声明&#125;<br></code></pre></td></tr></table></figure><p>箭头函数中的<code>this</code>是<code>window</code></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">lazy_sum</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> f = lazy_sum([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]); // function sum()<br></code></pre></td></tr></table></figure><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">f</span>(); <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises">参考资料</a>：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises</a></p><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>事件处理程序是一种特殊类型的回调函数。</p><p>而回调函数则是<strong>一个被传递到另一个函数中的会在适当的时候被调用的函数。</strong></p><p>正如我们刚刚所看到的：回调函数曾经是 JavaScript 中实现异步函数的主要方式。</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>样例展示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> incantations = <span class="hljs-string">&quot;芝麻开门&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.wrapper .btn&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">mPrompt</span>()<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res === incantations) &#123;<br>          <span class="hljs-variable language_">document</span><br>            .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;#door .doors&quot;</span>)[<span class="hljs-number">0</span>]<br>            .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;door-left&quot;</span>);<br>          <span class="hljs-variable language_">document</span><br>            .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;#door .doors&quot;</span>)[<span class="hljs-number">1</span>]<br>            .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;door-right&quot;</span>);<br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mPrompt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">res, rej</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#confirm&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.message-body input&quot;</span>).<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">res</span>(input);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.modal&quot;</span>).<span class="hljs-title function_">remove</span>();<br>    &#125;)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#cancel&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">rej</span>(<span class="hljs-literal">false</span>);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.modal&quot;</span>).<span class="hljs-title function_">remove</span>();<br>    &#125;)<br>  &#125;)<br>&#125;<br><br><br><br><span class="hljs-comment">// 原理：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">res, rej</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 处理处理</span><br>        <span class="hljs-comment">// 阿巴阿巴</span><br>        <span class="hljs-comment">// 处理成功：</span><br>        <span class="hljs-title function_">res</span>(a ba a ba);<span class="hljs-comment">//调用then中传入的函数</span><br>        <span class="hljs-comment">// 处理失败</span><br>        <span class="hljs-title function_">rej</span>(err); <span class="hljs-comment">//调用catch中传入的函数</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">myPromise</span>()<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">a ba a ba</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 阿巴阿巴</span><br>    <span class="hljs-comment">// 这个就是res函数</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <br>&#125;);<br><span class="hljs-comment">// 或者：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-title function_">myPromise</span>().<span class="hljs-title function_">then</span>(a).<span class="hljs-title function_">catch</span>(b);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise = <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;bad-scheme://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);<br><br>fetchPromise<br>  .<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP 请求错误：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>( <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法获取产品列表：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><p>Promise 对象的构造器（constructor）语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// executor（生产者代码，“歌手”）</span><br>    <span class="hljs-title function_">resolve</span>(aaa)<br>&#125;);<br></code></pre></td></tr></table></figure><p>传递给 <code>new Promise</code> 的函数被称为 <strong>executor</strong>。当 <code>new Promise</code> 被创建，executor 会自动运行。</p><p>是成功还是失败，由写的代码决定：</p><ul><li>调用了<code>resolve</code>，就是成功</li><li>调用了<code>reject</code>，就是失败</li></ul><p><code>await promise</code>的返回值是<code>aaa</code></p><p><code>Promise</code> 的三种状态：</p><ul><li><strong>待定（pending）</strong>：初始状态，既没有被兑现，也没有被拒绝。这是调用 <code>fetch()</code> 返回 Promise 时的状态，此时请求还在进行中。</li><li><strong>已兑现（fulfilled）</strong>：意味着操作成功完成。当 Promise 完成时，它的 <code>then()</code> 处理函数被调用。</li><li><strong>已拒绝（rejected）</strong>：意味着操作失败。当一个 Promise 失败时，它的 <code>catch()</code> 处理函数被调用。</li><li><strong>已敲定（settled）</strong>:   这个词来同时表示 <strong>已兑现（fulfilled）</strong> 和 <strong>已拒绝（rejected）</strong> 两种情况。</li></ul><h4 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async &#x2F; await"></a>async &#x2F; await</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code></a> :</p><ul><li>提供了一种更简单的方法来处理基于异步 Promise 的代码。在一个函数的开头添加 <code>async</code>，就可以使其成为一个异步函数。</li><li>内部同步，外部异步</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">myFunction</span>()</span> &#123;<br>  <span class="hljs-comment">// 这是一个异步函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchProducts</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span><br>    <span class="hljs-comment">// 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP 请求错误：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span><br>    <span class="hljs-comment">// `response.json()` 调用将返回 JSON 对象或抛出一个错误</span><br>    <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125;<br>  <span class="hljs-keyword">catch</span>(error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法获取产品列表：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">fetchProducts</span>();<br></code></pre></td></tr></table></figure><p>在异步函数中，你可以在调用一个返回 Promise 的函数之前使用 <code>await</code> 关键字。</p><p>这使得代码在该点上等待，直到 Promise 被完成，</p><p>这时 Promise 的响应被当作返回值，或者被拒绝的响应被作为错误抛出。</p><p>这使你能够编写像同步代码一样的异步函数</p><p>就像一个 Promise 链一样，<code>await</code> 强制异步操作以串联的方式完成。如果下一个操作的结果取决于上一个操作的结果，这是必要的，但如果不是这样，像 <code>Promise.all()</code> 这样的操作会有更好的性能。</p><ul><li><code>await</code>: 它阻止 JavaScript 在解决 promise 之前将 <code>fetch</code> 赋值给 response 变量。一旦 promise 被解决，现在可以将 fetch 方法的结果分配给 response 变量。</li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>来自：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022609723552">https://www.liaoxuefeng.com/wiki/1022910821149312/1023022609723552</a></p><h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><p>选择：</p><ul><li><code>$(&#39;选择器&#39;)</code></li><li>返回对象数组</li><li>使用<code>$(&#39;选择器&#39;).find(&#39;选择器&#39;)</code>进行双层查找</li></ul><ol><li><p>选择器：使用 <code>$</code> 符号和括号可以选择 <code>HTML</code> 元素，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>) <span class="hljs-comment">// 选择整个文档对象</span><br>$(<span class="hljs-string">&#x27;#myId&#x27;</span>) <span class="hljs-comment">// 选择 id=&quot;myId&quot; 的元素</span><br>$(<span class="hljs-string">&#x27;.myClass&#x27;</span>) <span class="hljs-comment">// 选择 class=&quot;myClass&quot; 的元素</span><br>$(<span class="hljs-string">&#x27;input[type=text]&#x27;</span>) <span class="hljs-comment">// 选择所有 type=&quot;text&quot; 的 input 元素</span><br></code></pre></td></tr></table></figure></li><li><p>事件：使用 <code>on()</code> 函数来为元素绑定事件处理程序，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#myButton&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Button clicked!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>操作元素：使用 <code>jQuery</code> 提供的函数可以对 <code>HTML</code> 元素进行操作，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#myDiv&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>); <span class="hljs-comment">// 修改元素内容</span><br>$(<span class="hljs-string">&#x27;#myInput&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;default value&#x27;</span>); <span class="hljs-comment">// 设置 input 元素的默认值</span><br>$(<span class="hljs-string">&#x27;#myImage&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;newimage.jpg&#x27;</span>); <span class="hljs-comment">// 修改元素属性</span><br>$(<span class="hljs-string">&#x27;#myDiv&#x27;</span>).<span class="hljs-title function_">hide</span>(); <span class="hljs-comment">// 隐藏元素</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><ul><li><p>jQuery对象的<code>text()</code>和<code>html()</code>方法分别获取节点的文本和原始HTML文本</p></li><li><p>一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。所以jQuery对象的另一个好处是我们可以执行一个操作，作用在对应的一组DOM节点上。即jQuery对象有&#x3D;&#x3D;“批量操作”&#x3D;&#x3D;的特点</p></li><li><p>jQuery对象有<code>css(&#39;name&#39;, &#39;value&#39;)</code>方法，并且所有jQuery对象的方法的返回值都为jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-div&#x27;</span>);<br>div.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>); <span class="hljs-comment">// &#x27;#000033&#x27;, 获取CSS属性</span><br>div.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#336699&#x27;</span>); <span class="hljs-comment">// 设置CSS属性</span><br>div.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 清除CSS属性</span><br></code></pre></td></tr></table></figure></li><li><p>修改class：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-div&#x27;</span>);<br>div.<span class="hljs-title function_">hasClass</span>(<span class="hljs-string">&#x27;highlight&#x27;</span>); <span class="hljs-comment">// false， class是否包含highlight</span><br>div.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;highlight&#x27;</span>); <span class="hljs-comment">// 添加highlight这个class</span><br>div.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;highlight&#x27;</span>); <span class="hljs-comment">// 删除highlight这个class</span><br></code></pre></td></tr></table></figure></li><li><p>隐藏和显示DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&#x27;a[target=_blank]&#x27;</span>);<br>a.<span class="hljs-title function_">hide</span>(time); <span class="hljs-comment">// 隐藏, time ms内逐渐消失</span><br>a.<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// 显示</span><br>a.<span class="hljs-title function_">toggle</span>() <span class="hljs-comment">//方法则根据当前状态决定是show()还是hide()</span><br><br><span class="hljs-title function_">slideUp</span>()和<span class="hljs-title function_">slideDown</span>()则是在垂直方向逐渐展开或收缩的,<span class="hljs-title function_">slideToggle</span>()则根据元素是否可见来决定下一步动作<br><span class="hljs-title function_">fadeIn</span>()和<span class="hljs-title function_">fadeOut</span>()的动画效果是淡入淡出, <span class="hljs-title function_">fadeToggle</span>()则根据元素是否可见来决定下一步动作<br></code></pre></td></tr></table></figure></li><li><p><code>attr()</code>和<code>removeAttr()</code>方法用于操作DOM节点的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt;</span><br><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-div&#x27;</span>);<br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data&#x27;</span>); <span class="hljs-comment">// undefined, 属性不存在</span><br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// &#x27;Test&#x27;</span><br>div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">// div的name属性变为&#x27;Hello&#x27;</span><br>div.<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// 删除name属性</span><br></code></pre></td></tr></table></figure></li><li><p><code>attr()</code>和<code>prop()</code>对于属性<code>checked</code>处理有所不同:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> radio = $(<span class="hljs-string">&#x27;#test-radio&#x27;</span>);<br>radio.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;checked&#x27;</span>); <span class="hljs-comment">// &#x27;checked&#x27;</span><br>radio.<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;checked&#x27;</span>); <span class="hljs-comment">// true</span><br>radio.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:checked&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>对于表单元素，jQuery对象统一提供<code>val()</code>方法获取和设置对应的<code>value</code>属性,一个<code>val()</code>就统一了各种输入框的取值和赋值的问题</p></li></ul><h3 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h3><ul><li><p>使用<code>append()</code>方法为DOM对象添加元素</p></li><li><p>除了接受字符串，<code>append()</code>还可以传入原始的DOM对象，jQuery对象和函数对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#id&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;阿巴阿巴&#x27;</span>)<br><br><span class="hljs-comment">// 创建DOM对象:</span><br><span class="hljs-keyword">var</span> ps = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>ps.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;span&gt;Pascal&lt;/span&gt;&#x27;</span>;<br>更改元素内部文本 .<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;文本内容&quot;</span>)<br>替换元素内部内容 .<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;标签&gt;内容&lt;标签/&gt;&quot;</span>)<br><span class="hljs-comment">// 添加DOM对象:</span><br>ul.<span class="hljs-title function_">append</span>(ps);<br><br><span class="hljs-comment">// 添加jQuery对象:</span><br>ul.<span class="hljs-title function_">append</span>($(<span class="hljs-string">&#x27;#scheme&#x27;</span>));<br><br><span class="hljs-comment">// 添加函数对象:</span><br>ul.<span class="hljs-title function_">append</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index, html</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;li&gt;&lt;span&gt;Language - &#x27;</span> + index + <span class="hljs-string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><code>append()</code>把DOM添加到最后，<code>prepend()</code>则把DOM添加到最前。</p></li><li><p>同级节点可以用<code>after()</code>或者<code>before()</code>方法。</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p><code>on</code>方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&#x27;#test-link&#x27;</span>);<br>a.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>另一种更简化的写法是直接调用<code>click()</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>一个已被绑定的事件可以解除绑定，通过<code>off(&#39;click&#39;, function)</code>实现：</p><p>为了实现移除效果，可以使用<code>off(&#39;click&#39;)</code>一次性移除已绑定的<code>click</code>事件的所有处理函数。</p><p>同理，无参数调用<code>off()</code>一次性移除已绑定的所有类型的事件处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 绑定事件:</span><br>a.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello!&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 解除绑定:</span><br>a.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h3><p>基本</p><ul><li>hide(), show(), toggle()</li><li>slideUp(), slideDown(), slideToggle()</li><li>fadeIn(), fadeOut(), fadeToggle()</li></ul><p>自定义动画</p><ul><li><p>animate ( DOM元素最终的状态，时间，[动画结束时被调用的函数] )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&#x27;#test-animate&#x27;</span>);<br>div.<span class="hljs-title function_">animate</span>(&#123;<br>    <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.25</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;256px&#x27;</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;256px&#x27;</span><br>&#125;, <span class="hljs-number">3000</span>); <span class="hljs-comment">// 在3秒钟内CSS过渡到设定值</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> app = http.<span class="hljs-title function_">createServer</span>();<br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://labfile.oss.aliyuncs.com/courses/1262/vue.min.js<br></code></pre></td></tr></table></figure><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><h4 id="计算、侦听与过滤器、生命周期钩子"><a href="#计算、侦听与过滤器、生命周期钩子" class="headerlink" title="计算、侦听与过滤器、生命周期钩子"></a>计算、侦听与过滤器、生命周期钩子</h4><ul><li>计算属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我名字正着写：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- reverseName 计算属性  可以像绑定普通属性一样在模板中绑定计算属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计算出我名字倒着写：&#123;&#123;reverseName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">goodsList</span>: &#123;,</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;实验楼&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// reverseName 是一个计算属性</span></span><br><span class="language-javascript">                <span class="hljs-attr">reverseName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 一个只在内面挂载完毕，才开始执行的函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;goodsList.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">goodsList</span> = val.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生命周期函数是在特定时间点执行的函数，其中<code>this</code>的指向为<code>vm</code>或<code>组件</code></p><p>当你的计算属性的依赖数据发生改变时，你的相关计算属性也会重新计算</p><p>set与get: 给<code>this.计算属性</code>赋值会自动调用<code>计算属性.set</code></p><p><code>set:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>firstName:&#123;&#123;firstName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>lastName:&#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>全名是:&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改姓<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;王&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;花花&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// changeName 定义一个方法改变 计算属性 fullName 的值</span></span><br><span class="language-javascript">                <span class="hljs-attr">changeName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 修改计算属性 fullName 等于李花花</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;李花花&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 上面一句等于触发了 fullName 属性的 setter</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">fullName</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// getter</span></span><br><span class="language-javascript">                    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-comment">// setter  直接改变计算属性 fullName 的值就可以触发 setter this.fullName=&#x27;XX&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newName</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> name = newName;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = name.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 取新值的第一个字符</span></span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = name.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 从新值的第二个字符开始取值</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 不需要set时，可简写：</span></span><br><span class="language-javascript">                fullname :<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// ES6中，如果属性值是函数，则可以省略`:function`, 如:</span></span><br><span class="language-javascript">                <span class="hljs-title function_">fullname</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>侦听属性</li></ul><p>观察和响应 Vue 实例上的数据变动，侦听属性</p><p>监控<code>msg</code>，当<code>msg</code>改变是，调用对应的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- v-on:click 简写为 @click --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick(&#x27;hello syl&#x27;)&quot;</span>&gt;</span>改变msg<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 改变 msg 的值</span></span><br><span class="language-javascript">          <span class="hljs-attr">handleClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = val;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// watch 监听属性</span></span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 监听新旧值  监听属性有两个参数，第一个新值，第二个旧值</span></span><br><span class="language-javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新值&quot;</span> + newVal + <span class="hljs-string">&quot;----&quot;</span> + <span class="hljs-string">&quot;旧值&quot;</span> + oldVal);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>过滤器</li></ul><p>在 Vue 中我们有一个专门处理数据过滤的东西：过滤器。过滤器可以用在两个地方：<strong>双花括号插值和 v-bind 表达式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg2|getString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;msg2|getString&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>// 等价于：<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;getstring(msg2)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- toUpperCase   getString  为自定义的过滤器--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>小写转换大写：过滤前：&#123;&#123;msg&#125;&#125; 过滤后： &#123;&#123;msg|toUpperCase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>去除数字：过滤前：&#123;&#123;msg2&#125;&#125; 过滤后： &#123;&#123;msg2|getString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">msg2</span>: <span class="hljs-string">&quot;1s2y3l&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// filters 过滤器选项</span></span><br><span class="language-javascript">        <span class="hljs-attr">filters</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// toUpperCase 定义一个字符串转大写的过滤器</span></span><br><span class="language-javascript">          <span class="hljs-attr">toUpperCase</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">toUpperCase</span>();</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-comment">// getString 定义一个获取去除数字的过滤器</span></span><br><span class="language-javascript">          <span class="hljs-attr">getString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> newVal = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">            val.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">if</span> (<span class="hljs-number">9</span> &gt;= item &amp;&amp; item &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> (newVal += item);</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> newVal;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>非单文件组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    // 使用<br>    <span class="hljs-tag">&lt;<span class="hljs-name">xuexiao</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xuexiao</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建</span></span><br><span class="language-javascript">    <span class="hljs-comment">// const school = Vue.extend(options) 可简写为 const school = options</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> school = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125; &lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125; &lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,<span class="hljs-comment">// template会完全替换xuaxiao对象</span></span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">studentName</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// (局部)注册</span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">xuexiao</span>: school,</span><br><span class="language-javascript">            <span class="hljs-comment">//xuesheng: student,</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单文件组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;tempalte&gt;<br>    &lt;div&gt;<br>    <br>    &lt;/div&gt;<br>&lt;/tempalte&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name: &#x27;&#x27;,<br>    data() &#123;<br>        return &#123;<br>            schoolName: &#x27;&#x27;,<br>            address: &#x27;&#x27;<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        showName() &#123;<br>            alert(this.showName)<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>div&#123;<br>    color: pink;<br>&#125;<br>&lt;/style&gt;<br><br><br>// main.js 入口文件<br>import App from &#x27;./App&#x27;<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>template: `&lt;App&gt;&lt;/App&gt;`,<br>components: &#123;App&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>全局组件：<code>Vue.component</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">syl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">syl</span>&gt;</span><br>Vue.component(&quot;syl&quot;, &#123;<br>  template: &quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>实验楼全局组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;,<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>局部组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">syl-header</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">syl-header</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mid&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">syl-mid</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">syl-mid</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 头部组件</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> childComponent = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;h2&gt;我是实验楼局部组件header，只有我们父级才能调用&lt;/h2&gt;&quot;</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-comment">// 中间部分组件</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> childComponent2 = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;h2&gt;我是实验楼局部组件mid，只有我们父级才能调用&lt;/h2&gt;&quot;</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-comment">// header vm</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#header&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// 子组件必须声明后使用，不然不能起效</span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&quot;syl-header&quot;</span>: childComponent,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> mid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#mid&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// 子组件必须声明后使用，不然不能起效</span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&quot;syl-mid&quot;</span>: childComponent2,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>组件的优点就在于能够复用，一次代码编写，整个项目受用。</p><p><strong>注意：</strong> 复用组件内的 data 必须是一个函数，如果是一个对象（引用类型），组件与组件间会相互影响，组件数据不能独立管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;button-counter&quot;</span>, &#123;<br>    <span class="hljs-comment">// data 必须是一个函数不然会影响其他组件</span><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;counter++&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;&#x27;</span>,<br>&#125;);<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h5><p>父子：<code>props</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title-component</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;syl1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title-component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title-component</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;syl2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title-component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title-component</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;syl3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 注册一个 title 组件，通过传入不同的 title 值，渲染不同的东西</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 组件上 传递的 props 属性名为 kebab-case（短横线分隔命名）的要转换为驼峰命名</span></span><br><span class="language-javascript">      <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;title-component&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;postTitle&quot;</span>], <span class="hljs-comment">// post-title 转换为驼峰命名</span></span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;p&gt;&#123;&#123;postTitle&#125;&#125;&lt;/p&gt;&quot;</span>,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子父通信<code>this.$emit(&#39;自定义事件名&#39;，参数)</code></p><p>子组件向父组件数据传递套路：</p><p>第一步：子组件绑定事件。</p><p>第二步：子组件绑定事件触发，使用 $emit 创建自定义事件并传入需要传值给父组件的数据。</p><p>第三步：在子组件标签上 用 v-on 绑定自定义事件，在父组件中声明自定义事件处理的方法。</p><p>第四步：父组件方法，接受自定义事件传的参数，就完成了整个由下到上的数据流。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> <span class="hljs-attr">v-on:send-msg</span>=<span class="hljs-string">&quot;getMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 定义一个子组件，template 绑定 click 事件</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 当 click 事件触发就使用 emit 自定义一个事件 send-msg，传入参数 “我是子组件请求与你通信”</span></span><br><span class="language-javascript">      <span class="hljs-comment">// $emit(&#x27;send-msg&#x27;,&#x27;我是子组件请求与你通信&#x27;)</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 子组件标签上绑定自定义事件 send-msg，并绑定上父级的方法 getMsg，即可完成了子父组件通信</span></span><br><span class="language-javascript">      <span class="hljs-comment">// &lt;child-component v-on:send-msg=&quot;getMsg&quot;&gt;&lt;/child-component&gt;</span></span><br><span class="language-javascript">      <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;child-component&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;button v-on:click=&quot;$emit(&#x27;send-msg&#x27;,&#x27;我是子组件请求与你通信&#x27;)&quot;&gt;Click me&lt;/button&gt;`</span>,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">getMsg</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 弹出子组件传递的信息</span></span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(msg);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="props类型检测"><a href="#props类型检测" class="headerlink" title="props类型检测"></a>props类型检测</h5><p>通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span></span><br><span class="hljs-tag">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello syl&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;you are welcom&quot;</span></span><br><span class="hljs-tag">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">      // 注册一个子组件</span></span><br><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;child-component&quot;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        // props 对象形式，传递属性值 进行类型检测，在脚手架环境中很有用</span></span><br><span class="language-xml"><span class="language-handlebars">        props: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          id: Number,</span></span><br><span class="language-xml"><span class="language-handlebars">          title: String,</span></span><br><span class="language-xml"><span class="language-handlebars">          content: String,</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        // 使用 es6 模板字符串书写格式更优美</span></span><br><span class="language-xml"><span class="language-handlebars">        template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">id</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>title:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">      var app = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="动态组件、实例生命周期"><a href="#动态组件、实例生命周期" class="headerlink" title="动态组件、实例生命周期"></a>动态组件、实例生命周期</h5><h3 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vue_det&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 或 vm.$mount(&#x27;#vue_det&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 对象式：</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">site</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;www.runoob.com&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">alexa</span>: <span class="hljs-string">&quot;10000&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//函数式：</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">site</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 数据变化会触发Vue响应系统, 进而触发这个函数重新执行.</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">details</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">site</span> + <span class="hljs-string">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><p>初始化：向Vue构造函数中传入一个集合</p></li><li><ul><li><p><code>el</code>: 选择器，设置<code>Vue</code>实例挂载（管理）的元素</p></li><li><p><code>data</code>:  插值数据</p></li><li><p><code>method</code>:  方法</p></li></ul></li><li><p><code>vm.sute</code>可以这样用</p></li><li><p><code>vm.$el</code>,  <code>vm.$data</code>  它们都有前缀 $，以便与用户定义的属性区分开来</p></li><li></li></ul><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><p><code>&#123;&#123; name &#125;&#125;</code></p><blockquote><p>name 为Vue中data的元素</p></blockquote><h4 id="v-html、v-text"><a href="#v-html、v-text" class="headerlink" title="v-html、v-text"></a>v-html、v-text</h4><p>用于替换为<code>html</code>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app2&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">let</span> app2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app2&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&#x27;</span><br>    &#125;<br>&#125;) <br></code></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li>绑定事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&quot;doIt&quot;</span>&gt;<br>或：<br>&lt;input @click=<span class="hljs-string">&quot;doIt(p1, p2)&quot;</span>&gt;  <span class="hljs-comment">//自定义参数</span><br>或<br>&lt;input @keyup.<span class="hljs-property">enter</span>=<span class="hljs-string">&quot;sayHi&quot;</span>&gt;   <span class="hljs-comment">//事件修饰符</span><br>    <br><span class="hljs-keyword">let</span> vm=<span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">food</span>: <span class="hljs-string">&quot;西蓝花&quot;</span>,<br>    &#125;<br>    <span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-attr">doIt</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">p1, p2</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">food</span><br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>键盘事件：</p><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</p><ul><li><p><code>keyup.enter</code></p></li><li><p><code>click.ctrl</code>同时鼠标左击和按 ctrl 弹出提示 </p></li><li><p><code>.exact</code> 精确按键修饰符，允许你控制由精确的系统修饰符组合触发的事件。</p><ul><li><code>click.ctrl</code>即使 Alt 或 Shift 被一同按下时也会触发</li><li><code>click.ctrl.exact</code>有且只有 ctrl 键 + 鼠标左键 被按下的时候才触发</li></ul></li><li><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><ul><li><p><code>.left</code></p></li><li><p><code>.right</code></p></li><li><p><code>.middle</code></p></li></ul></li><li></li></ul><h4 id="v-show、v-if"><a href="#v-show、v-if" class="headerlink" title="v-show、v-if"></a>v-show、v-if</h4><p>根据表达式的真假，切换元素的显示和隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">v-show=<span class="hljs-string">&quot;isShow&quot;</span><br>v-show=<span class="hljs-string">&quot;age&gt;=18&quot;</span><br><br><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">16</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>v-if</code>:  同上，但操作dom元素，性能差</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>&#x3D;&#x3D;属性变量化&#x3D;&#x3D;</p><p>设置元素的属性(src,  title,  class)</p><p>可以多个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">v-<span class="hljs-attr">bind</span>:src=<span class="hljs-string">&quot;imgSrc&quot;</span><br><br><span class="hljs-attr">data</span>:&#123;<br>    imgSrc=<span class="hljs-string">&quot;   &quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">v-<span class="hljs-attr">bind</span>: <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;isActive ? &#x27;active&#x27; : &#x27;&#x27; &quot;</span><br>v-<span class="hljs-attr">bind</span>: <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;red-bg&#x27;: isRed&#125;&quot;</span><br><span class="hljs-comment">// active为构建好的类</span><br><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>v-bind</code>可以省略，如：</p><p><code>:src=&quot;imgSrc&quot;</code></p><p>元素style绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123;fontSize:size,backgroundColor:bgColor&#125;&quot;</span>&gt;</span>你好，实验楼<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">size</span>: <span class="hljs-string">&quot;26px&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">bgColor</span>: <span class="hljs-string">&quot;pink&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span>&gt;</span> </span><br><span class="language-xml">        &#123;&#123;index&#125;&#125;  &#123;&#123; item &#125;&#125; </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">arr</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">objArr</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose&#x27;</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            ]</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除，直接进行 <code>app.userInfo.height=&#39;180cm&#39;</code> 这样操作是不会构成响应式，不会触发视图更新。必须使用 <code>Vue.set(object, key, value)</code> 方法向嵌套对象添加响应式属性</p><p>eg.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(app.<span class="hljs-property">objArr</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;andy&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h4><p>一些操作数组的方法，编译会检测，从而会促使视图更新。</p><ul><li>变异方法</li></ul><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code>  删除并返回第一个</li><li><code>unshift()</code>  向开头添加多个元素，返回新长度</li><li><code>splice()</code>   删除 &#x2F; 删除并添加</li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><p>上面这些数组操作方法，会直接改变原始数组称为变异方法，会促使视图自动更新。</p><ul><li>替换数组</li></ul><p>学了 JavaScript 标准对象库，都知道有些数组方法是不直接改变原数组的，这里称它们为非变异方法，例如：filter()、slice()、concat()，它们都是返回一个新数组，那么，在 Vue 中使用到这些方法，怎么样才能促使视图更新呢？我们就必须使用数组替换法，将非变异方法返回的新数组直接赋值给的旧数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">nav</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">nav</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><ul><li>注意</li></ul><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ol><li>当你利用索引直接设置一个项时，例如：<code>vm.items[indexOfItem] = newValue</code>。</li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code>。</li></ol><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">items</span>: [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>],<br>  &#125;,<br>&#125;);<br>app.<span class="hljs-property">items</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;x&quot;</span>; <span class="hljs-comment">// 不是响应性的</span><br>app.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// 不是响应性的</span><br></code></pre></td></tr></table></figure><p>上去直接这样改值操作是没有问题的，但是不是响应式的，并不能触发视图更新，需要用其他方法代替。</p><p>例如这样的操作 <code>app.items[indexOfItem] = newValue</code> ，可以用以下两种代替。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Vue.set</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(vm.<span class="hljs-property">items</span>, indexOfItem, newValue);<br><span class="hljs-comment">// Array.prototype.splice</span><br>vm.<span class="hljs-property">items</span>.<span class="hljs-title function_">splice</span>(indexOfItem, <span class="hljs-number">1</span>, newValue);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">// 不加括号<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;number in oddNumber&quot;</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>computed: &#123;<br>          // 计算 numberArray 中为奇数的 oddNumber 奇数数组<br>          oddNumber: function () &#123;<br>            return this.numberArray.filter(function (number) &#123;<br>              return number % 2 === 1;<br>            &#125;);<br>          &#125;<br>//加括号<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;number in getOddNumber()&quot;</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>methods: &#123;<br>          // 定一个一个获取数组内奇数的方法 filter 数组对象的过滤方法<br>          getOddNumber: function () &#123;<br>            return this.numberArray.filter(function (number) &#123;<br>              return number % 2 === 1;<br>            &#125;);<br>          &#125;,<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h4><h5 id="v-module"><a href="#v-module" class="headerlink" title="v-module"></a>v-module</h5><ul><li>只适用于input标签</li><li>便捷地设置和获取表单元素的值</li><li>绑定的数据会和表单元素值相关联</li><li>绑定的数据 &lt;–&gt; 表单元素的值：双向绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">let</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;黑馬程序員&quot;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="常用表单元素"><a href="#常用表单元素" class="headerlink" title="常用表单元素"></a>常用表单元素</h5><table><thead><tr><th>元素</th><th></th></tr></thead><tbody><tr><td>input[type&#x3D;*]</td><td>文本输入框</td></tr><tr><td>textarea</td><td>多行文本</td></tr><tr><td>radio</td><td>单选按钮</td></tr><tr><td>checkbox</td><td>复选框</td></tr><tr><td>select</td><td>选择框</td></tr></tbody></table><p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p><p><strong>注意一</strong>：<code>v-model</code> 会忽略所有表单元素的  <code>value</code>、<code>checked</code>、<code>selected</code> 特性的初始值而总是将 Vue 实例的数据作为数据来源。直接给元素 value 赋值不会生效的，你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><p><strong>注意二</strong>：<code>v-model</code> 在内部使用不同的属性为不同的输入元素并抛出不同的事件，具体体现我们在表单 <strong>修饰符小节</strong>，给大家说明：</p><ul><li><p>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件（内部监听 input 事件）；</p></li><li><p>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件（内部监听 change 事件）；</p></li><li><p>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件（内部监听 change 事件）。</p><p><strong>说明：</strong> change 和 input 区别就是，input 实时更新数据，change 不是实时更新</p></li></ul><h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><p>将单选按钮绑定到同一个 picked，即可完成数据绑定</p><p>当第一个单选被选中 picked 的值为第一个单选按钮的 value，</p><p>同样当第二个单选被选中 picked 的值为第二个单选按钮的 value。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 将单选按钮绑定到同一个 picked --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">picked</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">          &#125;;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><p>复选框绑定的是一个布尔值（true or false），同样在复选框元素上使用 <code>v-model</code> 指令，在实例 data 中声明 checked，即可完成复选框数据的双向绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 绑定布尔值</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-module=&#39;check&#39;</code>表示</p><ul><li><p>当选中时，把<code>check = value</code>绑定</p></li><li><p>如果不存在<code>value</code>，则<code>check</code>为布尔值</p></li></ul><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><p>&#x3D;&#x3D;lazy&#x3D;&#x3D;</p><p>开始介绍表单处理时，我们说了几点注意，不同的元素，使用的值不同，抛出的事件也不同。</p><p>可能开发中，我们不需要数据实时更新，那么，我们怎么将 input 事件与 change 事件替换，</p><p>可以使用 <strong>.lazy</strong> 修饰符，可以将抛出事件由 input 改为 change，使表单元素惰性更新，不实时更新。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--使用 .lazy 修饰符将文本框 抛出的事件改为 change 事件，不再实时更新，只有文本框失去焦点才更新数据 惰性更新 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>只有文本框失去焦点才更新数据</strong></p><p>&#x3D;&#x3D;number&#x3D;&#x3D;</p><p>自动将用户的输入值转为数值类型</p><p>即使在  <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也会返回字符串（默认）</p><p>&#x3D;&#x3D;trim&#x3D;&#x3D;</p><p>过滤首尾空格</p><h3 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h3><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ul><li>基于<code>promise</code>的网络请求库</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>axios.get(&quot;地址?key=value &amp; key2=value2&quot;).then(function(resopnse)&#123;&#125;, function(err)&#123;&#125;);<br>axios.post(&quot;地址&quot;,&#123;key:value, key2:value2&#125;).then(function(resopnse)&#123;&#125;, function(err)&#123;&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取笑话&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getJoke&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;joke&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">joke</span>: <span class="hljs-string">&quot;很好笑的笑话&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">getJoke</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> that=<span class="hljs-variable language_">this</span>;      <span class="hljs-comment">//axios回调函数中this的值已经改变，需要提前保存</span></span><br><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;https://autumnfish.cn/api/joke&quot;</span>).<span class="hljs-title function_">then</span>(</span><br><span class="language-javascript">                    <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                        that.<span class="hljs-property">joke</span> = response.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                )</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------------------get-----------------------//</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">123</span>,<br>  &#125;,<br>  <span class="hljs-attr">headers</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>&#125;);<br><span class="hljs-comment">//-------------------post-----------------------//</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Sun&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>其中需要注意的是，<code>get</code> 和 <code>post</code> 请求中向后端传递参数的配置项名字不同：<code>get</code> 请求的需要使用 <code>params</code>，<code>post</code> 请求用于发送数据的为 <code>data</code>。</p><h4 id="Vue-router-路由管理器"><a href="#Vue-router-路由管理器" class="headerlink" title="Vue-router 路由管理器"></a>Vue-router 路由管理器</h4><p>引入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">https://unpkg.com/vue-router@2.0.0/dist/vue-router.js<br></code></pre></td></tr></table></figure><p>我们通过一个单页面应用来看看 Vue-Router 的使用，其基本步骤如下所示：</p><ul><li>使用 <code>router-link</code> 组件来导航，其通过 <code>to</code> 属性来指定跳转链接（这相当于 HTML 中的 a 标签）。</li><li>使用 <code>router-view</code> 组件定义路由出口，路由匹配到的组件将会渲染到此处。</li><li>使用 <code>const routes = [&#123; path, component &#125;]</code> 来定义路由（路径和组件名）。</li><li>使用 <code>const router = new VueRouter(&#123;&#125;)</code> 来创建路由实例，在其中传入上一步定义的路由配置 <code>routes</code>。</li><li>创建和挂载根实例，在 <code>new Vue</code> 中挂载上一步创建的路由实例 <code>router</code>。</li></ul><p>步骤清楚了，我们来举个例子吧～</p><p>使用以下命令获取 Vue 和 Vue-Router 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://labfile.oss.aliyuncs.com/courses/10532/vue-router.js<br></code></pre></td></tr></table></figure><p>新建一个 <code>index.html</code> 文件，在文件中写入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>路由的使用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用 router-link 组件来导航 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/hot&quot;</span>&gt;</span>热门<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/class&quot;</span>&gt;</span>分类<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;首页&lt;/div&gt;&quot;</span> &#125;;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title class_">Hot</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;热门&lt;/div&gt;&quot;</span> &#125;;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title class_">Class</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;分类&lt;/div&gt;&quot;</span> &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 定义路由</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> routes = [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/hot&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Hot</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/class&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Class</span> &#125;,</span><br><span class="language-javascript">      ];</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 创建 router 实例，然后传 routes 配置</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">        routes,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 创建和挂载根实例</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        router,</span><br><span class="language-javascript">      &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/c60ce628cc702cc13e22bfb688fbf9e0-0.gif" alt="图片描述"></p><h4 id="Vuex状态管理器"><a href="#Vuex状态管理器" class="headerlink" title="Vuex状态管理器"></a>Vuex状态管理器</h4><p>引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vuex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 导入Vuex包</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//创建store对象</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// store中存放的就是全局共享的数据</span></span><br><span class="language-javascript"><span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span>=&gt;</span><span class="hljs-title function_">h</span>(app),<span class="hljs-comment">//渲染app和组件</span></span><br><span class="language-javascript">    router,<span class="hljs-comment">//挂载路由</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 将创建的共享数据对象，挂载到Vue实例中</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 所有的组件，就可以直接总store中获取全局的数据</span></span><br><span class="language-javascript">    store</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在一个模块化的打包系统中，我们必须显式地通过 <code>Vue.use()</code> 来安装 Vuex：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br></code></pre></td></tr></table></figure><p>Vuex 中有五个核心概念，它们分别是 <a href="https://v3.vuex.vuejs.org/zh/guide/state.html">State</a>、<a href="https://v3.vuex.vuejs.org/zh/guide/getters.html">Getters</a>、<a href="https://v3.vuex.vuejs.org/zh/guide/mutations.html">Mutations</a>、<a href="https://v3.vuex.vuejs.org/zh/guide/actions.html">Actions</a> 和 <a href="https://v3.vuex.vuejs.org/zh/guide/modules.html">Modules</a>。</p><p>首先，在 <code>main.js</code> 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>; <span class="hljs-comment">// 导入 Vuex</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>); <span class="hljs-comment">// 使用 Vuex，让 Vuex 可以访问到 Vue</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建 Store 实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 计数器的初始值</span><br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  store, <span class="hljs-comment">// 注入 Store</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>有同学可能会问：为啥不叫 vuex 而是 store 呢？🤔</p><p>这是因为，Vuex 应用的核心就是 store（仓库）。它是一个用于存储组件共享状态（state）的容器，就像一个小型的数据仓库。它所有的功能和操作都是用于处理这个仓库中的状态而存在的，所以我们在创建 Vuex 配置的时候都是以 store 命名。</p><p>接下来，我们在 <code>App.vue</code> 中将计数器的状态展示出来，在文件中写入以下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// 通过计算属性来访问 count</span></span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">count</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来这里我们就可以在页面上访问到 count 的数据了，当前页面会显示 0。</p><p>接下来，我们要实现点击按钮计数的功能，每点一次按钮数据 +1。</p><p>在 <code>App.vue</code> 文件中定义一个按钮，新增代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--绑定一个点击事件，用 increment 来执行 count++ 的逻辑--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;increment&#x27;)&quot;</span>&gt;</span>++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们在 <code>main.js</code> 文件中增加 <code>mutations</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 此处省略 ...</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++; <span class="hljs-comment">// 执行 count++ 的操作</span><br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>计数器的功能就实现啦～ 🎉 效果如下：</p><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/6166336bf2d9cde9377a48e254cb9099-0.gif" alt="图片描述"></p><p>到此我们已经实现了一个最简单的 Vuex 状态管理，从上面的使用我们可以看出 <code>state</code> 就是用来存储和初始化状态。</p><p>通过上面简单的示例，我们知道了 Vuex 主要是用来存储并管理组件共享状态的。</p><p>有时候我们需要向后台发出一些异步请求，我们不能直接在 <code>mutations</code> 里进行操作，这时就可以在 <code>actions</code> 中定义一些异步操作。</p><p>下面我们来模拟一下异步操作，在页面上新增一个按钮，触发 <code>count--</code> 的操作。在 <code>App.vue</code> 中新增以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.dispatch(&#x27;decrement&#x27;)&quot;</span>&gt;</span>--<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意哦！！！ Actions 是通过 <code>store.dispatch</code> 方法来触发 <code>actions</code> 更新 <code>state</code> 状态。</p></blockquote><p>在 <code>main.js</code> 文件中新增以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>--;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params">&#123; commit &#125;</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 通过 commit 交给 mutations 去处理</span><br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;decrement&quot;</span>);<br>      &#125;, <span class="hljs-number">500</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>到这里我们 <code>count--</code> 的功能也实现了，效果如下：</p><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/23828431d3d026838a875127d37f4ca2-0.gif" alt="图片描述"></p><p>&#x3D;&#x3D;actions 与 mutations 的区别&#x3D;&#x3D;</p><p><code>actions</code> 类似于 <code>mutations</code>，不同的是：</p><ul><li><code>actions</code> 中的更新函数最终仍是通过调用 <code>mutations</code> 中的函数来更新状态的，不能通过它直接变更状态。</li><li>与 <code>mutations</code> 不同，<code>actions</code> 中可以包含任意异步操作。</li></ul><p>关于 <code>mutations</code>、<code>actions</code> 等的用法还有其它形式，这些在官网上都有详细的 API，大家可以根据<a href="https://next.vuex.vuejs.org/zh/guide/actions.html">官网 API</a> 对它们进行更多更深入的了解，这里就不再一一细说了。</p><p><code>getters</code> 可以帮助我们缓存数据。</p><p>我们增加一个每次计数增加两倍的功能，在 <code>main.js</code> 中新增以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">doubleCount</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在页面上获取数据，在 <code>App</code> 文件中新增以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;$store.getters.doubleCount&#125;&#125;<br></code></pre></td></tr></table></figure><p>这样，当点击 ++ 按钮时，计数会以乘 2 的形式增加。效果如下：</p><p><a src="https://vuex.vuejs.org/zh/guide/">Vuex官方文档</a></p><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123; <span class="hljs-comment">/* 根组件 */</span> &#125;)<br><br><span class="hljs-comment">// 将 store 实例作为插件安装</span><br>app.<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></figure><p>现在，你可以通过 <code>store.state</code> 来获取状态对象，并通过 <code>store.commit</code> 方法触发状态变更：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>) <span class="hljs-comment">// -&gt; 1</span><br></code></pre></td></tr></table></figure><p>在 Vue 组件中， 可以通过 <code>this.$store</code> 访问store实例。现在我们可以从组件的方法提交一个变更：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件之间共享数据的方式</p><ul><li>父向子传值：<code>v-bind</code>属性绑定</li><li>子向父传值：<code>v-on</code>事件绑定</li><li>兄弟组件之间共享数据：<code>EventBus</code><ul><li><code>$on</code>接收数据的那个组件</li><li><code>$emit</code>发送数据的按个组件</li></ul></li></ul><h5 id="State"><a href="#State" class="headerlink" title="State"></a>State</h5><p>State提供唯一的数据源，所有的共享数据都要放到state中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件访问state中数据：</p><ul><li><code>this.$store.state.全局数据名称</code>  template实例中可以省掉<code>this</code></li><li><img src="./image-20230325165358147.png" width=700px></li></ul><img src="./image-20230325170321186.png" width=700px><img src='./image-20230327210304577.png' width =700px ><h3 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h3><hr><h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#main</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">228</span>, <span class="hljs-number">255</span>, <span class="hljs-number">192</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> chartDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#main&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> myChart = echarts.<span class="hljs-title function_">init</span>(chartDom)</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> option=&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Thu&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>, <span class="hljs-string">&quot;Sun&quot;</span>],</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;value&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">230</span>, <span class="hljs-number">224</span>, <span class="hljs-number">218</span>, <span class="hljs-number">135</span>, <span class="hljs-number">147</span>, <span class="hljs-number">260</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            ],</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        myChart.<span class="hljs-title function_">setOption</span>(option);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="series系列"><a href="#series系列" class="headerlink" title="series系列"></a>series系列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">series</span>: [&#123;<br>    <span class="hljs-attr">data</span>: [数据],<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;图表类型&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;名字&#x27;</span>,<br>    <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;数据堆叠&#x27;</span><br>    <span class="hljs-comment">// 同个类目轴上系列配置相同的 stack 值后，</span><br>    <span class="hljs-comment">// 后一个系列的值会在前一个系列的值上相加</span><br>&#125;]<br></code></pre></td></tr></table></figure><p><code>type</code>:</p><ul><li>line（折线图）</li><li>bar（柱状图）</li><li>pie（饼图）</li><li>scatter（散点图）</li><li>graph（关系图）</li><li>tree（树图）</li></ul><p><code>tooltip</code>: 提示</p><h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset:"></a><code>dataset</code>:</h3><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/series-all-b.jpg"></p><h3 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h3><p>type是坐标轴类型，其类型有以下几种：</p><ul><li><code>value</code> 是数值轴，适用于连续数据。</li><li><code>category</code> 是类目轴，适用于离散的类目数据。</li><li><code>time</code> 是时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同。</li><li><code>log</code> 是对数轴。适用于对数数据。</li></ul><h3 id="多列柱状图"><a href="#多列柱状图" class="headerlink" title="多列柱状图"></a>多列柱状图</h3><img src="./image-20230317132119171.png" width=600px><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">option = &#123;<br>  <span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;axis&quot;</span>,<br>    <span class="hljs-attr">axisPointer</span>: &#123;<br>      <span class="hljs-comment">// 坐标轴指示器配置项</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;cross&quot;</span>,<br>      <span class="hljs-attr">crossStyle</span>: &#123;<br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">toolbox</span>: &#123;<br>    <span class="hljs-attr">feature</span>: &#123;<br>      <span class="hljs-attr">dataView</span>: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">readOnly</span>: <span class="hljs-literal">false</span> &#125;,<br>      <span class="hljs-attr">saveAsImage</span>: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-comment">// 保存图片</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">legend</span>: &#123;<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>], <span class="hljs-comment">// 图例的数据数组</span><br>  &#125;,<br>  <span class="hljs-attr">xAxis</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;中国&quot;</span>, <span class="hljs-string">&quot;美国&quot;</span>, <span class="hljs-string">&quot;古巴&quot;</span>, <span class="hljs-string">&quot;印度&quot;</span>, <span class="hljs-string">&quot;巴西&quot;</span>, <span class="hljs-string">&quot;不丹&quot;</span>, <span class="hljs-string">&quot;德国&quot;</span>],<br>      <span class="hljs-attr">axisPointer</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;shadow&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>  <span class="hljs-attr">yAxis</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;人口数量&quot;</span>,<br>      <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">8000</span>,<br>      <span class="hljs-attr">interval</span>: <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">axisLabel</span>: &#123;<br>        <span class="hljs-attr">formatter</span>: <span class="hljs-string">&quot;&#123;value&#125; 万&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">7113</span>, <span class="hljs-number">1619</span>, <span class="hljs-number">2340</span>, <span class="hljs-number">6987</span>, <span class="hljs-number">1046</span>, <span class="hljs-number">3783</span>, <span class="hljs-number">4145</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">6787</span>, <span class="hljs-number">1660</span>, <span class="hljs-number">2049</span>, <span class="hljs-number">6545</span>, <span class="hljs-number">1080</span>, <span class="hljs-number">4260</span>, <span class="hljs-number">3989</span>],<br>    &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p><a href="https://echarts.apache.org/zh/option.html#tooltip.axisPointer">tooltip.axisPointer</a> 是配置坐标轴指示器的全局公用设置，也就是说里面包含的属性都是与坐标轴的设置相关。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#tooltip.axisPointer.type">tooltip.axisPointer.type</a> 是指示器类型，包含 <code>line</code>（直线指示器）、<code>shadow</code>（阴影指示器）、<code>none</code>（无指示器）、<code>cross</code>（十字准星指示器）这四种类型。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#tooltip.axisPointer.crossStyle">tooltip.axisPointer.crossStyle.color</a> 用于设置线的颜色。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#legend.data">legend.data</a> 是图例的数据数组。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#xAxis.axisPointer.type">xAxis.axisPointer.type</a> 是指示器类型，包含 <code>line</code>（直线指示器）、<code>shadow</code>（阴影指示器）、<code>none</code>（无指示器）这三种类型。</p></li><li><ul><li><p><a href="https://echarts.apache.org/zh/option.html#yAxis.min">yAxis.min</a> 用于设置 y 轴的最小值。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#yAxis.max">yAxis.max</a> 用于设置 y 轴的最大值。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#yAxis.axisLabel.formatter">yAxis.axisLabel.formatter</a> 是刻度标签的内容格式器。</p></li></ul></li><li><p><a href="https://echarts.apache.org/zh/option.html#yAxis.inverse">yAxis.inverse</a> 设置是否反向坐标轴。</p></li><li><p><a href="https://echarts.apache.org/zh/option.html#series-bar.barWidth">series.barWidth</a> 设置条柱的宽度。</p></li></ul><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><img src="./image-20230317141239890.png" width=600px><ul><li><a href="https://echarts.apache.org/zh/option.html#series-pie.radius">series.radius</a> 设置饼形的半径</li><li><a href="https://echarts.apache.org/zh/option.html#series-pie.center">series.center</a> 设置饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。</li><li><a href="https://echarts.apache.org/zh/option.html#series-pie.roseType">series.roseType</a> 设置是否展示成南丁格尔图，通过半径区分数据大小，有两种模式：<ul><li><code>radius</code> 区圆心角展现数据的百分比，半径展现数据的大小。</li><li><code>area</code> 所有扇区圆心角相同，仅通过半径展现数据大小。</li></ul></li><li><a href="https://echarts.apache.org/zh/option.html#series-pie.itemStyle.borderRadius">series.itemStyle.borderRadius</a> 用于指定饼图扇形区块的内外圆角半径。</li><li><a href="https://echarts.apache.org/zh/option.html#legend.itemWidth">legend.itemWidth</a> 和 <a href="https://echarts.apache.org/zh/option.html#legend.itemHeight">legend.itemHeight</a> 分别是图例标记的图表宽度和高度，也就是最下方小图标的宽高。</li><li><a href="https://echarts.apache.org/zh/option.html#series-pie.labelLine.length">series-pie.labelLine.length</a> 是视觉引导线第一段的长度。</li><li><a href="https://echarts.apache.org/zh/option.html#series-pie.labelLine.length2">series-pie.labelLine.length2</a> 是视觉引导项第二段的长度。</li></ul><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p><img src="/2023/06/24/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/image-20230317143127481.png" alt="image-20230317143127481"></p><ul><li><a href="https://echarts.apache.org/zh/option.html#xAxis.nameGap">xAxis.nameGap</a> 用于设置坐标轴名称与轴线之间的距离，默认值为 15。</li><li><a href="https://echarts.apache.org/zh/option.html#xAxis.nameTextStyle.fontSize">xAxis.nameTextStyle.fontsize</a> 是用来设置坐标轴名称文字的字体大小，默认值为 12。</li><li><a href="https://echarts.apache.org/zh/option.html#xAxis.nameLocation">xAxis.nameLocation</a> 是用来设置坐标轴名称显示位置，可选值有 <code>start</code>（开头）、<code>middle</code> 或 <code>center</code>（居中）、<code>end</code>（末尾）。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap">visualMap</a> 是视觉映射组件。<ul><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.left">visualMap.left</a> 和 <a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.top">visualMap.top</a> 设置 visualMap 组件离容器左侧和顶部的距离。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.dimension">visualMap.dimension</a> 用来指定数据的哪个维度映射到视觉元素上。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.min">visualMap.min</a> 和 <a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.max">visualMap.max</a> 用来设置 visualMap 组件允许的最小值和最大值。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.itemWidth">visualMap.itemWidth</a> 和 <a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.itemHeight">visualMap.itemHeight</a> 设置 visualMap 组件图表的宽度和高度。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.calculable">visualMap.calculable</a> 设置是否显示拖拽用的手柄（手柄能拖拽调整选中范围）。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.precision">visualMap.precision</a> 是设置数据展示的小数精度，默认为 0，无小数点。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.text">visualMap.text</a> 和 <a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.textGap">visualMap.textGap</a> 用来设置 visualMap 组件图表上两端的文字和设置文字与图表之间的距离。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.inRange">visualMap.inRange.symbolSize</a> 设置选中范围内散点的大小。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.outOfRange">visualMap.outOfRange.symbolSize</a> 设置选中范围外散点的大小。</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-piecewise.color">visualMap.outOfRange.color</a> 设置选中范围外散点的颜色</li><li><a href="https://echarts.apache.org/zh/option.html#visualMap-continuous.controller">visualMap.controller</a> 是 visualMap 组件中，控制器的 inRange、outOfRange 设置。</li></ul></li></ul><h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><img src="/./image-20230623211215170.png" alt="image-20230623211215170"></p><hr><h1 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h1><h2 id="省赛"><a href="#省赛" class="headerlink" title="省赛"></a>省赛</h2><h3 id="9-寻找小狼人"><a href="#9-寻找小狼人" class="headerlink" title="9. 寻找小狼人"></a>9. 寻找小狼人</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回条件为真的新数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myarray</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-comment">// TODO：待补充代码</span><br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">cb</span>(item))<br>      ret.<span class="hljs-title function_">push</span>(item);<br>  &#125;)<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;;<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myarray</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-comment">// TODO：待补充代码</span><br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">cb</span>(item))<br>      ret.<span class="hljs-title function_">push</span>(item);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;;<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myarray</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-comment">// TODO：待补充代码</span><br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">cb</span>(<span class="hljs-variable language_">this</span>[item]))<br>      ret.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>[item]);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="10-课程列表"><a href="#10-课程列表" class="headerlink" title="10.课程列表"></a>10.课程列表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> pageNum = <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前页码，默认页码1</span><br><span class="hljs-keyword">let</span> maxPage; <span class="hljs-comment">// 最大页数</span><br><span class="hljs-keyword">let</span> prev = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prev&quot;</span>);<br><span class="hljs-keyword">let</span> next = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;next&quot;</span>);<br><br><span class="hljs-comment">// TODO：待补充代码</span><br><span class="hljs-keyword">let</span> update = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">pageNum</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;js/carlist.json&quot;</span>);<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Data</span> = result.<span class="hljs-property">data</span>;<br>  maxPage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Data</span>.<span class="hljs-property">length</span> / <span class="hljs-number">5</span>);<br><br>  <span class="hljs-keyword">if</span> (pageNum === <span class="hljs-number">1</span>) &#123;<br>    prev.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;page-item disabled&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pageNum === maxPage) &#123;<br>    next.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;page-item disabled&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    prev.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;page-item&quot;</span><br>    next.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;page-item&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> pag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#pagination&#x27;</span>);<br>  pag.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`共<span class="hljs-subst">$&#123;maxPage&#125;</span>页，当前<span class="hljs-subst">$&#123;pageNum&#125;</span>页`</span>;<br><br>  <span class="hljs-keyword">let</span> group = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.list-group&#x27;</span>);<br>  group.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">``</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> item = <span class="hljs-title class_">Data</span>[pageNum * <span class="hljs-number">5</span> + i - <span class="hljs-number">5</span>];<br>    group.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;a href=&quot;#&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;d-flex w-100 justify-content-between&quot;&gt;</span><br><span class="hljs-string">      &lt;h5 class=&quot;mb-1&quot;&gt;<span class="hljs-subst">$&#123;item.name&#125;</span>&lt;/h5&gt;</span><br><span class="hljs-string">      &lt;small&gt;<span class="hljs-subst">$&#123;item.price / <span class="hljs-number">100</span>&#125;</span>.<span class="hljs-subst">$&#123;item.price % <span class="hljs-number">100</span>&#125;</span>元&lt;/small&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;p class=&quot;mb-1&quot;&gt;<span class="hljs-subst">$&#123;item.description&#125;</span>&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/a&gt;`</span><br>  &#125;<br>&#125;<br><span class="hljs-title function_">update</span>(<span class="hljs-number">1</span>);<br>prev.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span>(pageNum&gt;<span class="hljs-number">1</span>)&#123;<br>    pageNum--;<br>    <span class="hljs-title function_">update</span>(pageNum);<br>  &#125;<br>&#125;;<br>next.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span>(pageNum&lt;maxPage)&#123;<br>    pageNum++;<br>    <span class="hljs-title function_">update</span>(pageNum);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="模拟赛1"><a href="#模拟赛1" class="headerlink" title="模拟赛1"></a>模拟赛1</h2><h3 id="3-水果叠叠乐"><a href="#3-水果叠叠乐" class="headerlink" title="3.水果叠叠乐"></a>3.水果叠叠乐</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;#box li&quot;</span>).<span class="hljs-property">length</span> == <span class="hljs-number">7</span>) <span class="hljs-keyword">return</span><br>$(<span class="hljs-string">&quot;#box&quot;</span>).<span class="hljs-title function_">append</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">clone</span>())<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">hide</span>()<br><span class="hljs-keyword">if</span>($(<span class="hljs-string">`#box li[data-id=<span class="hljs-subst">$&#123;$(<span class="hljs-variable language_">this</span>).attr(<span class="hljs-string">&#x27;data-id&#x27;</span>)&#125;</span>]`</span>).<span class="hljs-property">length</span> == <span class="hljs-number">3</span>)&#123;<br>    $(<span class="hljs-string">`#box li[data-id=<span class="hljs-subst">$&#123;$(<span class="hljs-variable language_">this</span>).attr(<span class="hljs-string">&#x27;data-id&#x27;</span>)&#125;</span>]`</span>).<span class="hljs-title function_">remove</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模拟赛2"><a href="#模拟赛2" class="headerlink" title="模拟赛2"></a>模拟赛2</h2><h3 id="3-芝麻开门"><a href="#3-芝麻开门" class="headerlink" title="3.芝麻开门"></a>3.芝麻开门</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> incantations = <span class="hljs-string">&quot;芝麻开门&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.wrapper .btn&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">mPrompt</span>()<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res === incantations) &#123;<br>          <span class="hljs-variable language_">document</span><br>            .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;#door .doors&quot;</span>)[<span class="hljs-number">0</span>]<br>            .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;door-left&quot;</span>);<br>          <span class="hljs-variable language_">document</span><br>            .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;#door .doors&quot;</span>)[<span class="hljs-number">1</span>]<br>            .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;door-right&quot;</span>);<br>        &#125;<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 调用函数，开启弹窗，记录输入框的内容，并通过 promise 异步返回输入框中的内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Promise</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mPrompt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 弹窗必须使用以下结构 template 保存的是弹窗的结构字符串，可以先转化为 DOM 再通过 appendChild 方式插入到 body 中</span><br>  <span class="hljs-keyword">const</span> template = <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div class=&quot;modal&quot;&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;message-box&quot;&gt;</span><br><span class="hljs-string">                &lt;div class=&quot;message-header&quot;&gt;请输入咒语&lt;/div&gt;</span><br><span class="hljs-string">                &lt;div class=&quot;message-body&quot;&gt;</span><br><span class="hljs-string">                    &lt;input type=&quot;text&quot;&gt;</span><br><span class="hljs-string">                &lt;/div&gt;</span><br><span class="hljs-string">                &lt;div class=&quot;message-footer&quot;&gt;</span><br><span class="hljs-string">                    &lt;button class=&quot;btn btn-small&quot; id=&#x27;cancel&#x27;&gt;取消&lt;/button&gt;</span><br><span class="hljs-string">                    &lt;button class=&quot;btn btn-small btn-primary&quot; id=&#x27;confirm&#x27;&gt;确定&lt;/button&gt;</span><br><span class="hljs-string">                &lt;/div&gt;</span><br><span class="hljs-string">            &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    `</span>;<br>  <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>  <span class="hljs-comment">// TODO：待补充代码</span><br>  div.<span class="hljs-property">innerHTML</span> = template;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">appendChild</span>(div);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">res, rej</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#confirm&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.message-body input&quot;</span>).<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">res</span>(input);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.modal&quot;</span>).<span class="hljs-title function_">remove</span>();<br>    &#125;)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#cancel&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">rej</span>(<span class="hljs-literal">false</span>);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.modal&quot;</span>).<span class="hljs-title function_">remove</span>();<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-宝贵的一票"><a href="#4-宝贵的一票" class="headerlink" title="4.宝贵的一票"></a>4.宝贵的一票</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>宝贵的一票<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/bootstrap.min.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/style.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner-container shadow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3 row&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>投票主题<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;addtxt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/plus-square.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;加号图标&quot;</span> /&gt;</span><br>        添加选项<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check checkbox-one&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;flexCheckDefault&quot;</span>&gt;</span><br>        支持多选<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;flexCheckDefault&quot;</span>&gt;</span><br>        公开投票结果<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row bottom&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;historytxt&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;</span>历史投票<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>发起投票<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title function_">initRender</span> = (<span class="hljs-params">txt</span>) =&gt; &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;mb-3 row&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;label class=&quot;col-sm-2 col-form-label txt&quot;&gt;<span class="hljs-subst">$&#123;txt&#125;</span>&lt;/label&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;div class=&quot;col-sm-9&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">               &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;`</span>;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    $(</span><br><span class="language-javascript">      (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 初始化的时候渲染两条数据，且不带删除符号</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">2</span>; index++) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> initList = <span class="hljs-title function_">initRender</span>(<span class="hljs-string">`选项<span class="hljs-subst">$&#123;index + <span class="hljs-number">1</span>&#125;</span>`</span>);</span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">append</span>(initList);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击加号逻辑</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击加号逻辑</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.add&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// TODO 待补充代码</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> length = $(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-property">length</span> + <span class="hljs-number">1</span></span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> initList = <span class="hljs-title function_">initRender</span>(<span class="hljs-string">`选项<span class="hljs-subst">$&#123;length&#125;</span>`</span>);</span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">append</span>(initList);</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">i, item</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">const</span> text = <span class="hljs-string">`&lt;div class=&quot;col-sm-1&quot;&gt;&lt;img class=&quot;del-icon&quot; src=&quot;./images/x.svg&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;`</span></span><br><span class="language-javascript">              <span class="hljs-keyword">const</span> flag = $(item).<span class="hljs-title function_">html</span>().<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;&lt;div class=&quot;col-sm-1&quot;&gt;&#x27;</span>)</span><br><span class="language-javascript">              <span class="hljs-keyword">if</span> (!flag)</span><br><span class="language-javascript">                $(item).<span class="hljs-title function_">append</span>(text)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击 x 删除逻辑，列表小于 2 项时不显示删除图标</span></span><br><span class="language-javascript">        $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;.del-icon&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// TODO 待补充代码</span></span><br><span class="language-javascript">          $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;div.mb-3.row&#x27;</span>).<span class="hljs-title function_">remove</span>()</span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">i, item</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> label = $(item).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;label&#x27;</span>)</span><br><span class="language-javascript">            label.<span class="hljs-title function_">html</span>(<span class="hljs-string">`选项<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>`</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&quot;.list&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-property">length</span> &lt;= <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">const</span> delDOM = $(item).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;div.col-sm-1&#x27;</span>)</span><br><span class="language-javascript">              delDOM.<span class="hljs-title function_">remove</span>()</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;)()</span><br><span class="language-javascript">    );</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-粒粒皆辛苦"><a href="#5-粒粒皆辛苦" class="headerlink" title="5.粒粒皆辛苦"></a>5.粒粒皆辛苦</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>粒粒皆辛苦<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; margin: 0; overflow: hidden&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 80%; width: 80%; margin: 5% auto&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> option;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(dom, <span class="hljs-literal">null</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">renderer</span>: <span class="hljs-string">&quot;canvas&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">useDirtyRect</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title function_">initCharts</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">      option = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;近五年 x 市粮食总产量分布以及 2022 年粮食产量比例&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;单位（万吨）&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">dataset</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">//source -&gt; 图表显示所需的数据格式（饼形图和折线图共用），请勿手动修改此行</span></span><br><span class="language-javascript">          <span class="hljs-attr">source</span>: [</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;全部&quot;</span>, <span class="hljs-string">&quot;2017&quot;</span>, <span class="hljs-string">&quot;2018&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>, <span class="hljs-string">&quot;2020&quot;</span>, <span class="hljs-string">&quot;2021&quot;</span>, <span class="hljs-string">&quot;2022&quot;</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;小麦&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;大豆&quot;</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;马铃薯&quot;</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;玉米&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>],</span><br><span class="language-javascript">          ],</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">xAxis</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span> &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">yAxis</span>: &#123; <span class="hljs-attr">gridIndex</span>: <span class="hljs-number">0</span> &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">grid</span>: &#123; <span class="hljs-attr">top</span>: <span class="hljs-string">&quot;55%&quot;</span> &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">seriesLayoutBy</span>: <span class="hljs-string">&quot;row&quot;</span>,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">seriesLayoutBy</span>: <span class="hljs-string">&quot;row&quot;</span>,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">seriesLayoutBy</span>: <span class="hljs-string">&quot;row&quot;</span>,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">seriesLayoutBy</span>: <span class="hljs-string">&quot;row&quot;</span>,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;pie&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;pie&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">radius</span>: <span class="hljs-string">&quot;30%&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">center</span>: [<span class="hljs-string">&quot;50%&quot;</span>, <span class="hljs-string">&quot;25%&quot;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">label</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 2022 数据的百分比</span></span><br><span class="language-javascript">              <span class="hljs-attr">formatter</span>: <span class="hljs-string">&quot;&#123;b&#125; &#123;@2022&#125; (&#123;d&#125;%)&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">encode</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">itemName</span>: <span class="hljs-string">&quot;全部&quot;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;2022&quot;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">tooltip</span>: <span class="hljs-string">&quot;2022&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-comment">// if (option &amp;&amp; typeof option === &quot;object&quot;) &#123;</span></span><br><span class="language-javascript">      <span class="hljs-comment">//   // myChart.setOption -&gt; 设置 echarts 数据的方法</span></span><br><span class="language-javascript">      <span class="hljs-comment">//   myChart.setOption(option);</span></span><br><span class="language-javascript">      <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, myChart.<span class="hljs-property">resize</span>);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title function_">initCharts</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>)</span><br><span class="language-javascript">      data = data.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> hash = &#123; <span class="hljs-string">&#x27;小麦&#x27;</span>: <span class="hljs-string">&#x27;wheat&#x27;</span>, <span class="hljs-string">&#x27;大豆&#x27;</span>: <span class="hljs-string">&#x27;soybean&#x27;</span>, <span class="hljs-string">&#x27;马铃薯&#x27;</span>: <span class="hljs-string">&#x27;potato&#x27;</span>, <span class="hljs-string">&#x27;玉米&#x27;</span>: <span class="hljs-string">&#x27;corn&#x27;</span> &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> target = option.<span class="hljs-property">dataset</span>.<span class="hljs-property">source</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;</span><br><span class="language-javascript">          target[j][i] = data[target[<span class="hljs-number">0</span>][i]][hash[target[j][<span class="hljs-number">0</span>]]];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      myChart.<span class="hljs-title function_">setOption</span>(option); <span class="hljs-comment">//注意！！！！！</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">getData</span>();</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-绝美宋词"><a href="#7-绝美宋词" class="headerlink" title="7.绝美宋词"></a>7.绝美宋词</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>绝美宋词<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>输入关键字，找一首词<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- TODO：待补充代码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-form&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;词牌名 词句 词人&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyword&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;suggestions&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in dataList&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poet&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;highlight(item.poetry_content)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;highlight(item.title)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            -<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;highlight(item.author)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// TODO：待补充代码</span></span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">keyword</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;./data.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">dataList</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">keyword</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span></span><br><span class="language-javascript">            e.<span class="hljs-property">poetry_content</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyword</span>) ||</span><br><span class="language-javascript">            e.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyword</span>) ||</span><br><span class="language-javascript">            e.<span class="hljs-property">author</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyword</span>)</span><br><span class="language-javascript">          ) : []</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">highlight</span>(<span class="hljs-params">v</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> v.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyword</span>, <span class="hljs-string">`&lt;span class=&quot;highlight&quot;&gt;$&amp;&lt;/span&gt;`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="模拟赛3"><a href="#模拟赛3" class="headerlink" title="模拟赛3"></a>模拟赛3</h2><h3 id="4-蓝桥校园卡"><a href="#4-蓝桥校园卡" class="headerlink" title="4. 蓝桥校园卡"></a>4. 蓝桥校园卡</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 获取DOM元素对象</span><br>    <span class="hljs-keyword">const</span> studentName = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;studentName&quot;</span>); <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">const</span> studentId = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;studentId&quot;</span>);  <span class="hljs-comment">// 学号</span><br>    <span class="hljs-keyword">const</span> college = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;college&quot;</span>); <span class="hljs-comment">// 学院</span><br>    <span class="hljs-keyword">const</span> submit = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;submit&quot;</span>);  <span class="hljs-comment">// 制卡按钮</span><br>    <span class="hljs-keyword">const</span> cardStyle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cardStyle&quot;</span>); <span class="hljs-comment">// 卡片</span><br>    <span class="hljs-keyword">const</span> item = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.item&quot;</span>) <span class="hljs-comment">// 卡片项</span><br><br>    <span class="hljs-keyword">let</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.form-group&quot;</span>);<br>    <span class="hljs-keyword">let</span> span1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vail_name&quot;</span>);<br>    <span class="hljs-keyword">let</span> span2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vail_studentId&quot;</span>);<br>    submit.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> a = <span class="hljs-regexp">/[\u4e00-\u9fa5]&#123;2,4&#125;/</span>.<span class="hljs-title function_">test</span>(studentName.<span class="hljs-property">value</span>);<br>        <span class="hljs-keyword">if</span> (!a) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.form-group&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;has-error&#x27;</span>);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#vail_name&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> b = <span class="hljs-regexp">/^\d&#123;1,12&#125;$/</span>.<span class="hljs-title function_">test</span>(studentId.<span class="hljs-property">value</span>);<br>        <span class="hljs-keyword">if</span> (!b) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.form-group&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;has-error&#x27;</span>);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#vail_studentId&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a &amp;&amp; b) &#123;<br>            item[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = studentName.<span class="hljs-property">value</span>;<br>            item[<span class="hljs-number">1</span>].<span class="hljs-property">innerHTML</span> = studentId.<span class="hljs-property">value</span>;<br>            item[<span class="hljs-number">2</span>].<span class="hljs-property">innerHTML</span> = college.<span class="hljs-property">value</span>;<br>            cardStyle.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;showCard&#x27;</span>);<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5-会员权益领取"><a href="#5-会员权益领取" class="headerlink" title="5.会员权益领取"></a>5.会员权益领取</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>会员权益领取中心<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>小蓝同学<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;during&quot;</span>&gt;</span>已加入蓝桥云课 300 天<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;member&quot;</span>&gt;</span>已加入蓝桥云课 300 天<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;vip&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>会员权益升级<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/left.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/right.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;quanyi&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>会员专属特权<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/gaojivip.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>高级会员<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/vip.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>标准会员<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1558px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1440px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/top_banner.png</span>);<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1440px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">240px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.card</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, <span class="hljs-number">#191720</span> <span class="hljs-number">0%</span>, <span class="hljs-number">#080810</span> <span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">290px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">176px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1000px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">32px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.name</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: PingFangSC-Regular;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">62px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1094px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.during</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: PingFangSC-Regular;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">95px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1093px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">174px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.member</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: PingFangSC-Regular;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#C6C6C6</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1093px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">121px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">154px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.pic</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/touxiang.png</span>);<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1024px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">73px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.vip</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/vip.png</span>);<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1055px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">104px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">19px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">19px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1440px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1318px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FCFDFF</span>;<br>&#125;<br><br><span class="hljs-selector-class">.title</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: PingFangSC-Medium;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#232A33</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">630px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">525px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">307.72px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">89px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">15.56px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">826px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">307px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">89.63px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">15.56px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.quanyi</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">229</span>, <span class="hljs-number">235</span>, <span class="hljs-number">241</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">370px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">760px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">704px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.quanyi</span> <span class="hljs-selector-tag">tr</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">760px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">64px</span>;<br>    <span class="hljs-attribute">vertical-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.quanyi</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#F7F8FA</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-tag">tr</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.quanyi</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-tag">td</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: PingFangSC-Medium;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.quanyi</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">64px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">vertical-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-心愿便利贴"><a href="#6-心愿便利贴" class="headerlink" title="6.心愿便利贴"></a>6.心愿便利贴</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>心愿便利贴<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入element-ui样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/wish.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入element-ui组件库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>心愿便利贴<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- TODO 待修改的代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;item.css&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in wishList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;closeCard(index)&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/ding.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-image</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.pic&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.pic&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">:preview-src-list</span>=<span class="hljs-string">&quot;picList&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>&#123;&#123;item.content&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;firstName&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入姓名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;许愿内容&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.content&quot;</span> <span class="hljs-attr">show-word-limit</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图片上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;uploadRef&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">:limit</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">list-type</span>=<span class="hljs-string">&quot;picture-card&quot;</span> <span class="hljs-attr">:on-remove</span>=<span class="hljs-string">&quot;handleRemove&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">:on-change</span>=<span class="hljs-string">&quot;getPic&quot;</span> <span class="hljs-attr">:auto-upload</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123;file&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload-list__item-thumbnail&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;file.url&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload-list__item-actions&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload-list__item-preview&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handlePictureCardPreview(file)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-zoom-in&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!disabled&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload-list__item-delete&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleRemove(file)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-delete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;onSubmit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onRest&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogVisible&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;form.pic&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">wishList</span>: [],</span><br><span class="language-javascript"><span class="hljs-attr">form</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">pic</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">rules</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// TODO 待补充验证的代码</span></span><br><span class="language-javascript"><span class="hljs-attr">name</span>: [</span><br><span class="language-javascript">&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入姓名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">min</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;长度在 2 到 4 个字符&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;</span><br><span class="language-javascript">],</span><br><span class="language-javascript"><span class="hljs-attr">content</span>: [</span><br><span class="language-javascript">&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入许愿内容&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;长度在 1 到 30 个字符&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript"><span class="hljs-attr">picList</span>: [],</span><br><span class="language-javascript"><span class="hljs-attr">textarea</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">dialogVisible</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript"><span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 提交方法</span></span><br><span class="language-javascript"><span class="hljs-title function_">onSubmit</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;form&#x27;</span>].<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (valid) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>;</span><br><span class="language-javascript">obj.<span class="hljs-property">css</span> = <span class="hljs-string">&#x27;item&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> &gt; <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">wishList</span>.<span class="hljs-title function_">push</span>(obj)</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span> = &#123;&#125;;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">uploadRef</span>.<span class="hljs-property">uploadFiles</span>.<span class="hljs-title function_">pop</span>()</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wishList</span>);</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$message(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;提交错误！请检查输入内容&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 关闭许愿卡</span></span><br><span class="language-javascript"><span class="hljs-title function_">closeCard</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">wishList</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 重置表单</span></span><br><span class="language-javascript"><span class="hljs-title function_">onRest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;form&#x27;</span>].<span class="hljs-title function_">resetFields</span>();</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 图片删除</span></span><br><span class="language-javascript"><span class="hljs-title function_">handleRemove</span>(<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">uploadRef</span>.<span class="hljs-property">uploadFiles</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e.<span class="hljs-property">uid</span> === file.<span class="hljs-property">uid</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">uploadRef</span>.<span class="hljs-property">uploadFiles</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 模拟上传图片</span></span><br><span class="language-javascript"><span class="hljs-title function_">getPic</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">pic</span> = e.<span class="hljs-property">url</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">picList</span>.<span class="hljs-title function_">push</span>(e.<span class="hljs-property">url</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 预览图片</span></span><br><span class="language-javascript"><span class="hljs-title function_">handlePictureCardPreview</span>(<span class="hljs-params">file, fileList</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">pic</span> = file.<span class="hljs-property">url</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogVisible</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-布局切换"><a href="#7-布局切换" class="headerlink" title="7.布局切换"></a>7.布局切换</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">v-cloak</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- TODO：请在下面实现需求 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid-icon active&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-icon&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--grid 示例代码，动态渲染时可删除--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in goodsList&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/3814&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">item.image.large</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!flag&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in goodsList&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/3814&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">item.image.small</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">goodsList</span>: &#123;,</span><br><span class="language-javascript">            <span class="hljs-attr">flag</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// TODO：补全代码实现需求</span></span><br><span class="language-javascript">            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;goodsList.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">goodsList</span> = val.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">grid</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> all = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.bar&gt;a&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> c = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.grid-icon&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; all.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    all[i].<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                c.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">list</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> all = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.bar&gt;a&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> b = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.list-icon&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; all.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    all[i].<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                b.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-购物车"><a href="#8-购物车" class="headerlink" title="8.购物车"></a>8.购物车</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 商品列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>商品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;goodsList&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;goods in goodsList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-item&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;goods.id&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;goods.imgUrl&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;goods.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>¥ &#123;&#123;goods.price&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addToCart(goods)&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 购物车 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;cartList.length&gt;0&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cartList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;goods in cartList&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-item&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;goods.id&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;goods.imgUrl&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;goods.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>¥ &#123;&#123;goods.price&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-control&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeGoods(goods)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;&#123;goods.num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addToCart(goods)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">cartList</span>: [],</span><br><span class="language-javascript">      <span class="hljs-attr">goodsList</span>: []</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">goodsList</span> = <span class="hljs-title class_">GoodsArr</span>;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">addToCart</span>(<span class="hljs-params">goods</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// TODO：修改当前函数，实现购物车加入商品需求</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(&quot;goods&quot;,goods);</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === goods.<span class="hljs-property">id</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 特殊情况，有两个地方会调用此方法，传进来的goods不同</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 在&#x27;商品列表&#x27;中点击，也会触发这个方法</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 但商品列表中的goods来自goodsList</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 永远是一个初始值</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 建议把这个goods当做一个用来查找的标签，主体还得是this.cartList</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 但下面的减就不一样，因为传进来的一定是this.cartList</span></span><br><span class="language-javascript">            goods.<span class="hljs-property">num</span> += <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            item.<span class="hljs-property">num</span> += <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goods, item);</span><br><span class="language-javascript">            flag = !flag;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">          goods.<span class="hljs-property">num</span> = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span>.<span class="hljs-title function_">push</span>(goods);</span><br><span class="language-javascript">          <span class="hljs-comment">//深拷贝</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span>));</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(this.cartList);</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">removeGoods</span>(<span class="hljs-params">goods</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// TODO：补全代码实现需求</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (goods.<span class="hljs-property">num</span> === <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cartList</span>.<span class="hljs-title function_">indexOf</span>(goods), <span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          goods.<span class="hljs-property">num</span>--;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-趣购"><a href="#9-趣购" class="headerlink" title="9.趣购"></a>9.趣购</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- TODO: 补充拖拽事件，请不要改动任何 id 属性 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;good-list&quot;&gt;<br>      &lt;div<br>        v-for=&quot;good in goods&quot;<br>        draggable=&quot;true&quot;<br>        @dragstart=&quot;drag($event, good)&quot;<br>        :key=&quot;good.name&quot;<br>        class=&quot;good&quot;<br>      &gt;<br>        &lt;img :src=&quot;good.cover&quot; draggable=&quot;false&quot; /&gt;<br>        &lt;span&gt;&#123;&#123; good.name &#125;&#125;&lt;/span&gt;<br>        &lt;span&gt;￥&#123;&#123; good.price &#125;&#125;&lt;/span&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;!--默认会传一个event过来, 函数有参数就要手动传, 不然event不会传过来--&gt;<br>    &lt;div<br>      id=&quot;trolley&quot;<br>      class=&quot;trolley&quot;<br>      @drop=&quot;drop($event)&quot;<br>      @dragover=&quot;stop($event)&quot;<br>    &gt;<br>      &lt;span id=&quot;bought&quot; class=&quot;bought&quot; v-if=&quot;bought.length !== 0&quot;&gt;&#123;&#123;<br>        len<br>      &#125;&#125;&lt;/span&gt;<br>      &lt;img src=&quot;./images/trolley.jpeg&quot; /&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;result&quot;&gt;<br>      &lt;div&gt;<br>        购物车商品：&lt;span id=&quot;goods&quot;&gt;&#123;&#123; goodsDetail &#125;&#125;&lt;/span&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        购物车商品总计：&lt;span id=&quot;total&quot;&gt;&#123;&#123; totalPrice &#125;&#125;&lt;/span&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>.container &#123;<br>  width: 650px;<br>  position: relative;<br>  height: 600px;<br>  margin: 10px auto;<br>  display: flex;<br>  flex-direction: column;<br>&#125;<br>.good-list &#123;<br>  width: 100%;<br>  display: flex;<br>  flex-wrap: wrap;<br>  justify-content: space-between;<br>  flex-grow: 1;<br>&#125;<br>.good &#123;<br>  width: 150px;<br>  height: 160px;<br>  border: 1px solid rgb(52, 52, 52);<br>  border-radius: 5px;<br>  padding: 5px;<br>&#125;<br>.good:hover &#123;<br>  border: 2px solid rgb(52, 52, 52);<br>&#125;<br><br>.good img &#123;<br>  width: 100%;<br>  height: 120px;<br>&#125;<br>.trolley &#123;<br>  position: absolute;<br>  height: 60px;<br>  width: 60px;<br>  border-radius: 50%;<br>  overflow: hidden;<br>  border: 1px solid #f4f4f4;<br>  background-color: #f4f4f4;<br>  display: flex;<br>  align-items: center;<br>  justify-content: center;<br>  right: 0;<br>  bottom: 100px;<br>&#125;<br><br>.trolley img &#123;<br>  width: 40px;<br>  height: 40px;<br>  pointer-events: none;<br>&#125;<br><br>.bought &#123;<br>  width: 16px;<br>  height: 16px;<br>  background-color: crimson;<br>  color: white;<br>  position: absolute;<br>  right: 8px;<br>  top: 10px;<br>  border-radius: 50%;<br>  text-align: center;<br>  line-height: 15px;<br>  pointer-events: none;<br>&#125;<br>.result &#123;<br>  width: 100%;<br>  min-height: 80px;<br>  border: 1px solid;<br>  margin-top: 20px;<br>  padding: 10px;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;script&gt;<br>module.exports = &#123;<br>  data() &#123;<br>    return &#123;<br>      goods: [<br>        &#123;<br>          name: &quot;畅销书&quot;,<br>          price: 30,<br>          cover: &quot;./images/book.jpeg&quot;,<br>        &#125;,<br>        &#123;<br>          name: &quot;收纳箱&quot;,<br>          price: 60,<br>          cover: &quot;./images/box.jpeg&quot;,<br>        &#125;,<br>        &#123;<br>          name: &quot;纸巾&quot;,<br>          price: 20,<br>          cover: &quot;./images/paper.jpeg&quot;,<br>        &#125;,<br>        &#123;<br>          name: &quot;电视&quot;,<br>          price: 1000,<br>          cover: &quot;./images/tv.jpg&quot;,<br>        &#125;,<br>      ],<br>      bought: [],<br>      len: 0,<br>      details: &quot;&quot;,<br>      price: 0,<br>    &#125;;<br>  &#125;,<br>  // TODO: 请补充实现代码<br>  computed: &#123;<br>    totalPrice() &#123;<br>      return this.price;<br>    &#125;,<br>    goodsDetail() &#123;<br>      return this.details;<br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br>    drag(e, parm) &#123;<br>      e.dataTransfer.setData(&quot;name&quot;, parm.name);<br>      e.dataTransfer.setData(&quot;price&quot;, parm.price);<br>    &#125;,<br>    stop(e) &#123;<br>      e.stopPropagation();<br>      e.preventDefault();<br>    &#125;,<br>    drop(e) &#123;<br>      let name = e.dataTransfer.getData(&quot;name&quot;);<br>      let price = e.dataTransfer.getData(&quot;price&quot;);<br>      this.add(name, price);<br>    &#125;,<br>    add(name, price) &#123;<br>      let isHave = false;<br>      this.bought.forEach((element) =&gt; &#123;<br>        if (element.name == name) &#123;<br>          isHave = true;<br>          element.num++;<br>        &#125;<br>      &#125;);<br>      if (!isHave) &#123;<br>        this.bought.push(&#123; name, price, num: 1 &#125;);<br>      &#125;<br>      this.len = 0;<br>      this.price = 0;<br>      this.details = &quot;&quot;;<br>      this.bought.map((e) =&gt; &#123;<br>        this.len += e.num;<br>        this.price += e.price * e.num;<br>        this.details += e.name + &quot;*&quot; + e.num + &quot; &quot;;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="10-分页组件"><a href="#10-分页组件" class="headerlink" title="10.分页组件"></a>10.分页组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> ajax 请求，通过传递的 currentPage, pageSize 获取到当前页和总页数的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; url 请求地址，必填</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; method 请求方式，可选参数，默认为 get</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; data 请求体数据，可选参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; currentPage 当前页数，必填</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; pageSize 每页显示条目个数，必填</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">object</span>&#125; &#123;<span class="hljs-type">data,total</span>&#125; data为data.json中data数组的部分数据，total为data.json中total的值</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;get&quot;</span>, data, query: &#123; currentPage, pageSize &#125; &#125;</span>) &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>根据函数参数 `query` 对象  `currentPage, pageSize` 获得当前页的数据</span><br>    <span class="hljs-keyword">let</span> result = &#123;<br>        <span class="hljs-attr">data</span>: [],<br>        <span class="hljs-attr">total</span>: <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> tmp = <span class="hljs-keyword">await</span> axios[method](url, data);<br>    tmp = tmp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;<br>    result.<span class="hljs-property">total</span> = tmp.<span class="hljs-property">length</span>;<br>    result.<span class="hljs-property">data</span> = tmp.<span class="hljs-title function_">splice</span>((currentPage - <span class="hljs-number">1</span>) * pageSize, pageSize);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pagination</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Element</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; pageSize 每页显示条目个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; total 总条目数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; pagerCount 设置最大页码按钮数。 页码按钮的数量，当总页数超过该值时会折叠</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; currentPage 当前页数,默认为第一页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; currentChange current-page 改变时触发</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">root, &#123; pageSize, total, pagerCount, currentPage &#125;, &#123; currentChange &#125;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (pagerCount % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            pagerCount--;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = root;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pageSize</span> = pageSize || <span class="hljs-number">10</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> = total;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagerCount</span> = pagerCount || <span class="hljs-number">7</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> = currentPage || <span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentChange</span> = currentChange;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">totalPages</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(total / pageSize);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initPagination</span>();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 初始化分页组件，首次创建和 this.currentPage 改变时调用</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-title function_">initPagination</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> indexArr = <span class="hljs-title function_">createPaginationIndexArr</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">totalPages</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagerCount</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#index-arr&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(indexArr);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">renderPagination</span>(indexArr);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initEvents</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">currentChange</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 根据序号数组生成分页组件的字符串模板通过 innerHTML 挂载在 root 元素内</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Array</span>&#125; indexArr 分页数组 indexArr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">String</span>&#125; 分页组件的字符串模板</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title function_">renderPagination</span>(<span class="hljs-params">indexArr</span>) &#123;<br>        <span class="hljs-keyword">let</span> template = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-comment">// TODO：根据 indexArr 数组生成分页组件的字符串模板 template</span><br><br>        <span class="hljs-keyword">let</span> n = indexArr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item == <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> ? <span class="hljs-string">`&lt;li class=&quot;number active&quot;&gt;<span class="hljs-subst">$&#123;item&#125;</span>&lt;/li&gt;`</span> : <span class="hljs-string">`&lt;li class=&quot;number&quot;&gt;<span class="hljs-subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>)<br>        <span class="hljs-keyword">if</span> (indexArr[<span class="hljs-number">1</span>] != <span class="hljs-number">2</span>) n.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">`&lt;li class=&quot;number more&quot;&gt;...&lt;/li&gt;`</span>)<br>        <span class="hljs-keyword">if</span> (indexArr[indexArr.<span class="hljs-property">length</span> - <span class="hljs-number">2</span>] + <span class="hljs-number">1</span> != <span class="hljs-variable language_">this</span>.<span class="hljs-property">totalPages</span>) n.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">`&lt;li class=&quot;number more&quot;&gt;...&lt;/li&gt;`</span>)<br>        template = n.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div class=&quot;pagination&quot;&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;btn btn-left&quot; id=&quot;btn-prev&quot;&gt;&amp;lt;&lt;/div&gt;</span><br><span class="hljs-string">            &lt;ul class=&quot;pager&quot;&gt;<span class="hljs-subst">$&#123;template&#125;</span> &lt;/ul&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;btn btn-right&quot; id=&quot;btn-next&quot;&gt;&amp;gt;&lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span>;<br>    &#125;<br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 事件绑定，改变 this.currentPage 的值,值在 1 到 this.totalPages 之间</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-title function_">initEvents</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#btn-prev&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>--;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initPagination</span>();<br>            &#125;<br>        &#125;)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#btn-next&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">totalPages</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>++;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initPagination</span>();<br>            &#125;<br>        &#125;)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.pager&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;li&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> === e.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>) <span class="hljs-keyword">return</span>;<br>                <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;more&#x27;</span>)) <span class="hljs-keyword">return</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> = <span class="hljs-title class_">Number</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>)<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initPagination</span>();<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> paginationConfigObj = &#123; <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">total</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">pagerCount</span>: <span class="hljs-number">5</span> &#125;;<br><span class="hljs-keyword">const</span> root = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.pagination-container&quot;</span>);<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderContent</span>(<span class="hljs-params">currentPage</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#current-page&quot;</span>).<span class="hljs-property">innerText</span> = currentPage;<br>    <span class="hljs-keyword">const</span> &#123; data, total &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">ajax</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./js/data.json&quot;</span>, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-attr">query</span>: &#123; currentPage, ...paginationConfigObj &#125; &#125;);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#ajax-data&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#ajax-total&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(total);<br>    <span class="hljs-keyword">const</span> contentEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.content&#x27;</span>);<br>    <span class="hljs-keyword">let</span> template = data.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span><br>        prev + <span class="hljs-string">`                </span><br><span class="hljs-string">        &lt;li class=&quot;item&quot; data-index=&quot;<span class="hljs-subst">$&#123;cur.id&#125;</span>&quot;&gt;</span><br><span class="hljs-string">            &lt;h4 class=&quot;title&quot;&gt;<span class="hljs-subst">$&#123;cur.title&#125;</span>&lt;/h4&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;item-right&quot;&gt;</span><br><span class="hljs-string">                评论数：&lt;span class=&quot;replay-count&quot;&gt;<span class="hljs-subst">$&#123;cur.replayCount&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">                /</span><br><span class="hljs-string">                点击数：&lt;span class=&quot;click-count&quot;&gt;<span class="hljs-subst">$&#123;cur.clickCount&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">            &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/li&gt;`</span><br>        , <span class="hljs-string">&quot;&quot;</span>);<br>    contentEle.<span class="hljs-property">innerHTML</span> = template;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Pagination</span>(root, paginationConfigObj, &#123; <span class="hljs-attr">currentChange</span>: renderContent &#125;);<br></code></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><h4 id="网页-PPT"><a href="#网页-PPT" class="headerlink" title="网页 PPT"></a>网页 PPT</h4><ul><li><p>考察: JQuery （选择器，显示隐藏等常用 API）</p></li><li><p>答案：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 缓存 $(&quot;section&quot;) 的 jQuery 选择器，以提高性能</span><br><span class="hljs-keyword">let</span> $sections = $(<span class="hljs-string">&quot;section&quot;</span>);<br><br><span class="hljs-comment">// 隐藏所有 section 元素，显示 activeIndex 对应的元素</span><br>$sections.<span class="hljs-title function_">hide</span>();<br>$sections.<span class="hljs-title function_">eq</span>(activeIndex).<span class="hljs-title function_">show</span>();<br><br><span class="hljs-comment">// 记录 section 元素的个数</span><br><span class="hljs-keyword">let</span> len = $sections.<span class="hljs-property">length</span>;<br><br><span class="hljs-comment">// 如果 activeIndex 是 0，给左侧按钮添加 disable 类，否则删除</span><br>$(<span class="hljs-string">&quot;.left&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;disable&quot;</span>, activeIndex === <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 如果 activeIndex 是 len-1，给右侧按钮添加 disable 类，否则删除</span><br>$(<span class="hljs-string">&quot;.right&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;disable&quot;</span>, activeIndex === len - <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 显示当前页数和总页数，使用字符串插值来构造 HTML 内容</span><br>$(<span class="hljs-string">&quot;.page&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;activeIndex + <span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">$&#123;len&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><ul><li>知识点解析：</li></ul><p>.<code>toggleClass()</code> 是 jQuery 提供的一个方法，它用于在元素上切换一个或多个类名。这个方法有两个参数：</p><p><code>className</code>：表示要切换的类名。可以是一个或多个类名，用空格分隔。当该类名存在时，它将被删除；否则它将被添加。</p><p><code>state</code>：表示一个布尔值，用于决定是添加还是删除指定的类名。如果这个值为 true，类名将被添加；如果是 false，类名将被删除。如果这个参数被省略，那么类名将被添加或删除，取决于它是否存在。</p><p>在 <code>$(&quot;.left&quot;).toggleClass(&quot;disable&quot;, activeIndex === 0)</code> 这一行中，第一个参数是 <code>disable</code> 类名，它将被添加或删除。第二个参数是一个表达式 <code>activeIndex === 0</code>，当它的值为 <code>true</code> 时，类名将被添加，否则将被删除。因此，这行代码的作用是：</p><p>如果 <code>activeIndex</code> 等于 0，给 <code>.left</code> 元素添加 <code>disable</code> 类。<br>如果 <code>activeIndex</code> 不等于 0，删除 <code>.left</code> 元素上的 <code>disable</code> 类。<br>这个方法非常方便，可以用于快速地在元素上添加或删除类名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// $(&quot;.left&quot;).toggleClass(&quot;disable&quot;, activeIndex === 0)`等价于</span><br><span class="hljs-keyword">if</span> (activeIndex == <span class="hljs-number">0</span>) &#123;<br>  $(<span class="hljs-string">&quot;.left&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;disable&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  $(<span class="hljs-string">&quot;.left&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;disable&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="西游记之西天取经"><a href="#西游记之西天取经" class="headerlink" title="西游记之西天取经"></a>西游记之西天取经</h4><ul><li><p>考察点 ：CSS3  常用属性</p></li><li><p>答案：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.actor</span><span class="hljs-selector-pseudo">:nth-child</span>(x) &#123;</span><br><span class="language-css">    <span class="hljs-comment">/* ...省略代码  */</span></span><br><span class="language-css">    <span class="hljs-comment">/* TODO 填空 */</span></span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: a2 <span class="hljs-number">0.8s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>) infinite;</span><br><span class="language-css">&#125;</span><br><span class="language-css">&lt;style&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>知识点解析       这是一个 CSS3 动画属性 <code>animation</code> 的值，它包含以下几个部分：</p><ul><li><p><code>a2</code>：表示要应用的动画名称，这个名称需要通过 @keyframes 规则来定义。</p></li><li><p><code>0.8s</code>：表示动画持续的时间，即 0.8 秒。</p></li><li><p><code>steps(8)</code>：表示动画执行的步数，这里使用 <code>steps</code> 函数来指定。<code>steps(8)</code> 表示动画会分为 8步进行，每一步持续相同的时间。</p></li><li><p><code>infinite</code>：表示动画将无限循环，直到被停止</p></li></ul></li><li><p>拓展学习：  step()、steps()</p></li></ul><h4 id="商品销量和销售额实时展示看板"><a href="#商品销量和销售额实时展示看板" class="headerlink" title="商品销量和销售额实时展示看板"></a>商品销量和销售额实时展示看板</h4><ul><li>考察 echarts （数据修改，正式比赛：常用 API -&gt; 提供）</li></ul><p>答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = result.<span class="hljs-property">data</span>;<br><span class="hljs-comment">// 销售额</span><br><span class="hljs-keyword">if</span> (data?.<span class="hljs-property">saleObj</span>) &#123;<br>  <span class="hljs-keyword">let</span> [x, y] = [<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data.<span class="hljs-property">saleObj</span>), <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(data.<span class="hljs-property">saleObj</span>)];<br>  charData.<span class="hljs-property">xAxis</span>.<span class="hljs-property">data</span> = x;<br>  charData.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = y;<br>&#125;<br><span class="hljs-comment">// 销量</span><br><span class="hljs-keyword">if</span> (data?.<span class="hljs-property">countObj</span>) &#123;<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(data.<span class="hljs-property">countObj</span>);<br>  charData.<span class="hljs-property">series</span>[<span class="hljs-number">1</span>].<span class="hljs-property">data</span> = y;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>知识点解析</li></ul><p><code>data?.saleObj</code> 是 ECMAScript 2020 引入的一种可选链语法。</p><p>它允许您访问对象的属性，而不会在对象为 nullish（<code>null</code> 或 <code>undefined</code>）时引发错误。如果对象为 <code>nullish</code>，则表达式将计算为 <code>undefined</code>。</p><p>因此，如果 <code>data</code> 是 <code>nullish</code>，则 <code>data?.saleObj</code> 将计算为 <code>undefined</code>。如果 <code>data</code> 不是 <code>nullish</code>，则将尝试访问 <code>saleObj</code> 属性。如果 <code>saleObj</code> 存在于 <code>data</code> 对象上，则返回它的值，否则返回 <code>undefined</code>。</p><p>以下是一个示例以说明这个语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data?.<span class="hljs-property">saleObj</span>); <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">const</span> data2 = &#123; <span class="hljs-attr">saleObj</span>: &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span> &#125; &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data2?.<span class="hljs-property">saleObj</span>?.<span class="hljs-property">price</span>); <span class="hljs-comment">// 10</span><br><br><span class="hljs-keyword">const</span> data3 = &#123; &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data3?.<span class="hljs-property">saleObj</span>?.<span class="hljs-property">price</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h4 id="心愿便利贴"><a href="#心愿便利贴" class="headerlink" title="心愿便利贴"></a>心愿便利贴</h4><ul><li><p>考察点： element-ui  (表单验证 ) </p></li><li><p>答案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;item.css&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in    wishList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// ......</span></span><br><span class="language-javascript"><span class="hljs-attr">rules</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// TODO 待补充验证的代码</span></span><br><span class="language-javascript"><span class="hljs-attr">name</span>:[</span><br><span class="language-javascript">&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入姓名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">min</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;长度在 2 到 4 个字符&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;</span><br><span class="language-javascript">],</span><br><span class="language-javascript"><span class="hljs-attr">content</span>:[</span><br><span class="language-javascript">&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入内容&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="language-javascript">&#123; <span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;长度在 1 到 30 个字符&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"> <span class="hljs-comment">// ......</span></span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br></code></pre></td></tr></table></figure></li></ul><h4 id="消失的-Token"><a href="#消失的-Token" class="headerlink" title="消失的 Token"></a>消失的 Token</h4><ul><li><p>考察点：Vue(Vuex 的基本使用)</p></li><li><p>答案：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>           <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123; &#125;,<br>           <span class="hljs-attr">computed</span>: &#123;<br>               <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-keyword">return</span> store.<span class="hljs-property">getters</span>.<span class="hljs-property">welcome</span><br>               &#125;,<br>               <span class="hljs-title function_">username</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-comment">// 第一处修改 </span><br>                   <span class="hljs-keyword">return</span> store.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;user/username&#x27;</span>]<br>               &#125;,<br>               <span class="hljs-title function_">token</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-comment">// 第二处修改 </span><br>                   <span class="hljs-keyword">return</span> store.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;user/token&#x27;</span>]<br>               &#125;<br>           &#125;,<br>           <span class="hljs-attr">methods</span>: &#123;<br>               <span class="hljs-comment">// 回车/点击确认的回调事件</span><br>               <span class="hljs-title function_">login</span>(<span class="hljs-params">username</span>) &#123;<br>                   <span class="hljs-comment">// 第三处修改 </span><br>                   username &amp;&amp; store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;user/login&#x27;</span>, &#123; username, <span class="hljs-attr">token</span>: <span class="hljs-string">&#x27;sxgWKnLADfS8hUxbiMWyb&#x27;</span> &#125;)<br>                   username &amp;&amp; store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;say&#x27;</span>, <span class="hljs-string">&#x27;登录成功，欢迎你回来！&#x27;</span>)<br>               &#125;<br>           &#125;<br>       &#125;)<br></code></pre></td></tr></table></figure><ul><li>知识点解析</li></ul><p><code>namespaced: true</code> 是在 Vuex 模块中的配置选项之一，它表示将该模块开启命名空间模式。</p><p>在 Vuex 中，模块系统可以将 <code>store</code> 分割成小模块，每个模块都有自己的状态、<code>mutation</code>、<code>action</code> 和 <code>getter</code> 等。命名空间模式是一种使模块更加封装的方法，它可以确保模块内部的 <code>mutation</code> 和 <code>getter</code> 只能访问该模块内部的状态，而不是整个应用程序的状态。</p><p>使用 <code>namespaced: true</code> 配置选项，可以为该模块启用命名空间模式，这意味着在访问该模块的 <code>mutation</code> 和 <code>getter</code> 时，需要通过模块名来限定。例如，在一个名为 <code>user</code> 的 Vuex 模块中，如果启用了命名空间模式，那么在该模块内部的 <code>mutation</code> 中，要访问该模块的 <code>state</code>，就需要使用 <code>state</code> 参数的形式，即 <code>context.state</code>，而在调用该模块的 <code>mutation</code> 或 <code>getter</code> 时，需要指定该模块的名称，例如：<code>store.commit(&#39;user/login&#39;)</code>。</p><p>命名空间模式可以有效地避免模块之间的状态冲突，提高代码的可维护性和可读性。但是，在使用命名空间模式时，需要注意模块之间的依赖关系，以及在模块之间传递参数时的命名方式等问题。</p><h4 id="封装-Promisefy-函数-（大学组）"><a href="#封装-Promisefy-函数-（大学组）" class="headerlink" title="封装 Promisefy 函数 （大学组）"></a>封装 Promisefy 函数 （大学组）</h4><ul><li><p>考察点：ES6    promise、fs基本理解 </p></li><li><p>答案：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">promisify</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">fn</span>(...args, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-title function_">reject</span>(err);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">resolve</span>(result);<br>        &#125;<br>      &#125;);<br>    &#125;);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是函数的详细解释：</p><ul><li><code>function promisify(fn)</code> - promisify 函数使用一个回调函数作为参数，它将被转换为返回 Promise 的函数。</li><li><code>return function (...args)</code> - promisify 返回一个新函数，这个新函数接受任意数量的参数并将它们传递给原始函数。</li><li><code>return new Promise((resolve, reject) =&gt; &#123; ... &#125;</code> - promisify 返回的函数创建一个新的 Promise，当原始函数完成时将被解析。</li><li><code>fn(...args, (err, result) =&gt; &#123; ... &#125;)</code> - promisify 执行原始函数并传递最后一个参数作为回调函数。回调函数期望两个参数：<code>err</code> 和 <code>result</code>。</li><li><code>if (err) &#123; reject(err); &#125; else &#123; resolve(result); &#125;</code> - 当原始函数完成时，回调函数将被执行。如果存在错误，则 Promise 将被拒绝为该错误；否则，Promise 将被解析为返回结果。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 首先可以看到这个promisefy函数是怎么用的，参数是一个函数</span><br><span class="hljs-comment">   * 调用promisefy函数的结果被存到readFileSync里，</span><br><span class="hljs-comment">   * 而readFileSync在后面可以看到直接接个小括号传两个参了</span><br><span class="hljs-comment">   * 并且还能.then和.catch</span><br><span class="hljs-comment">   * 所以调用这个promisefy返回的是一个参数为(textPath, &#x27;utf8&#x27;)的函数</span><br><span class="hljs-comment">   * 并且这个函数的调用结果还是个promise对象，</span><br><span class="hljs-comment">   * 不然不是promise对象那来的then方法</span><br><span class="hljs-comment">   * 那这个promise对象里面怎么判断读取文件成功或失败呢</span><br><span class="hljs-comment">   * 学过node就知道了</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">textPath,type</span>) =&gt;</span> <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">fn</span>(textPath,type,<span class="hljs-function">(<span class="hljs-params">err, contrast</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-title function_">reject</span>(err)<br>        <span class="hljs-keyword">else</span> <span class="hljs-title function_">resolve</span>(contrast)<br>      &#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><h4 id="虚拟滚动"><a href="#虚拟滚动" class="headerlink" title="虚拟滚动"></a>虚拟滚动</h4><ul><li>考察点 ：vue  </li><li>答案：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;virtual-list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;virtual-list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span> @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用于撑起滚动区域高度的空白元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scroll-container&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: totalHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--展示列表的ul元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; transform: dynamicTranslate &#125;&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-comment">&lt;!--用v-for循环展示列表数据--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in showingList&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: itemHeight + &#x27;px&#x27;, lineHeight: itemHeight + &#x27;px&#x27; &#125;&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>        &#123;&#123; item &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">itemHeight</span>: <span class="hljs-number">60</span>, <span class="hljs-comment">// 每一项的高度</span></span><br><span class="language-javascript">      <span class="hljs-attr">length</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 初始展示的项数</span></span><br><span class="language-javascript">      <span class="hljs-attr">buffer</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 预加载的项数</span></span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [], <span class="hljs-comment">// 数据列表</span></span><br><span class="language-javascript">      <span class="hljs-attr">totalHeight</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 数据列表总高度</span></span><br><span class="language-javascript">      <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 滚动条的位置</span></span><br><span class="language-javascript">      <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 开始展示的项的索引</span></span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">showingList</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">slice</span>(</span><br><span class="language-javascript">        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>), <span class="hljs-comment">// 起始索引（加上缓存）</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>) <span class="hljs-comment">// 结束索引（加上缓存和可见范围）</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">dynamicTranslate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> belowOffset = <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemHeight</span>; <span class="hljs-comment">// 预加载项的总高度</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> &lt;= belowOffset) &#123; <span class="hljs-comment">// 如果滚动距离小于等于预加载项的总高度，不需要滚动</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">`translate3d(0,0,0)`</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> startOffset =</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> - (<span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemHeight</span>) - belowOffset; <span class="hljs-comment">// 计算开始滚动的位置</span></span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-string">`translate3d(0,<span class="hljs-subst">$&#123;startOffset&#125;</span>px,0)`</span>;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">onScroll</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 监听滚动事件</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollTop</span>; <span class="hljs-comment">// 获取滚动条位置</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemHeight</span>); <span class="hljs-comment">// 计算开始展示的索引</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 在组件挂载后获取数据</span></span><br><span class="language-javascript">    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;./data.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = data; <span class="hljs-comment">// 将数据存入列表</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">totalHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemHeight</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>; <span class="hljs-comment">// 计算数据列表总高度</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化开始展示的索引</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化滚动条位置</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>知识点解析</p><p><strong><code>computed</code> 计算属性</strong></p><p><code>computed</code> 计算属性用于根据已有的数据计算出新的数据，并且只有在相关数据发生变化时才会重新计算。在这段代码中，<code>computed</code> 计算属性主要用于计算列表的展示内容和滚动的位置。<br>  showingList<code>：根据 </code>start<code>、</code>length<code>和</code>buffer<code>计算出当前需要展示的数据列表。</code></p><p>dynamicTranslate&#96;：根据滚动条的位置和预加载项的总高度计算出需要滚动的位置，以实现虚拟滚动</p><p><strong>虚拟列表的实现原理：</strong></p><p>虚拟列表通过只渲染可见范围内的数据项，而不是渲染整个列表来提高性能。在这段代码中，虚拟列表的实现原理如下：</p><ul><li>通过计算出开始展示的项的索引和需要展示的项数，计算出当前需要展示的数据列表。</li><li>通过计算出滚动条的位置和预加载项的总高度，计算出需要滚动的位置。</li><li>将滚动位置应用到列表容器上，从而实现虚拟滚动。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记</title>
    <link href="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/24/Linux%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux笔记"><a href="#Linux笔记" class="headerlink" title="Linux笔记"></a>Linux笔记</h2><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656990922392.png" alt="1656990922392"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656990978018.png" alt="1656990978018"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li><p>ls打印当前目录的列表</p></li><li><ol><li>ls -la-l让当前目录的文件呈列表显示，a列出所有文件，包括隐藏文件</li><li>ls -lh    列出文件和目录，并显示大小(human-readable)</li></ol></li><li><p>cat 文件名    查看文件内容？：连接文件并打印到标准输出设备上</p></li><li><p><code>tee 文件名</code>    追加内容</p></li><li><p><code>&lt;&gt;</code> 重定向：<code>tee &lt; a &gt; b</code> 把a写到b中</p></li><li><p>cd 目录    进入该目录</p></li><li><ol><li>cd ..    进入当前目录的上一级目录</li></ol></li><li><p>pwd    输出当前路径</p></li><li><p>echo    字符串输出</p></li><li><p>mkdir    创建目录</p></li><li><p>mv    重命名或移动文件</p></li><li><p>cp    拷贝文件</p></li><li><p>man 命令    查看操作手册</p></li><li><p>head -n file   查看文件的前n行</p></li><li><p>tail -n 文件路径    查看文件的末n行</p></li><li><p><code>wc -l 文件路径</code> :   统计文件内容的行数。<code>-h</code>表示lines，行数。</p><p><code>wc -w 文件路径</code> :   统计文件内容的单词数，依据空格来判断单词数量。<code>-w</code> 表示words，单词数。</p><p><code>wc -c 文件路径</code> ：统计文件的字节数。<code>-c</code>表示bytes,字节数。</p></li><li><p>ps -ef :查看服务器进程信息。-e 列出全部进程， f  显示全部的列</p></li><li><p><code>top</code> ：查看服务器的进程占的资源（<code>q</code>指令退出）</p><p>M:   将结果按内存从高到低进行降序排列<br>P： 表示将结果按照CPU使用率从高到低进行降序排列；<br>1： 当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息；</p><p>t:   树形显示</p></li><li><p><code>du -sh 文件路径</code> ：查看文件的真实大小</p></li><li><p><code>find 路径 -name *.conf</code> ：查询指定路径下以.conf结尾的文件</p></li><li><p><code>reboot</code> ：重启计算机</p></li><li><p><code>w</code>:  查看ssh连接到本机的情况</p></li><li><p><code>find / -name +文件名</code> 搜索文件</p><p><code>locate 文件名</code>  搜索文件</p></li><li><p><code>watch -n 1 ls -lha</code>  实时显示命令执行结果</p></li><li><ul><li><p><code>sudo su</code></p></li><li><p><code>sudo !!</code>  <code>!!</code>代表上一条命令</p></li></ul></li><li><ul><li><code>etc/environment</code> 环境变量表</li><li><code>unset name</code>删除环境变量</li></ul></li><li><p><code>tree -L 1 /</code> 一级，树形，列出根目录</p></li><li><p>gcc x.c -o x     对x.c进行编译</p></li><li><p>.&#x2F;a.out    执行a.out</p></li><li><p><code>wc -l f.txt</code>    查看文件<code>f.txt</code>有多少行</p></li><li><ol><li><code>head -n 10 f.txt</code>    查看<code>f.txt</code>的前十行</li><li><code>tail -n 5 f.txt</code>    查看<code>f.txt</code>的后五行</li></ol></li><li><p><code>touch b.jpg</code>    创建文件<code>b.jpg</code></p></li><li><p><code>rm b.jpg</code>    删除<code>b.jpg</code></p></li><li><p>man ls    查看ls的手册，常见的<code>man</code>文档部分包括：</p><ul><li>Section 1: User Commands - 用户命令</li><li>Section 2: System Calls - 系统调用</li><li>Section 3: C Library Functions - C标准库函数</li><li>Section 4: Devices and Special Files - 设备和特殊文件</li><li>Section 5: File Formats and Conventions - 文件格式和约定</li><li>Section 6: Games and Fun Stuff - 游戏和娱乐内容</li><li>Section 7: Miscellaneous Information - 杂项信息</li><li>Section 8: System Administration Commands - 系统管理命令</li></ul></li><li><p>ls –help    查看ls参数的简要说明</p></li><li><p><code>file 文件名</code>查看文件类型</p></li><li><p><code>diff 文件1 文件2</code> 比较两个文件是否相同</p></li><li><p><code>apt update</code>  更新本地的数据库缓存</p></li><li><p><code>apt show 包</code>  显示包信息</p></li><li><p><code>apt remove 包</code>  删除包信息</p></li><li><p><code>apt upgrade 包</code>  自动安装更新</p></li><li><p>压缩包：打包+压缩</p></li></ul><img src="./image-20230502192126645.png"><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230502192541049.png" alt="image-20230502192541049"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230507160047163.png" alt="image-20230507160047163"></p><ul><li><p>第一列<code>root</code>表示该文件的拥有者，必须在<code>/etc/passwd</code>里面，可以用<code>chown</code>改变</p><ul><li>chown [-R] 账号名称 文件或目录</li><li>chown [-R] 账号名称:用户组名称 文件或目录</li></ul></li><li><p>第二列表示所属用户组，必须在<code>/etc/group</code>里面，可以使用<code>chown</code>和<code>chgrp</code>改变</p></li><li><p><a href="https://heary.cn/posts/www-data-Ubuntu-Web%E6%9C%8D%E5%8A%A1%E6%89%80%E5%B1%9E%E7%94%A8%E6%88%B7-%E7%BB%84/">参考</a></p></li><li><ul><li><p><code>sudo useradd xxx</code></p></li><li><p><code>sudo su xxx</code></p></li></ul></li><li></li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>参考：<a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p><ul><li><p><a href="https://www.runoob.com/docker/docker-hello-world.html">https://www.runoob.com/docker/docker-hello-world.html</a></p></li><li><p><code>docker pull name</code>  获取镜像</p></li><li><p><code>docker ps</code>   查看运行的容器</p></li><li><p><code>docker logs</code>  查看容器标准输出</p></li><li><p><code>docker stop id</code> 命令来停止容器</p></li><li><p><code>docker info</code>查看docker信息</p></li><li><p><code>docker images</code> 查看本地镜像</p></li><li><p><code>docker container ls -a</code>  查看所有容器</p></li><li><p><code>docker run -dit ubuntu</code>  创建镜像</p></li><li><p><code>docker exec -it 69d1 bash</code>  进入镜像，从这里exit不会导致镜像结束</p></li></ul><h3 id="进程的使用"><a href="#进程的使用" class="headerlink" title="进程的使用"></a>进程的使用</h3><ul><li><p>.&#x2F;fork &amp;     让可执行程序fork在后台执行，&amp;：让程序在后台执行</p></li><li><p><code>ps</code> 查看在后台运行的程序</p></li><li><ol><li><code>ps -uf</code>     <code>u</code>显示当前用户的所有进程，<code>f</code>显示进程之间的关系</li><li><code>ps | grep fork</code>    查看是否有名为fork的进程依然存在</li></ol></li><li><p>kill 给进程发各种信号</p></li><li><ol><li><code>kill -9 &#123;PID&#125;</code>    终止某个进程</li><li><code>pkill</code>    <code>pkill -9 fork</code>避免不同终端PID不同的问题</li></ol></li><li><p><code>ctrl+z</code> 把当前命令放入后台，并暂停</p></li><li><p><code>jobs</code> 查看当前在后台的命令</p></li><li><p><code>fg %num</code>  将后台的命令调至前台</p></li><li><p><code>bg %num</code>  将后台暂停的进程在后台执行</p></li><li><p><code>kill %num</code>  终止命令编号为numd的进程</p></li></ul><h3 id="shell小工具"><a href="#shell小工具" class="headerlink" title="shell小工具"></a>shell小工具</h3><ul><li><p>一个据说更好的shell：<code>zsh</code></p></li><li><p>man简洁版：<code>tldr</code></p><ul><li><code>tldr ls</code></li></ul></li><li><p>在终端查看图片：<code>sudo apt-get install imagemagick</code></p><ul><li><code>display nihao.png</code></li></ul></li><li><p>MySQL美化：<code>mycli</code></p></li><li></li></ul><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230623185136711.png" alt="image-20230623185136711"></p><ul><li><p>新建会话<code>tmux new -s session_name</code></p></li><li><p>分离会话<code>tmux detach</code> 或 <code>Ctrl+b d</code></p></li><li><p>查看所有会话<code>tmux ls</code></p></li><li><p>接入会话<code>tmux attach -t session_name</code></p></li><li><p>切换会话<code>tmux switch -t session_name</code></p></li><li><p>杀死会话<code>tmux kill-session session_name</code></p></li><li><p>重命名会话<code>tmux rename-session -t session_name</code></p></li><li></li><li><p>新建窗口<code>ctrl+b c</code></p></li><li><p>切换窗口<code>ctrl+b num</code></p><ul><li><code>ctrl+b p</code></li><li><code>ctrl+b n</code></li></ul></li><li><p>窗口划分</p><ul><li><code>ctrl+b &quot;</code>上下</li><li><code>ctrl+b %</code>  左右</li><li><code>ctrl+b +↑↓←→</code>切换pane</li></ul></li></ul><h3 id="SSH连接虚拟机"><a href="#SSH连接虚拟机" class="headerlink" title="SSH连接虚拟机"></a>SSH连接虚拟机</h3><p><strong>全是重点！！！</strong></p><ul><li><p>不连接root用户，只连接普通用户，比如szl，所以.ssh&#x2F;config里面的user应该填szl</p></li><li><p>报错：</p><ul><li>ip可以ping通，但ssh不能直接连<code>root@192.168.912.132</code>，只能连<code>szl@192.168.912.132</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">22:23:20.608</span>] Terminating local server<br>[<span class="hljs-meta">22:23:20.611</span>] Resolver error: Error: Connecting <span class="hljs-keyword">with</span> SSH timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure></li><li></li></ul><p>卸载&amp;安装：</p><ul><li><p>停止使用：<code>sudo systemctl stop ssh</code></p></li><li><p>卸载：<code>sudo apt-get remove ssh-server</code>    和  <code>sudo apt-get remove ssh-client</code></p></li><li><p>安装：<code>sudo apt-get install ssh-server</code> 和 <code>sudo apt-get install ssh-client</code></p></li><li><p>启动ssh：<code>sudo systemctl start ssh</code></p></li><li><p>查看ssh状态：<code>sudo service ssh status</code></p></li><li></li></ul><p>传送文件</p><ul><li><p>把本地目录传送到远程机器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp -r D:\wenjian\Code\Python\Django_module szl@192.168.192.132:/home/szl/桌面/database-lab/lab4/dj<br></code></pre></td></tr></table></figure></li><li><p>远程机器上下载目录到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp -r szl@192.168.192.132:/home/szl/桌面/database-lab/lab4/dj D:\wenjian\Code\Python\Django_module<br></code></pre></td></tr></table></figure></li><li><p>数据从向右流动</p></li></ul><hr><h3 id="C语言工程开发"><a href="#C语言工程开发" class="headerlink" title="C语言工程开发"></a>C语言工程开发</h3><h4 id="1-多模块程序"><a href="#1-多模块程序" class="headerlink" title="1.多模块程序"></a>1.多模块程序</h4><p>回忆一下，在刚开始学习 C 语言的时候，我们曾经学习过，当我们的程序只有一个<code>main.c</code>文件时，我们可以在命令行中通过</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -o program <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br></code></pre></td></tr></table></figure><p>对单个代码文件进行编译，生成可执行文件<code>program</code>，并且通过<code>./program</code>运行编译生成的程序。在我们之前的课程中，计蒜客的学习系统也帮你进行了这样的操作。</p><p>相比于单个文件、单一功能的程序，当程序有多个模块时，问题就开始变得复杂了。我们对每一个模块会首先编译出每个模块对应的<code>*.o</code><strong>目标代码文件（relocatable object file）</strong>，例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">gcc -c -o set.o set.c<br></code></pre></td></tr></table></figure><p>会将我们的一个<code>set.c</code>文件编译成一个<code>set.o</code>的目标代码文件。请注意，这里的<code>-c</code>表示生成目标代码文件。<code>-o</code>与之前单文件的时候一样，在它之后我们会写明被生成的文件的名称。</p><p>当我们完成了每一个独立模块的编译并获得它们的目标代码文件后，我们可以将我们的主程序的目标代码文件与他们链接在一起。例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">gcc -o program main.o set.o others.o<br></code></pre></td></tr></table></figure><p>将目标代码文件<code>set.o</code>和<code>others.o</code>与<code>main.o</code>在链接在一起，并且输出了 <strong>可执行文件（excutable file）</strong><code>program</code>。</p><p>我们依然可以通过<code>./program</code>运行编译生成的程序。</p><p>当我们将一个程序写在多个文件中时，每一个文件中的变量和函数默认都是只有文件内的部分才可以访问的。但是有一些特殊的全局变量、类型定义、函数可能会需要在多个文件中被使用。</p><p>这时候，我们可以将这类的内容单独写成一个 <strong>头文件（header file）</strong>，并且将全局变量、类型定义、函数声明写到头文件中。</p><p>对于一个文件<code>set.c</code>，习惯上它的头文件会被命名为<code>set.h</code>。在所有需要用<code>set.h</code>中全局变量、类型定义、声明的函数的文件中，用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;set.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>将对应的头文件引入。在这里的引入头文件方式和引入系统库头文件的方式很类似，只不过这里用的是引号<code>&quot;&quot;</code>而不是尖括号<code>&lt;&gt;</code>。</p><p>由于头文件里也可以引入头文件，因此我们可能事实上多次引入同一个文件，比如我们引入<code>1.h</code>和<code>2.h</code>，且<code>1.h</code>也引入<code>2.h</code>，这时因为<code>2.h</code>被引入了两次，就有可能出现重复的声明。为了解决这个问题，我们在<code>2.h</code>中定义一个宏，在<code>2.h</code>的最开始判断这个宏是否被定义过，如果被定义过，就跳过<code>2.h</code>整个文件的内容。</p><p>这里我们将会用到两个新的预处理指令<code>#ifndef xxx</code>和<code>#endif</code>，它们成对出现且<code>#ifndef</code>在前，作用是如果这时并未已定义<code>xxx</code>宏，则这对<code>#ifndef xxx</code>, <code>#endif</code>之间的内容有效。（其中<code>xxx</code>可以替换为任意宏名）</p><p>这样<code>2.h</code>可以写为类似于如下的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> xxx</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> xxx</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Status</span> &#123;</span> Success, Fail &#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">int</span> age;<br>&#125; People;<br>Status <span class="hljs-title function_">go_to_Jisuanke</span><span class="hljs-params">(People)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>细心的同学已经发现，如果在程序中尚未引入<code>2.h</code>的位置定义了<code>xxx</code>宏，则<code>#include &quot;2.h&quot;</code>中的声明并不会被引入，因此我们不应该在此使用<code>xxx</code>这种平凡的名字。实际上，我们一般会采用一个与头文件名相关的名字来代替<code>xxx</code>，比如一个常用的代码风格里，这个宏的名字形式为<code>工程名_路径名_文件名_H_</code>。</p><h4 id="2-Makefile"><a href="#2-Makefile" class="headerlink" title="2.Makefile"></a>2.Makefile</h4><p>在前面学习多模块程序的时候，我们需要先把每个模块的代码都生成为目标代码文件，然后再将目标代码文件联编成一个可执行文件。如果每一次编译都要输入这么多命令，是不是很复杂呢？如果每次修改一点点内容就需要重新编译整个工程，是不是很浪费时间呢？</p><p>为了解决所遇到的问题，方便开发，我们使用一个叫做<code>make</code>的命令，它可以读取<code>Makefile</code>文件，并且根据<code>Makefile</code>中的规则描述把源文件生成为可执行的程序文件。</p><p>最基本的<code>Makefile</code>中包含了一系列形式如下的规则。请注意，每一条规则的命令前，必须要有一个制表符<code>\t</code>。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">目标: 依赖<span class="hljs-number">1</span> 依赖<span class="hljs-number">2</span> ...<br>    命令<br></code></pre></td></tr></table></figure><p>例如，我们可以写一条规则：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">array.o: array.c array.h</span><br>   gcc -c -o array.o array.c<br></code></pre></td></tr></table></figure><p>表示生成的文件是目标代码文件<code>array.o</code>，它依赖于<code>array.c</code>和<code>array.h</code>。当我们在命令行中执行<code>make array.o</code>时，根据这一规则，如果<code>array.o</code>不存在或者<code>array.c</code>与<code>array.h</code>至少之一比<code>array.o</code>更新，就会执行<code>gcc -c -o array.o array.c</code>。</p><p>我们把上述代码保存为<code>Makefile</code>，与<code>array.c</code>和<code>array.h</code>放在同一目录，在那个目录里执行<code>make array.o</code>就能看到效果。注意：<code>Makefile</code>里的除当前目录隐藏文件外的第一个目标会成为运行<code>make</code>不指定目标时的默认目标。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">main: array.o main.o</span><br>    gcc -o main array.o main.o<br><br><span class="hljs-section">main.o: main.c array.h</span><br>    gcc -c -o main.o main.c<br><br><span class="hljs-section">array.o: array.c array.h</span><br>    gcc -c -o array.o array.c<br></code></pre></td></tr></table></figure><p>在<code>Makefile</code>有多条规则时，如果我们希望只生成其中一个，我们可以在<code>make</code>命令后加上需要生成的目标的名称。例如，在这里我们可以执行<code>make main.o</code>、<code>make array.o</code>或<code>make main</code>。当我们执行<code>make main</code>时，<code>make</code>命令发现<code>array.o</code>和<code>main.o</code>不存在，就会根据以它们为目标的规则先生成它们。</p><p>很多时候，你会需要将<code>.o</code>为后缀的目标代码文件和可执行的程序文件删除，完全从头进行编译。那么我们可以写一条<code>clean</code>规则，例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">clean:</span><br>    rm -f array.o main.o main<br></code></pre></td></tr></table></figure><p>按照预期，当我们执行<code>make clean</code>就可以删除<code>array.o</code>、<code>main.o</code>和<code>main</code>了。事实真的这样吗？</p><p>细心的同学已经发现，这时如果已经存在<code>clean</code>文件，<code>rm</code>命令就不会执行了。为了解决这个问题，我们通过一个特殊的方法告诉<code>make</code>这个名为<code>clean</code>的规则在<code>clean</code>存在的时候仍然有效。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><br><span class="hljs-section">clean:</span><br>    rm -f array.o main.o main<br></code></pre></td></tr></table></figure><p><code>.PHONY</code>用于声明一些伪目标，伪目标与普通的目标的主要区别是伪目标不会被检查是否存在于文件系统中而默认不存在且不会应用默认规则生成它。</p><p>在<code>Makefile</code>中我们还可以使用它的变量和注释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"># 井号开头的行是一个注释<br># 设置 C 语言的编译器<br>CC = gcc<br><br># -g 增加调试信息<br># -Wall 打开大部分警告信息<br>CFLAGS = -g -Wall<br><br># 整理一下 main 依赖哪些目标文件<br>MAINOBJS = main.o <span class="hljs-built_in">array</span>.o<br><br>.PHONY: clean<br><br>main: $(MAINOBJS)<br>    $(CC) $(CFLAGS) -o main $(MAINOBJS)<br><br><span class="hljs-built_in">array</span>.o: <span class="hljs-built_in">array</span>.c <span class="hljs-built_in">array</span>.h<br>    $(CC) $(CFLAGS) -c -o <span class="hljs-built_in">array</span>.o <span class="hljs-built_in">array</span>.c<br><br>main.o: main.c <span class="hljs-built_in">array</span>.h<br>    $(CC) $(CFLAGS) -c -o main.o main.c<br><br>clean:<br>    rm -f $(MAINOBJS) main<br></code></pre></td></tr></table></figure><p>上面这个例子已经是一个较为完整的<code>Makefile</code>了。以<code>#</code>开头的是我们的注释，我们在这里用注释说明了我们定义的<code>Makefile</code>变量的用途。<code>CC</code>变量定义了编译器，<code>CFLAGS</code>变量标记了编译参数，<code>MAINOBJS</code>变量记录了<code>main</code>依赖的目标文件。定义的变量可以直接通过<code>$(变量名)</code>进行使用。</p><h4 id="3-命令行参数"><a href="#3-命令行参数" class="headerlink" title="3.命令行参数"></a>3.命令行参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，<code>main</code>函数有两个参数，第一个参数是整数型，会传入<strong>命令行参数的个数</strong>，程序运行时就可以接收到。第二个参数是<code>char **</code>，其中储存了<strong>用户从命令行传递进来的参数</strong>。</p><p>如果我们的程序可执行文件名为<code>main</code>，则在命令行中输入<code>./main hello world</code>我们会得到<code>argc</code>为 <code>3</code>，<code>argv[0]</code>为<code>./main</code>，<code>argv[1]</code>为<code>hello</code>，<code>argv[2]</code>为<code>world</code>。如果有更多参数也可以以此类推。</p><p>我们不难发现，命令行参数默认都是空格分隔，但是如果我们希望包含空格的一个字符串作为参数，我们则需要在输入参数时用引号将其包裹起来。</p><p>如果我们的程序可执行文件名为<code>main</code>，则在命令行中输入<code>./main &quot;hello world&quot; is my greet</code>我们会得到<code>argc</code>为 <code>5</code>，<code>argv[0]</code>为<code>./main</code>，<code>argv[1]</code>为<code>hello world</code>，<code>argv[2]</code>为<code>is</code>，<code>argv[3]</code>为<code>my</code>，<code>argv[4]</code>为<code>greet</code>。</p><p>任何被接收到的<code>argv</code>参数都可以被当做正常的字符串在代码里使用。在很多程序的设计中，我们会需要根据接收到的参数来决定程序的执行方式，这时候，学会使用<code>argc</code>和<code>argv</code>就显得很重要了。在之后的课程中，你也会需要运用这一块的知识，一定要学明白喔。</p><h4 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h4><p>在之前的课程中，我们学习、设计的所有程序都是从标准输入进行读取、向标准输出进行写出的，操作系统为我们准备好了标准输入、标准输出的界面。在这节课中，我们将要学习如何从文件中进行读取、如何向文件进行写入。</p><p>在读文件的时候我们需要先有一个可以让我们访问到文件的 <strong>文件指针（file pointer）</strong>，它是一个<code>FILE</code>类型的指针。</p><p>我们可以通过下面的方式声明一个文件指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *fp;<br></code></pre></td></tr></table></figure><p>这时候，如果我们希望对一个文件进行操作，我们需要先使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">fp = fopen(文件路径, 访问模式);<br></code></pre></td></tr></table></figure><p>将文件指针和文件关联起来，其中第一个参数是一个字符串，对应了我们希望访问的文件路径。第二个参数是访问模式，它可以是表示只读模式的<code>&quot;r&quot;</code>，也可以是表示只写模式的<code>&quot;w&quot;</code>，还可以是在文件末尾追加的<code>&quot;a&quot;</code>。</p><p>当我们将文件指针和文件关联起来后，我们就可以通过<code>fgetc(fp);</code>获得当前指针之后位置的一个字符了，每获得一个字符，指针会向后移动一个字符（如果到达文件尾部则会返回<code>EOF</code>）。</p><p>我们这时通过<code>fputc(&#39;c&#39;, fp);</code>的方式将字符<code>&#39;c&#39;</code>写入到<code>fp</code>关联的文件内了。</p><p>了解到这些信息后，我们就可以实现将一个文件复制到另一个文件内的函数了，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">filecopy</span><span class="hljs-params">(FILE *in_fp, FILE *out_fp)</span> &#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span> ((ch = fgetc(in_fp)) != EOF) &#123;<br>        fputc(ch, out_fp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数接收的两个参数都是文件指针。这个函数会通过一个可读模式的文件指针逐字符地读取，并且通过一个可写模式的文件指针逐字符地将所有字符写出，从而起到复制文件内容的作用。</p><p>你需要注意，在给文件指针进行命名的时候，要避开 <code>stdin</code>、<code>stdout</code> 和 <code>stderr</code> 这三个名称。因为这三个名称其实已经用于标准输入、标准输出、标准错误的文件指针。</p><p>你可能会问了，那我们看到的 <code>stdin</code>、<code>stdout</code> 和 <code>stderr</code> 的这三个文件指针可以直接使用吗？回答是肯定的。</p><p>我们是通过 <code>fgetc(stdin);</code> 获得来自标准输入的字符，也可以通过 <code>fputc(ch, stdout);</code> 或 <code>fputc(ch, stderr);</code> 将变量 <code>ch</code> 中的字符输出到标准输出或标准错误中的。</p><p>除了<code>fgetc</code>和<code>fputc</code>之外，我们还可以使用<code>fscanf</code>和<code>fprintf</code>函数。这两个函数都很像我们已经很熟悉的<code>scanf</code>和<code>printf</code>函数，只是不过，<code>scanf</code>和<code>printf</code> 可以被看作 <code>fscanf</code>和<code>fprintf</code> 的特例。</p><p>我们使用 <code>fscanf</code> 从文件指针<code>in_fp</code>进行读取时，可以写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fscanf</span>(in_fp, <span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br></code></pre></td></tr></table></figure><p>而如果我们写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fscanf</span>(<span class="hljs-built_in">stdin</span>, <span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br></code></pre></td></tr></table></figure><p>这将完全与下面直接使用 <code>scanf</code> 的方式等价。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br></code></pre></td></tr></table></figure><p>类似地，我们使用<code>fprintf</code>向文件指针<code>out_fp</code>进行写出时，可以写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fprintf</span>(out_fp, <span class="hljs-string">&quot;%c&quot;</span>, a);<br></code></pre></td></tr></table></figure><p>而如果我们写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;%c&quot;</span>, a);<br></code></pre></td></tr></table></figure><p>这将完全与下面直接使用 <code>printf</code> 的方式等价。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a);<br></code></pre></td></tr></table></figure><p>在使用文件并且确定不再继续使用后，我们要通过下面所示的方式将文件指针<code>fp</code>与文件的关联断开。你可以将它视为和<code>fopen</code>相反的一个操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">fclose(fp);<br></code></pre></td></tr></table></figure><p>如果你不在程序中使用<code>fclose</code>，程序正常结束时，程序会为所有打开的文件调用<code>fclose</code>。</p><p><code>stdin</code>、<code>stdout</code> 其实也是可以被打开的文件指针，如果你觉得用不到的话，其实也是可以使用 <code>fclose</code> 将他们关闭掉的。你可以自己试一试，关闭 <code>stdin</code>、<code>stdout</code> 会对我们以前写过的程序带来什么样的影响呢？</p><hr><hr><h2 id="Missing-Semester笔记"><a href="#Missing-Semester笔记" class="headerlink" title="Missing Semester笔记"></a>Missing Semester笔记</h2><p><a href="https://missing-semester-cn.github.io/">中文讲义</a></p><h3 id="1-Shell"><a href="#1-Shell" class="headerlink" title="1.Shell"></a>1.Shell</h3><ul><li><code>chmod 777 文件</code>     修改权限</li><li><code>grep string fail</code>     查找字符串，-R可递归进行</li></ul><h3 id="2-Shell-工具和脚本"><a href="#2-Shell-工具和脚本" class="headerlink" title="2.Shell 工具和脚本"></a>2.Shell 工具和脚本</h3><ul><li><pre><code class="bash">find . -name src -type d<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>  作用：在当前目录查找名为src的目录<br><br>  可用参数：<br><br>  + `-name &lt;name&gt;`<br>  + `-path <span class="hljs-string">&#x27;*/test/*.py&#x27;</span>`  查找所有路径中包含<span class="hljs-built_in">test</span>的文件<br>  + `-<span class="hljs-built_in">type</span> f/d`查找文件、目录<br>  + `-mtime -1` 查找前一天修改的所有文件<br>  + `-size +500k/-10M` 查找大于500k的文件 / 小于10M的文件<br>  + `-<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \;` 删除查找到的所有文件<br><br>+ <span class="hljs-built_in">history</span>    输出历史命令 <br><br>+ <br><br><span class="hljs-comment">#### homework </span><br><br>3. ```shell<br>   <span class="hljs-comment">#!/bin/bash</span><br>   <br>   <span class="hljs-function"><span class="hljs-title">marco</span></span>()&#123;<br>   <span class="hljs-built_in">export</span> MARCO=$(<span class="hljs-built_in">pwd</span>)<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;path: <span class="hljs-variable">$MARCO</span> &quot;</span><br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-title">polo</span></span>()&#123;<br>   <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MARCO</span>&quot;</span><br>   &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><ol start="4"><li><pre><code class="shell">#!/bin/bashi=0while true; do    i=$(( i+1 ))    n=$(( RANDOM % 100 ))    if [[ n -eq 42 ]]; then        echo &quot;Something went wrong&quot;        &gt;&amp;2 echo &quot;The error was using magic numbers&quot;        echo &quot;after $i times, $STDOUT, $STDERR&quot;        exit 1    fi echo &quot;Everything went according to plan&quot;done<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br><br><br><br><br><br><br><br><br>&gt; 参考链接：https:<span class="hljs-comment">//zhuanlan.zhihu.com/p/102176365，https://www.runoob.com/linux/linux-shell.html</span><br><br>+ <span class="hljs-string">`.sh`</span>文件第一行：<span class="hljs-string">`#!/bin/bash`</span><br>+ 执行<span class="hljs-string">`.sh文件`</span>：<span class="hljs-string">`./hello.sh`</span><br><br>**位置参数变量**<br><br>- <span class="hljs-string">`$n ：$0 代表命令本身、$1-$9代表第1到9个参数，10以上参数用花括号，如 $&#123;10&#125;`</span>。<br>- $?：从上一条命令中获取错误代码<br>- $_：上一个命令的最后一个参数<br>- $* ：命令行中所有参数，且把所有参数看成一个整体。<br>- $@ ：命令行中所有参数，且把每个参数区分对待。<br>- $# ：所有参数个数。<br>- 单引号会忽略逃逸字符<br>- $$进程ID<br><br>**注意**<br><br>+ <span class="hljs-string">`=`</span>两侧不能加空格<br><br><br><br><br><br><br><br>+ <br><br>+ <span class="hljs-string">`&#x27;&#x27;`</span>中的字符串不考虑转义，<span class="hljs-string">`&quot;&quot;`</span>中的字符串会转义<br><br>+ <span class="hljs-string">`mkdir -p /1/2/3`</span> 递归创建目录，不会抛出错误<br><br>+ <span class="hljs-string">`$(ls)`</span> 先执行<span class="hljs-keyword">ls</span>，执行结果替换$(<span class="hljs-keyword">ls</span>)<br><br>+ 在bash中进行比较时，尽量使用双方括号 <span class="hljs-string">`[[ ]]`</span> 而不是单方括号 <span class="hljs-string">`[ ]`</span><br><br>+ 命令支持<span class="hljs-string">`? *`</span>通配符<br><br>+ 支持<span class="hljs-string">`&#123;&#125;`</span>按行自动展开<br><br>  <span class="hljs-string">``</span><span class="hljs-string">`sh</span><br><span class="hljs-string">  convert image.&#123;png,jpg&#125;</span><br><span class="hljs-string">  # 会展开为</span><br><span class="hljs-string">  convert image.png image.jpg</span><br></code></pre></td></tr></table></figure></code></pre></li></ol><p>+ </p><h3 id="3-Vim"><a href="#3-Vim" class="headerlink" title="3.Vim"></a>3.Vim</h3><p>几种模式：</p><ul><li>主要：<code>normal</code>，按<code>esc</code>即可进入<code>normal</code>模式</li><li>i: insert</li><li>r: replace</li><li>v: visual</li><li>sfift + v: visual line</li><li>ctrl + v: visual block</li><li><code>:</code> command line</li></ul><p>快捷键：</p><ul><li><p><code>tabnew</code>: 新窗口</p></li><li><p><code>help instruction</code>: 查看帮助</p></li><li><p><code>sq</code>: 新窗口</p></li><li><p><code>qa</code>: 关闭所有窗口</p></li><li><p><code>hjkl</code>: 左上右下移动</p></li><li><p>词： <code>w</code> （下一个词）， <code>b</code> （词初）， <code>e</code> （词尾）</p></li><li><p>行： <code>0</code> （行初）， <code>^</code> （第一个非空格字符）， <code>$</code> （行尾）</p></li><li><p>屏幕： <code>H</code> （屏幕首行）， <code>M</code> （屏幕中间）， <code>L</code> （屏幕底部）</p></li><li><p>翻页： <code>Ctrl-u</code> （上翻）， <code>Ctrl-d</code> （下翻）</p></li><li><p><code>o</code>在当前光标下面重开一行并切换为INSERT模式</p><p><code>O</code>上方</p></li><li><p><code>u</code>撤销上一步(undo)</p><ul><li>Ctrl+r 重做(redo)</li></ul></li><li><p><code>d</code>删除 {移动命令}</p><ul><li>例如， <code>dw</code> 删除词,<code>de</code>删除到词尾, <code>d$</code> 删除到行尾, <code>d0</code> 删除到行头。</li><li><code>c</code>删除并更改：删除后进入INSERT模式</li></ul></li><li><p>按两次会作用于整行</p></li><li><p><code>c</code>删除单个字符</p></li><li><p><code>r</code>替换单个字符</p></li><li><p><code>y</code>复制，<code>z</code>粘贴</p></li><li><p><code>/</code>向下搜索</p><p><code>?</code>向上搜索</p></li><li><p><code>.</code>重复上一步</p></li><li><p><code>~</code>修改大小写</p></li></ul><h4 id="vimtutor"><a href="#vimtutor" class="headerlink" title="vimtutor"></a>vimtutor</h4><ul><li>Ctrl + g 显示文档信息</li><li>G 移动到文档最后一行</li><li>gg第一行</li><li>数字 + G：跳转到指定的行数</li><li><code>s/old/new(/g)</code>（全局）用new替换old</li><li><code>:! + command</code> 进行命令行操作</li></ul><h4 id="官方讲义："><a href="#官方讲义：" class="headerlink" title="官方讲义："></a>官方讲义：</h4><h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><p>多数时候你会在正常模式下，使用移动命令在缓存中导航。在 Vim 里面移动也被称为 “名词”， 因为它们指向文字块。</p><ul><li>基本移动: <code>hjkl</code> （左， 下， 上， 右）</li><li>词： <code>w</code> （下一个词）， <code>b</code> （词初）， <code>e</code> （词尾）</li><li>行： <code>0</code> （行初）， <code>^</code> （第一个非空格字符）， <code>$</code> （行尾）</li><li>屏幕： <code>H</code> （屏幕首行）， <code>M</code> （屏幕中间）， <code>L</code> （屏幕底部）</li><li>翻页： <code>Ctrl-u</code> （上翻）， <code>Ctrl-d</code> （下翻）</li><li>文件： <code>gg</code> （文件头）， <code>G</code> （文件尾）</li><li>行数： <code>:&#123;行数&#125;&lt;CR&gt;</code> 或者 <code>&#123;行数&#125;G</code> ({行数}为行数)</li><li>杂项： <code>%</code> （找到配对，比如括号或者 &#x2F;* *&#x2F; 之类的注释对）</li><li>查找：f , F ,t ,T<ul><li>查找&#x2F;到 向前&#x2F;向后 在本行的{字符}</li><li><code>,</code> &#x2F; <code>;</code> 用于导航匹配</li></ul></li><li>搜索: <code>/&#123;正则表达式&#125;</code>, <code>n</code> &#x2F; <code>N</code> 用于导航匹配</li></ul><h5 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h5><ul><li><p>i进入插入模式</p><ul><li>但是对于操纵&#x2F;编辑文本，不单想用退格键完成</li></ul></li><li><p><code>O</code> &#x2F; <code>o</code> 在之上&#x2F;之下插入行</p></li><li><pre><code class="plaintext">d&#123;移动命令&#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  删除 &#123;移动命令&#125;<br><br>  - 例如， `dw` 删除词, `d$` 删除到行尾, `d0` 删除到行头。<br><br>- ```plaintext<br>  c&#123;移动命令&#125;<br></code></pre></td></tr></table></figure>改变 &#123;移动命令&#125;- 例如， `cw` 改变词- 比如 `d&#123;移动命令&#125;` 再 `i`</code></pre></li><li><p><code>x</code> 删除字符（等同于 <code>dl</code>）</p></li><li><p><code>s</code> 替换字符（等同于 <code>xi</code>）</p></li><li><p>可视化模式 + 操作</p><ul><li>选中文字, <code>d</code> 删除 或者 <code>c</code> 改变</li></ul></li><li><p><code>u</code> 撤销, <code>&lt;C-r&gt;</code> 重做</p></li><li><p><code>y</code> 复制 &#x2F; “yank” （其他一些命令比如 <code>d</code> 也会复制）</p></li><li><p><code>p</code> 粘贴</p></li><li><p>更多值得学习的: 比如 <code>~</code> 改变字符的大小写</p></li></ul><h5 id="修饰语"><a href="#修饰语" class="headerlink" title="修饰语"></a>修饰语</h5><p>你可以用修饰语改变“名词”的意义。修饰语有 <code>i</code>，表示“内部”或者“在内“，和 <code>a</code>， 表示”周围“。</p><ul><li><code>ci(</code> 改变当前括号内的内容</li><li><code>ci[</code> 改变当前方括号内的内容</li><li><code>da&#39;</code> 删除一个单引号字符串， 包括周围的单引号</li></ul><h4 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h4><ul><li><p>esc映射为capslk:</p><p>在<code>C:\Users\Administer\AppData\Roaming\Code\User\keybindings.json</code>中添加一句&#96;&#96;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;capslock&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;extension.vim_escape&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-命令行环境"><a href="#5-命令行环境" class="headerlink" title="5.命令行环境"></a>5.命令行环境</h3><ul><li><p><code>ssh myserver journalctl</code> 查看系统日志</p></li><li><p><code>Ctrl-C</code>的作用是发出一个<code>SIGINT</code>信号，用来中断程序。但程序可以忽略<code>SIGINT</code>信号，这是我们可以用<code>Ctrl+\</code>来发出<code>SIGQUIT</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python3</span><br><span class="hljs-keyword">import</span> signal, time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">signum, time</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI got a SIGINT, but I am not stopping&quot;</span>)<br><br>signal.signal(signal.SIGINT, handler)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    time.sleep(<span class="hljs-number">.1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i), end=<span class="hljs-string">&quot;&quot;</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>暂停：<code>Ctrl+Z</code> 发出<code>SIGTSTP</code></p></li><li><p>命令加<code>&amp;</code>后缀会自动放入后台执行</p></li></ul><hr><h2 id="FFmpeg笔记"><a href="#FFmpeg笔记" class="headerlink" title="FFmpeg笔记"></a>FFmpeg笔记</h2><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -i input.mp4 -c:vcopy -c:acopy output.mov<br>ffmpeg -i input.ts -bsf:a aac_adtstoasc -c:v copy -c:a copyoutputfromts.mp4<br></code></pre></td></tr></table></figure><h3 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -i input.mp4 -ss 10 -t 15 -codec copy cut.mp4<br></code></pre></td></tr></table></figure><ol><li>参数：</li></ol><ul><li><p>-i : source</p></li><li><p>-ss:start time</p></li><li><p>-t :duration</p></li><li><p>-c :video,audio codec</p></li></ul><p><strong>注意</strong>：原视频只能为mp4、mkv</p><h3 id="音视频混流"><a href="#音视频混流" class="headerlink" title="音视频混流"></a>音视频混流</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg audio.m4s -i video.m4s -acodec copy -vcodec copy output.mp4<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：这里输入可以是其他类型的文件</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>初始</p><ul><li>配置的三级作用域：<ul><li><code>--global</code>作用于当前user，存储在用户目录的<code>.gitconfig</code>文件中</li><li><code>--local</code>仅作用于当前仓库</li><li>查看配置信息<code>git config -l</code></li></ul></li><li>初始化一个工作区：<code>git init</code></li><li><code>git add</code>：把文件修改添加到暂存区</li><li><code>git commit -m &quot;message&quot;</code>：把暂存区所有内容提交到当前分支</li><li><code>git remote add name git@github.com:Asxjdb/first.git</code>：关联远程仓库并指定别名<code>name</code></li><li><code>git status -s</code>：查看状态</li></ul><p>分支</p><ul><li><code>git branch 分支名</code>：创建新分支</li><li><code>git branch -d main</code>  删除分支</li><li><code>git switch 分支名</code>：切换分支</li><li><code>git merge branch111</code>： 把<code>branch111</code>分支合并到当前分支（共同的父结点）</li><li><code>git rebase branch111</code>：把当前分支线性合并到<code>branch111</code>上</li><li><code>git checkout HEAD^</code> &#x2F; <code>git checkout HEAD~1</code>在当前分支上移动<code>HEAD</code>标签</li><li><code>git branch -f main HEAD~3</code>让分支指向另一个提交：把<code>main</code>分支强制指向<code>HEAD</code>的第三父级</li><li><code>git revert main</code>：撤回main分支的一个提交</li><li></li></ul><p>版本回退</p><ul><li><code>git log</code></li></ul><p>远程</p><ul><li>连接<code>git remote add origin  git@github:Asxjdb/cpu.git</code></li><li>拉取<code>git pull origin main</code></li><li>查看本地、远程所有分支<code>git branch -a</code></li><li>删除远程分支<code>git push origin -d main</code></li><li>创建远程分支并推送<code>git push -u origin master</code></li><li>强制推送<code>git push -f</code></li></ul><h3 id="计蒜客课件"><a href="#计蒜客课件" class="headerlink" title="计蒜客课件"></a>计蒜客课件</h3><h4 id="笔记-1"><a href="#笔记-1" class="headerlink" title="笔记"></a>笔记</h4><p><strong>使用Git分支与版本切换</strong></p><ul><li><p><code>git branch</code> 查看现有分支</p></li><li><p><code>git branch &lt;分支名&gt;</code> 创建分支</p></li><li><p><code>git branch -d &lt;分支名&gt;</code> 删除分支</p></li><li><p><code>git checkout &lt;分支名&gt; / git switch &lt;分支名&gt;</code>切换分支</p></li><li><p><code>git checkout -b &lt;分支名&gt; / git switch -c &lt;分支名&gt; </code> 创建并切换到分支</p></li><li><p><code>git stash</code> 储藏当前工作目录现场</p></li><li><p><code>git stash pop</code> 恢复到最近储藏的现场</p></li><li><p><code>git stash list</code> 查看所以储藏的现场</p></li><li><p><code>git stash apply stash@&#123;0&#125;</code> 恢复到指定的储藏现场</p></li><li><p><code>git stash drop stash@&#123;0&#125;</code> 删除储藏指定位置中的指定现场</p></li></ul><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944206598.png" alt="1656944206598"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944307394.png" alt="1656944307394"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944394013.png" alt="1656944394013"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944440047.png" alt="1656944440047"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944471482.png" alt="1656944471482"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944510926.png" alt="1656944510926"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944559394.png" alt="1656944559394"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944580663.png" alt="1656944580663"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944597341.png" alt="1656944597341"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944620449.png" alt="1656944620449"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944632995.png" alt="1656944632995"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944645952.png" alt="1656944645952"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944660444.png" alt="1656944660444"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944682001.png" alt="1656944682001"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944704386.png" alt="1656944704386"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944715579.png" alt="1656944715579"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944733755.png" alt="1656944733755"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656944844322.png" alt="1656944844322"></p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li>使用<code>git status</code>这个命令来查看工作目录中有哪些文件进行过操作</li><li><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656999555958.png" alt="1656999555958"></li></ul><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656999612634.png" alt="1656999612634"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656999847654.png" alt="1656999847654"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656999862257.png" alt="1656999862257"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1656999882712.png" alt="1656999882712"></p><ul><li><code>git checkout -b dev</code> &#x3D;&#x3D;创建并切换到<code>dev</code>分支&#x3D;&#x3D;</li><li><code>git push origin dev</code> &#x3D;&#x3D;将<code>dev</code>分支推送到远端仓库&#x3D;&#x3D;</li><li><code>git branch -d 参数 分支名</code> &#x3D;&#x3D;删除本地分支&#x3D;&#x3D;</li><li><code>git push origin --delete suanshu</code>&#x3D;&#x3D;删除远端仓库的suanshu分支&#x3D;&#x3D;</li><li><code>git branch -a</code> &#x3D;&#x3D;查看本地和仓库的所有分支&#x3D;&#x3D;</li></ul><h4 id="Git的远端仓库交互"><a href="#Git的远端仓库交互" class="headerlink" title="Git的远端仓库交互"></a>Git的远端仓库交互</h4><ul><li><code>git remote add origin &lt;远端仓库url&gt;</code>关联本地仓库和远端版本库</li><li><code>git push origin develop</code> 将本地修改推到远端</li><li><code>git pull origin master</code>将远端的修改拉到本地</li><li>拉取和推送</li><li><ol><li><code>git fetch</code> 拉取（全部分支）更新不更新工作目录</li><li><code>git pull</code>拉取（全部分支）更新并根据本地分支对应分支更新工作目录</li><li><code>git pull origin &lt;分支名&gt;</code> 从远端origin的指定分支进行拉取</li><li><code>git push</code> 推动更新</li><li><code>git push origin &lt;分支名&gt;</code> 向远端origin的指定分支名分支进行推送</li></ol></li><li><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657012481840.png" alt="1657012481840"></li><li><code>git branch</code> 创建分支</li><li><code>git checkout</code> 切换到指定的版本（或通过分支指定的版本）</li><li><code>git merge</code> 完成合并：将一个分支的修改应用到当前分支</li></ul><h4 id="Git协作之rebase策略"><a href="#Git协作之rebase策略" class="headerlink" title="Git协作之rebase策略"></a>Git协作之rebase策略</h4><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017409226.png" alt="1657017409226"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017421259.png" alt="1657017421259"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017428727.png" alt="1657017428727"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017436528.png" alt="1657017436528"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017443961.png" alt="1657017443961"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017451438.png" alt="1657017451438"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017458325.png" alt="1657017458325"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017463860.png" alt="1657017463860"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017484411.png" alt="1657017484411"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017490721.png" alt="1657017490721"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017498032.png" alt="1657017498032"></p><h4 id="Git仓库配置"><a href="#Git仓库配置" class="headerlink" title="Git仓库配置"></a>Git仓库配置</h4><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017562386.png" alt="1657017562386"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017544644.png" alt="1657017544644"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/1657017584174.png" alt="1657017584174"></p><h4 id="Git分支与版本切换"><a href="#Git分支与版本切换" class="headerlink" title="Git分支与版本切换"></a>Git分支与版本切换</h4><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/8db546df253398ab48da24827d23267131d0f0b5.png" alt="8db546df253398ab48da24827d23267131d0f0b5"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/040c89762e6897fd692b5b3880a9aea360e68d33.png" alt="040c89762e6897fd692b5b3880a9aea360e68d33"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/52fe246635118be1ee19eddbe72e762f672007ee.png" alt="52fe246635118be1ee19eddbe72e762f672007ee"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/87b5500206916e0ab39bbf14e5a0e51a69cf5abf.png" alt="87b5500206916e0ab39bbf14e5a0e51a69cf5abf"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/2963ee17bf4a1529e6fb2c6510ec2e479808bb3b.png" alt="2963ee17bf4a1529e6fb2c6510ec2e479808bb3b"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/6360c458e279859bf515ed83fd162b25a2f3df20.png" alt="6360c458e279859bf515ed83fd162b25a2f3df20"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/7266b75850f3a45b3a7efd063486e210da5a9672.png" alt="7266b75850f3a45b3a7efd063486e210da5a9672"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/aec7e124ad8d472f3e5f9e7f870ac3143b4be04f.png" alt="aec7e124ad8d472f3e5f9e7f870ac3143b4be04f"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/ba73b5b936398406da0346d550728bda76099303.png" alt="ba73b5b936398406da0346d550728bda76099303"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/2a018112e898289ba0ee658129312ed284b43859.png" alt="2a018112e898289ba0ee658129312ed284b43859"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/4c2cf191ddcd9a41f5f8cb6f4837514e713cee0f.png" alt="4c2cf191ddcd9a41f5f8cb6f4837514e713cee0f"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/4f059085754da07eee317b442a275d4f078e0ee4.png" alt="4f059085754da07eee317b442a275d4f078e0ee4"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/06f2fb7fd182cfad79eedc69f02c237a0adb8041.png" alt="06f2fb7fd182cfad79eedc69f02c237a0adb8041"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/6dc6573228ce3f3085dd67be4dc28369c999b7fa.png" alt="6dc6573228ce3f3085dd67be4dc28369c999b7fa"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/6fb6e112375923217ab92b199dede6ff2950e659.png" alt="6fb6e112375923217ab92b199dede6ff2950e659"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/7cd12b78dbcee668dd833387ded7f05ec94e1e50.png" alt="7cd12b78dbcee668dd833387ded7f05ec94e1e50"></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>来源：<a href="https://segmentfault.com/a/1190000039073637">https://segmentfault.com/a/1190000039073637</a></p><p><strong>蓝色的表示文件夹，白色的表示文件，绿色表示拥有所有权限，红色表示压缩包</strong>。</p><ol><li><strong>bin</strong> : 全称binary（二进制），该目录中存储的都是一些二进制文件，文件都是可以被运行的。</li><li>boot: 这里存放一些启动linux时使用的核心文件，包括一些连接文件以及镜像文件。</li><li><strong>dev</strong> :该目录中主要存放的是外接设备，例如盘，其他的光盘等。其中的外接设备不能直接被使用，需要挂载（类似Windows下的分配盘符）</li><li><strong>etc</strong>: 主要存储系统管理所需的一些配置文件。</li><li><strong>home</strong>: 表示“家”，存储除了root用户以外其他所有用户，类似于Windows下的user&#x2F;用户。在linux中，每个用户都有自己的家目录，一般该目录名以用户的账号命名。</li></ol><ul><li>&#x2F;bin 可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等实际上都是一些小的应用程序</li><li>&#x2F;home 普通用户的主目录，对应Windows下的C:&#x2F;Users&#x2F;用户名&#x2F;</li><li>&#x2F;root root用户的主目录（root用户是具有最高权限的用户，之后会讲）</li><li>&#x2F;boot 内核文件的引导目录, 放置 linux 系统启动时用到的一些文件</li><li>&#x2F;sbing 超级用户使用的指令文件</li><li>&#x2F;tmp 临时文件目录，一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。</li><li>&#x2F;dev 设备文件目录，在Linux中万物皆文件，实际上你插入的U盘等设备都会在dev目录下生成一个文件，我们可以很方便地通过文件IO方式去操作外设，对嵌入式开发极为友好。</li><li>&#x2F;lib 共享库，系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</li><li>&#x2F;usr 第三方 程序目录</li><li>&#x2F;etc 配置程序目录，系统配置文件存放的目录</li><li>&#x2F;var 可变文件，放置系统执行过程中经常变化的文件</li><li>&#x2F;opt 用户使用目录，给主机额外安装软件所摆放的目录。</li></ul><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230502190128929.png" alt="image-20230502190128929"></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><ul><li><p>进入MySQL</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -u root -p 111<br></code></pre></td></tr></table></figure></li><li><p>查看有哪些库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>查看某一库中的表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use sakila; // 使用指定表单<br>show tables; // 查看sakila数据库中的表单<br></code></pre></td></tr></table></figure></li><li><p>查看表单中的列&#x2F; 字段&#x2F; 属性&#x2F; 数据项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc payment;<br></code></pre></td></tr></table></figure></li><li><p>导出到文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from 19info, grade where 19info.`学号` = grade.`学号` into outfile &#x27;/var/lib/mysql/baoyan19&#x27;<br>注意只能导出到 /var/lib/mysql/baoyan19这个文件夹<br></code></pre></td></tr></table></figure><p>从文件导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load data infile &#x27;/your/file/path/country&#x27; into table country<br>追加到country中，country需要有属性名<br></code></pre></td></tr></table></figure></li><li><p>查看当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></figure></li><li><p>查看当前用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>();<br></code></pre></td></tr></table></figure></li><li><p>单行注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 要有一个空格<br># 空格<br></code></pre></td></tr></table></figure></li><li><p>合并</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">group_conc<br></code></pre></td></tr></table></figure></li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><ul><li><p>create: table, view, index</p></li><li><p>drop:    table, view, index</p></li><li><p>alter:    table</p></li><li><p><strong>alter</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 添加<br>alter table student<br>add scome date<br><br># 修改<br>alter table stuednt<br>modify scome date<br><br># 删除<br>alter table student<br>drop unique(sname)<br></code></pre></td></tr></table></figure><ul><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> table_name;<br></code></pre></td></tr></table></figure></li></ul><p><strong>视图</strong></p><ul><li><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create view view_name [列名]<br>as 子查询<br></code></pre></td></tr></table></figure></li></ul><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p><strong>静态约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#123;NOT NULL | DEFAULT value | <br>[CONSTRAINT constraint_name]<br>&#123;UNIQUE<br>| PRIMARY KEY<br>| CHECK(search_cond)<br>| REFERENCES tablename [(colname)]<br>[ON DELETE &#123;CASCADE | SET NULL&#125;]&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Create Table Student ( <br>    Sno char(8)      not null unique, # 相当于主键了<br>    Sname char(10)   default &#x27;张三&#x27;, # 默认值<br>Ssex char(2)     constraint ctssex check (Ssex=&#x27;男&#x27; or Ssex=&#x27;女&#x27;), #给出值域<br>    Sage integer     check(Sage&gt;=1 and Sage&lt;150),<br>    Dno char(2)      references Dept(Dno) on delete cascade,   # 可以这样指定外键，并规定同步删除<br>sclass char(6)   check(Sno in (select Cno form course)),   # check里面可以有select语句<br>    constraint ctcc  check(chours/credit=20), #表约束：必须这样定义（另起一行）<br>foreign key(Dno) references Dept(Dno) on delete csacade # 表约束：指定外键，并同步删除<br>);<br></code></pre></td></tr></table></figure><p><strong>断言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create assertion assertion_name <br>check (...)<br></code></pre></td></tr></table></figure><p><strong>触发器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 工资只能升不能降<br># 触发器的PL/SQL块中应用OLD和NEW时，必须在它们之前加冒号(:)，属于固定用法，但在WHEN子句中则不能加冒号<br># before<br>create trigger teacher_chgsal <br>before update of salary on teacher <br>referencing new x,  old y<br>for each row <br>when(x.salary &lt; y.salary) begin<br>raise_application_error(-20003, &#x27;invalid salary on update&#x27;);<br>end<br><br># 下标加一<br># after<br>create trigger sumc <br>after insert on sc <br>referencing new row newi<br>for each row begin<br>update student set SumCourse = SumCourse + 1<br>where Sno =: newi.Sno;<br>end;<br><br># 同步更新<br>create trigger updSno <br>after update of Sno on student<br>referencing old oldi, new newi<br>for each row begin<br>update sc set Sno = newi.Sno where Sno = :oldi.Sno ;<br>end;<br><br># 同步删除<br>create trigger delSno <br>after delete on Student<br>referencing old oldi<br>for each row begin<br>delete sc where Sno = :oldi.Sno;<br>end;<br></code></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul><li>第三方工具<code>mycli</code>：支持SQL语法高亮、自动补全，<ul><li>使用方式：<code>mycli -uroot -p111</code></li></ul></li></ul><h2 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h2><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230531172442342.png" alt="image-20230531172442342"></p><p><img src="/2023/06/24/Linux%E7%AC%94%E8%AE%B0/image-20230531172501554.png" alt="image-20230531172501554"></p><h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><ul><li><code>hexo g</code>    生成静态网页</li><li><code>hexo s</code>    本地预览效果</li><li><code>hexo d</code>    上传到github</li><li><code>hexo new file_name</code>    新建博客</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
      <tag>SQL</tag>
      
      <tag>命令行</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AcWing 第3讲 搜索与图论</title>
    <link href="/2023/06/22/AcWing-ch3/"/>
    <url>/2023/06/22/AcWing-ch3/</url>
    
    <content type="html"><![CDATA[<h4 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h4>]]></content>
    
    
    
    <tags>
      
      <tag>AcWing</tag>
      
      <tag>算法题</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AcWing 第2讲 数据结构</title>
    <link href="/2023/06/20/AcWing-ch2/"/>
    <url>/2023/06/20/AcWing-ch2/</url>
    
    <content type="html"><![CDATA[<h4 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 表达式求值，支持括号和 - = * /</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_number</span><span class="hljs-params">(string str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : str) &#123;<br>        <span class="hljs-keyword">if</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string sten;<br>    cin &gt;&gt; sten;<br><br>    <span class="hljs-type">char</span> op[N];<br>    <span class="hljs-type">int</span> op_top = <span class="hljs-number">0</span>;<br><br>    string ans[N];<br>    <span class="hljs-type">int</span> ans_top = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i;i &lt; sten.<span class="hljs-built_in">length</span>();i++) &#123;<br>        <span class="hljs-type">char</span> ch = sten[i];<br>        <span class="hljs-keyword">switch</span> (ch) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>            op[op_top++] = ch;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>            <span class="hljs-keyword">while</span> (op[op_top - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                ans[ans_top++] = op[--op_top];<br>            &#125;<br>            op_top--;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-keyword">while</span> (op[op_top - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; op_top &gt; <span class="hljs-number">0</span>) &#123;<br>                ans[ans_top++] = op[--op_top];<br>            &#125;<br>            op[op_top++] = ch;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            <span class="hljs-keyword">while</span> (op[op_top - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; op_top &gt; <span class="hljs-number">0</span><br>                &amp;&amp; op[op_top - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; op[op_top - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                ans[ans_top++] = op[--op_top];<br>            &#125;<br>            op[op_top++] = ch;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                num = <span class="hljs-number">10</span> * num + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                ch = sten[++i];<br>            &#125;<br>            i--;<br>            ans[ans_top++] = <span class="hljs-built_in">to_string</span>(num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (op_top &gt; <span class="hljs-number">0</span>) &#123;<br>        ans[ans_top++] = op[--op_top];<br>    &#125;<br><br>    <span class="hljs-comment">// for (int i=0;i &lt; ans_top;i++)</span><br>    <span class="hljs-comment">//     cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><br>    <span class="hljs-type">int</span> ret[N], ret_top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ans_head = <span class="hljs-number">0</span>; ans_head &lt; ans_top;ans_head++) &#123;            <span class="hljs-comment">// loop through ans array from head to tail.)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_number</span>(ans[ans_head])) &#123;<br>            ret[ret_top++] = <span class="hljs-built_in">stoi</span>(ans[ans_head]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">char</span> ch = ans[ans_head][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            x = ret[--ret_top];<br>            y = ret[--ret_top];<br>            <span class="hljs-keyword">switch</span> (ch) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                ret[ret_top++] = x + y;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                ret[ret_top++] = y - x;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                ret[ret_top++] = y * x;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                ret[ret_top++] = y / x;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// for(int x : ret) cout &lt;&lt; x &lt;&lt; endl; </span><br>    cout &lt;&lt; ret[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 单调栈</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num, n, st[N], top = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        cin &gt;&gt; num;<br>        <span class="hljs-keyword">while</span> (top &amp;&amp; st[top<span class="hljs-number">-1</span>] &gt;= num) top--;<br>        <span class="hljs-keyword">if</span> (!top) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;-1 &quot;</span>;<br>            st[top++] = num;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; st[top - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            st[top++] = num;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 滑动窗口</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num[N], st[N];<br>    <span class="hljs-type">int</span> n, m, head = <span class="hljs-number">0</span>, top = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-comment">// 最小值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        cin &gt;&gt; num[i];<br>        <span class="hljs-keyword">if</span> (i - m + <span class="hljs-number">1</span> &gt; st[head]) head++;<br>        <span class="hljs-keyword">while</span> (head &lt; top &amp;&amp; num[i] &lt;= num[st[top - <span class="hljs-number">1</span>]]) top--;<br>        st[top++] = i;<br>        <span class="hljs-keyword">if</span> (i &gt;= m<span class="hljs-number">-1</span>) cout &lt;&lt; num[st[head]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br><br>    head = <span class="hljs-number">0</span>, top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) st[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 求最大值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        <span class="hljs-keyword">if</span> (i - m + <span class="hljs-number">1</span> &gt; st[head]) head++;<br>        <span class="hljs-keyword">while</span> (head &lt; top &amp;&amp; num[i] &gt;= num[st[top - <span class="hljs-number">1</span>]]) top--;<br>        st[top++] = i;<br>        <span class="hljs-keyword">if</span> (i &gt;= m<span class="hljs-number">-1</span>) cout &lt;&lt; num[st[head]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单调队列接雨水"><a href="#单调队列接雨水" class="headerlink" title="单调队列接雨水"></a>单调队列接雨水</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//单调队列接雨水 leetcode 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> st[N], num[N], ans=<span class="hljs-number">0</span>, top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        cin &gt;&gt; num[i];<br>        <span class="hljs-keyword">while</span> (top &amp;&amp; num[i] &gt; num[st[top - <span class="hljs-number">1</span>]]) &#123;<br>            top--;<br>            <span class="hljs-type">int</span> tmp = num[st[top]];<br>            <span class="hljs-type">int</span> distence = i - st[top<span class="hljs-number">-1</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> heignt = <span class="hljs-built_in">min</span>(num[st[top - <span class="hljs-number">1</span>]], num[i]) - tmp;<br>            ans+=distence * heignt;<br>        &#125;<br>        st[top++] = i;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> n, m, ne[N];<br><span class="hljs-type">char</span> s[N], p[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; m &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; n &gt;&gt; s + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>;i &lt;= m;i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>        ne[i] = j;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;i &lt;= n;i++) &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i]!= p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>        <span class="hljs-keyword">if</span> (j == m) &#123;<br>            cout &lt;&lt; i - m &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="trie树"><a href="#trie树" class="headerlink" title="trie树"></a>trie树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// acw_835 trie树</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-comment">// son类似链式前向星，存储的是后继编号</span><br><span class="hljs-comment">// cnt相当于son[N][27]，跟在son[N]后面记录一个串出现的次数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i]; i++) &#123;<br>        <span class="hljs-type">int</span> x = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[j][x]) son[j][x] = ++idx;<br>        j = son[j][x];<br>    &#125;<br>    cnt[j]++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;s[i];i++) &#123;<br>        <span class="hljs-type">int</span> x = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[j][x]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        j = son[j][x];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>], str[N];<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, op, str);<br>        <span class="hljs-keyword">if</span> (*op == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(str);<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-built_in">query</span>(str) &lt;&lt; endl;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大异或树"><a href="#最大异或树" class="headerlink" title="最大异或树"></a>最大异或树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3000010</span>;<br><br><span class="hljs-type">int</span> son[N][<span class="hljs-number">2</span>], idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>;~i;i--) &#123;<br>        <span class="hljs-keyword">if</span> (!son[j][x &gt;&gt; i &amp; <span class="hljs-number">1</span>]) son[j][x &gt;&gt; i &amp; <span class="hljs-number">1</span>] = ++idx;<br>        j = son[j][x &gt;&gt; i &amp; <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>;~i;i--) &#123;<br>        <span class="hljs-type">int</span> xt = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (son[p][!xt]) &#123;<br>            p = son[p][!xt];<br>            ans = ans * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (son[p][xt]) &#123;<br>            p = son[p][xt];<br>            ans = ans * <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, a[N];<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">search</span>(a[i]));<br>    &#125;<br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 合并集合</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> num[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (num[x] != x) num[x] = <span class="hljs-built_in">find</span>(num[x]);<br>    <span class="hljs-keyword">return</span> num[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) num[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cout &lt;&lt; num[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br><br>    string op;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        cin &gt;&gt; op;<br>        cin &gt;&gt; x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;M&quot;</span>) &#123;<br>            num[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y)) cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cout &lt;&lt; num[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 连通块中点的数量</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">int</span> siz[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (num[x] != x) num[x] = <span class="hljs-built_in">find</span>(num[x]);<br>    <span class="hljs-keyword">return</span> num[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) num[i] = i, siz[i] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">char</span> op[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op);<br>        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span>) &#123;<br>            cin &gt;&gt; x &gt;&gt; y;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(num[x]) == <span class="hljs-built_in">find</span>(num[y])) <span class="hljs-keyword">continue</span>;<br>            siz[<span class="hljs-built_in">find</span>(x)] += siz[<span class="hljs-built_in">find</span>(y)];<br>            num[<span class="hljs-built_in">find</span>(y)] = <span class="hljs-built_in">find</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>            cin &gt;&gt; x &gt;&gt; y;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y)) cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cin &gt;&gt; x;<br>            cout &lt;&lt; siz[<span class="hljs-built_in">find</span>(x)] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 食物链</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> p[N], d[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 路径压缩</span><br><span class="hljs-comment">// 暂时不改变秩，再次查询的时候再改变</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) p[i] = i;<br><br><br>    <span class="hljs-type">int</span> t, x, y, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k--) &#123;<br>        cin &gt;&gt; t &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (x &gt; n || y &gt; n) res++;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> px = <span class="hljs-built_in">find</span>(x), py = <span class="hljs-built_in">find</span>(y);<br>            <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (px == py &amp;&amp; (d[x] - d[y]) % <span class="hljs-number">3</span>) res++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (px != py) &#123;<br>                    p[px] = py;<br>                    d[px] = d[y] - d[x];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (px == py &amp;&amp; (d[x] - d[y] - <span class="hljs-number">1</span>) % <span class="hljs-number">3</span>) res++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (px != py) &#123;<br>                    p[px] = py;<br>                    d[px] = d[y] - d[x] + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; res;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n, m, num[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = x;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * x &lt;= n &amp;&amp; num[<span class="hljs-number">2</span> * x] &lt; num[u]) u = <span class="hljs-number">2</span> * x;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * x + <span class="hljs-number">1</span> &lt;= n &amp;&amp; num[<span class="hljs-number">2</span> * x + <span class="hljs-number">1</span>] &lt; num[u]) u = <span class="hljs-number">2</span> * x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != x) &#123;<br>        <span class="hljs-built_in">swap</span>(num[u], num[x]);<br>        <span class="hljs-built_in">down</span>(u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cin &gt;&gt; num[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>;i &gt; <span class="hljs-number">0</span>;i--) <span class="hljs-built_in">down</span>(i);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        cout &lt;&lt; num[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        num[<span class="hljs-number">1</span>] = num[n--];<br>        <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模拟堆"><a href="#模拟堆" class="headerlink" title="模拟堆"></a>模拟堆</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]], ph[hp[b]]);<br>    <span class="hljs-built_in">swap</span>(hp[a], hp[b]);<br>    <span class="hljs-built_in">swap</span>(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> k, x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(op, <span class="hljs-string">&quot;I&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            cnt++;<br>            m++;<br>            <span class="hljs-comment">// ph[x]=y :第x个插入的数的位置为y</span><br>            <span class="hljs-comment">// hp[x]=y :位置为x的数是第y个插入的</span><br>            ph[m] = cnt, hp[cnt] = m;<br>            h[cnt] = x;<br>            <span class="hljs-built_in">up</span>(cnt);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(op, <span class="hljs-string">&quot;PM&quot;</span>)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, h[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(op, <span class="hljs-string">&quot;DM&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">heap_swap</span>(<span class="hljs-number">1</span>, cnt);<br>            cnt--;<br>            <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(op, <span class="hljs-string">&quot;D&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>            k = ph[k];<br>            <span class="hljs-built_in">heap_swap</span>(k, cnt);<br>            cnt--;<br>            <span class="hljs-built_in">up</span>(k);<br>            <span class="hljs-built_in">down</span>(k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;x);<br>            k = ph[k];<br>            h[k] = x;<br>            <span class="hljs-built_in">up</span>(k);<br>            <span class="hljs-built_in">down</span>(k);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模拟哈希-开放寻址法"><a href="#模拟哈希-开放寻址法" class="headerlink" title="模拟哈希-开放寻址法"></a>模拟哈希-开放寻址法</h4><p>哈希的参考资料：<a href="https://blog.csdn.net/raelum/article/details/128793474">https://blog.csdn.net/raelum/article/details/128793474</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 开放寻址法</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200003</span>, null = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> h[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[k] != null &amp;&amp; h[k] != x) &#123;<br>        k++;<br>        <span class="hljs-keyword">if</span> (k == N) k = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    string op;<br>    <span class="hljs-type">int</span> x;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        cin &gt;&gt; op &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;I&quot;</span>) h[<span class="hljs-built_in">find</span>(x)] = x;<br>        <span class="hljs-keyword">else</span> h[<span class="hljs-built_in">find</span>(x)] == null ? cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span> : cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 字符串哈希</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200003</span>, P = <span class="hljs-number">131</span>;<br><br>ULL h[N], pre[N];<br><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * pre[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">char</span> str[N];<br>    cin &gt;&gt; str + <span class="hljs-number">1</span>;<br><br>    pre[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n;i++) &#123;<br>        h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>        pre[i] = pre[i - <span class="hljs-number">1</span>] * P;<br>    &#125;<br><br>    <span class="hljs-type">int</span> a, b, c, d;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(a, b) == <span class="hljs-built_in">get</span>(c, d)) cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这是 AcWing 算法基础课的第二讲，这几天一直在做这个，刷了大概有5天吧。题并不难，主要是效率实在太低了。以后如果疲了一定要及时休息，状态不好时的效率实在太低了。</p><p>然后就是一点收获吧。这章主要是数据结构，之前学的都是使用结构体加指针实现的，这里全部使用的数组模拟，或者说<strong>链式前向星</strong>，据说这样时间开销会降低很多。以后要习惯这一点，在具体写代码时要应用进去。</p><p>还有4讲，争取用小学期刷完？当然一定要兼顾别的事情。DP和图论可能会比较难，所以一定要提高时间利用率！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>AcWing</tag>
      
      <tag>算法题</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量合并B站视频</title>
    <link href="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/"/>
    <url>/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>在手机的B站下载了很多视频，但这些视频并不是以mp4存储的<br>于是想把这些视频整理一下<br>但视频很多，自然不能一个一个用格式工厂合并，于是就想到了python</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>Python：<a href="https://blog.csdn.net/ruanjimu/article/details/121549510">Python配置</a></li><li>FFmpeg：<a href="https://blog.csdn.net/pythonlaodi/article/details/109222790">FFmpeg配置</a></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>手机下载的B站视频有两种储存方式，短的视频采用音视频分离的<code>m4s</code>，长视频会被拆分成多个短的<code>flv</code>文件存储<br>这里仅解决<code>m4s</code>格式的处理（因为作者仅遇到了这种情况），<strong>暂时没有考虑对<code>flv</code>的处理</strong><br><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906131338448-1087712334.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>话不多说，直接贴代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess   <span class="hljs-comment"># 进行命令行操作</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">inDir, outDir, ffmpeg</span>):<br>    av_list = os.listdir(inDir)  <span class="hljs-comment"># 获取视频列表，视频目录名就是视频的av号</span><br>    <span class="hljs-keyword">for</span> av <span class="hljs-keyword">in</span> av_list:           <span class="hljs-comment"># 遍历每个视频，</span><br>        av_dir = inDir + <span class="hljs-string">&quot;\\&quot;</span> + av      <span class="hljs-comment"># 拼接路径与文件名，得到每个av号的路径</span><br>        part_list = os.listdir(av_dir)   <span class="hljs-comment"># 分P(part)的视频，每个av号会对应多个视频，在此得到part的列表</span><br><br>        <span class="hljs-keyword">for</span> part <span class="hljs-keyword">in</span> part_list:       <span class="hljs-comment"># 遍历视频的每P</span><br>            part_dir = av_dir + <span class="hljs-string">&quot;\\&quot;</span> + part    <br>            <span class="hljs-comment"># 在每个part下面，会有一个用数字命名文件夹，一个xml，一个json。猜测数字代表的是视频的清晰度</span><br>            <span class="hljs-comment"># 我们的视频在那个用数字命名的文件夹里面</span><br>            sub_part_list = os.listdir(part_dir)   <span class="hljs-comment"># 得到每P文件夹下的文件目录</span><br><br>            <span class="hljs-keyword">for</span> sub_part <span class="hljs-keyword">in</span> sub_part_list:     <span class="hljs-comment"># 遍历每P下的文件</span><br>                <span class="hljs-keyword">if</span> (sub_part.isdigit()):    <span class="hljs-comment"># 只需要对 以数字命名的文件夹 进行操作</span><br>                    <span class="hljs-comment"># 在以数字命名的文件夹下面，会有三个文件，其中audio.m4s和video.m4s是我们需要的</span><br>                    <span class="hljs-comment"># 他们分别是我们下载的视频的 音频和没有声音的视频 </span><br>                    <span class="hljs-comment"># 我们把这两个文件通过ffmpeg混流，就可以还原出之前下载的视频</span><br>                    file_path = part_dir + <span class="hljs-string">&quot;\\&quot;</span> + sub_part  <br>                    <span class="hljs-comment"># file_path即为audio.m4s和video.m4s的路径</span><br>                    command = ffmpeg + <span class="hljs-string">&#x27;&quot;&#x27;</span> + file_path + <span class="hljs-string">&#x27;\\audio.m4s&#x27;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&#x27; -i &#x27;</span> \<br>                        + <span class="hljs-string">&#x27;&quot;&#x27;</span> + file_path + <span class="hljs-string">&#x27;\\video.m4s&#x27;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&#x27; -acodec copy -vcodec copy &#x27;</span>\<br>                        + <span class="hljs-string">&#x27;&quot;&#x27;</span> + outDir + <span class="hljs-string">&#x27;\\&#x27;</span> + av + <span class="hljs-string">&quot;→&quot;</span> + part+<span class="hljs-string">&#x27;.mp4&quot;&#x27;</span><br>                        <span class="hljs-comment"># 使用命令行进行混流</span><br>                    subprocess.Popen(command, stdout=subprocess.PIPE)   <span class="hljs-comment"># 执行命令</span><br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    inDir = <span class="hljs-string">&quot;D:\\wenjian\\temp\\download&quot;</span>  <span class="hljs-comment"># 视频的总目录,即输入内容。注意双反斜线</span><br>    outDir = <span class="hljs-string">&quot;D:\\wenjian\\temp\\download_res&quot;</span>  <span class="hljs-comment"># 视频的输出目录，转换好的视频会放到这里</span><br><br>    <span class="hljs-comment"># ffmpeg的路径，注意&#x27;-i&#x27;后面有空格</span><br>    ffmpeg = <span class="hljs-string">&#x27;D:\\ruanjian2\\ffmpeg-2022-08-31-git-319e8a49b5-full_build\\bin\\ffmpeg.exe -i &#x27;</span><br>    merge(inDir, outDir, ffmpeg)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>B站的视频默认在手机的这个文件夹里：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">此电脑\我的手机\内部存储设备\<span class="hljs-type">Android</span>\<span class="hljs-class"><span class="hljs-keyword">data</span>\tv.danmaku.bili\download</span><br></code></pre></td></tr></table></figure><p>这里我使用<strong>数据线</strong>连接了手机与电脑，<strong>把download整个拷到了电脑上</strong>。这里记得做好备份，以防损坏</p><blockquote><p>另外安利一下这种传数据的方式，速度非常快，而且不会产生什么额外的存储占用</p></blockquote><p>现在我们已经把下载的视频拷到电脑上了，下面是download目录下的内容：</p><hr><p><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906140904898-991361962.png"></p><p>这些文件夹全是以数字命名的，这串数字其实就是该视频的<code>av</code>号<br>然后我们打开几个看看<br><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906145333682-2121701290.png"></p><p><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906145505601-1352848216.png"><br>emmm….为什么有的有一个文件夹，有的有两个呢？<br><strong>原因</strong>：几P(part)就会有几个文件夹，我们循环处理就好啦！<br>然后我们进入一个文件夹<br><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906150323300-669488568.png"></p><p>会看到这样3个文件，其中只有那个以数字命名的文件夹是对我们有用的（这个数字代表的应该是清晰度）<br>我们进入这个文件夹<br><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20221020125317063-994579089.png"></p><p>以上步骤的代码：<br><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906150756330-1369199391.png"></p><p>以数字命名的文件夹下面，会有三个文件，其中audio.m4s和video.m4s是我们需要的<br>他们分别是我们下载的视频的<em>音频</em>和<em>没有声音的视频</em><br>我们把这两个文件通过ffmpeg混流，就可以还原出之前下载的视频</p><p><img src="/2023/06/13/%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6B%E7%AB%99%E8%A7%86%E9%A2%91/2834526-20220906150829072-670987569.png"></p><p>这样就完成了！</p><h2 id="不足-留坑"><a href="#不足-留坑" class="headerlink" title="不足(留坑)"></a>不足(留坑)</h2><ul><li>得到的视频是用av号加上P号命名的，可以用原视频标题命名，需要学习相关知识</li><li>把m4s直接拼接为mp4好像会有损耗，这个还有待了解</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>矩阵蛇形输出</title>
    <link href="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/"/>
    <url>/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>矩阵蛇形输出</strong></p><p>给定一个 <em>m</em> 行、n* 列的矩阵，请按照下图所示的顺序输出矩阵中所有的元素（从<code>[0][0]</code>位置开始，具体请参见下图）。</p><p><img src="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/9458562fccfacaf87b8293a0a3f1b499f4eb3f49.png"></p><p><strong>注意</strong> 每次碰到边界后，必须且只能沿着边界移动一格，不能后退，不能超出边界；在非边界区域只能向右上或左下方向前进。</p><p><strong>输入格式</strong></p><p>测评机会反复运行你写的程序。每次程序运行时，首先在第一行输入 22 个整数，分别对应题目描述中的 m<em>m</em> 和 n<em>n</em>（1 \leq m,n \leq 1001≤<em>m</em>,<em>n</em>≤100），之间用一个空格分隔。接下来输入 m<em>m</em> 行，每行包含 n<em>n</em> 个整数（-10000 \leq−10000≤ 每个数 \leq 10000≤10000），每两个整数之间用一个空格分隔。</p><p><strong>输出格式</strong></p><p>输出为一行，包括 m\times n<em>m</em>×<em>n</em> 个整数，按照题目要求的顺序依次输出所有矩阵元素，任意两个整数之间用一个空格分隔，最后一个整数后面没有空格。</p><p><strong>格式说明</strong></p><p>输出时每行末尾的多余空格，不影响答案正确性</p><p><img src="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/1661257072003.png"></p><p><strong>样例输入1</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输出1</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输入2</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输出2</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="简化题目"><a href="#简化题目" class="headerlink" title="简化题目"></a>简化题目</h4><p>我们可以先把题目简化成这样：<br><img src="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/2834526-20220831153357426-870555368.png" alt="img"><br>它的实现方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>], i, j, k;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i][j]);<span class="hljs-comment">//读入</span><br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m + n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[i-j][j]);<br>        i++;<span class="hljs-comment">//拐弯</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[j][i-j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（码风轻喷）<br>这里，我们<strong>忽略了边界</strong>，输出会是<strong>三角形</strong>，而不是矩形</p><h4 id="回到原题"><a href="#回到原题" class="headerlink" title="回到原题"></a>回到原题</h4><p>怎么能成为一个矩形呢？再<strong>加上限制条件</strong>就好啦</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>], i, j, k;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i][j]);<span class="hljs-comment">//读入</span><br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m + n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-keyword">if</span>(j &lt; n &amp;&amp; i - j &lt; m )      <span class="hljs-comment">//限制条件</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[i-j][j]);<br>        i++;<span class="hljs-comment">//拐弯</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-keyword">if</span>(j &lt; m &amp;&amp; i - j &lt; n)       <span class="hljs-comment">//限制条件</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[j][i-j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题就成功ac了，很简洁！</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python速查手册</title>
    <link href="/2023/06/07/python-dict/"/>
    <url>/2023/06/07/python-dict/</url>
    
    <content type="html"><![CDATA[<blockquote><p>《Python编程——从入门到实践》（蟒蛇书）自学笔记</p><p>2022年9月8日</p></blockquote><h2 id="二、变量和简单数据类型"><a href="#二、变量和简单数据类型" class="headerlink" title="二、变量和简单数据类型"></a>二、变量和简单数据类型</h2><ul><li>变量命名<strong>不能使用大写字母</strong>，应该以下划线分割</li><li>双引号与单引号并无区别，因此嵌套时可以更灵活</li><li><code>#</code>  单行注释</li><li>可以用<code>==</code>判断两个字符串是否相等</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p><code>str.title()</code>每个单词的首字母大写</p><p><code>str.upper()</code>把字符串全改为大写</p><p><code>str.lower()</code>把字符串全改为小写</p></li><li><p><code>f&quot;aba aba&#123;str1&#125;aba&#123;str2&#125;&quot;</code>格式化字符串&#x2F;f字符串：大括号中的<code>str1</code>和<code>str2</code>会被替换</p></li><li><p><code>str.strip()</code>剔除字符串两侧空白</p><p><code>str.lstrip()</code>左侧</p><p><code>str.rstrip()</code>右侧</p></li><li></li></ul><h4 id="数"><a href="#数" class="headerlink" title="数"></a>数</h4><ul><li><code>**</code>两个乘号表示乘方</li><li><code>//</code>表示整除</li><li><code>100_000_000</code>可以在数字中添加下划线增加可读性</li><li>x, y, z &#x3D; 1, 2, 3 同时给多个变量赋值</li><li>Python没有内置的常量类型</li><li></li></ul><h2 id="三、列表简介"><a href="#三、列表简介" class="headerlink" title="三、列表简介"></a>三、列表简介</h2><ul><li>创建：list &#x3D; []</li><li>负下标访问：list[-1]  表示最后一个元素</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>通用：</strong></p><ul><li><p><code>list.append(elem)</code>  在链表末尾添加元素</p></li><li><p><code>list.insert(index, elem)</code>  在指定位置插入元素</p></li><li><p><code>list.pop()</code>  取列表末尾元素</p><p><code>list.pop(index)</code>  取指定位置元素</p></li><li><p><code>list.remove(elem)</code>  删除链表中第一个指定的值</p></li><li><p><code>list.sort()</code>  永久递增排序</p><p><code>list.sort(reverse = true)</code>  永久递减排序</p></li><li><p><code>list.reverse()</code>  翻转列表</p></li></ul><p><strong>数字列表：</strong></p><ul><li><code>min(list)</code>  最小值</li><li><code>max(list)</code>  最大值</li><li><code>sum(list)</code>  总和</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><code>len(list)</code>  确定列表长度</li><li><code>sorted(list)</code>  临时递增排序</li><li><code>del list[index]</code>  删除指定位置的元素</li><li></li></ul><h2 id="四、操作列表"><a href="#四、操作列表" class="headerlink" title="四、操作列表"></a>四、操作列表</h2><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><ul><li><p><code>range(stop)</code>  返回<code>0 &lt;= num &lt;stop</code>的一组数</p><p><code>range(start, stop)</code>  返回<code>start &lt;= num &lt; stop</code>的一组数</p><p><code>range(start, stop, step)</code>  步长为step</p></li><li><p>返回的是一个整数序列的对象，而不是列表</p><p>但可以用<code>list()</code>函数转换为列表：<code>list(range(start, stop, step))</code></p></li><li><p>列表解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">2</span> ** item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-comment"># list = [2, 4, 8, 16, 32, 64, 128, 256, 512]</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><code>list[start: stop: step]</code>，返回这个列表</p><p>当step为正时，start为无穷小，stop为无穷大；</p><p>当step为负时，start为无穷大，stop为无穷小；</p><p><a href="https://zhuanlan.zhihu.com/p/79541418">切片详细解析</a></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p><code>tuple = (elem1, elem2, elem3,......)</code>  </p><ul><li>元组的数据不可修改</li><li>当元组只有一个数据时，也需要加逗号：<code>tuple = (elem, )</code></li></ul><h2 id="五、if语句"><a href="#五、if语句" class="headerlink" title="五、if语句"></a>五、if语句</h2><ul><li><p>和：and，或：or，</p></li><li><p>可以连比：<code>10 &lt; num &lt; 20</code></p></li><li><p><code>in</code>：检查列表中是否包括某一元素</p><p><code>not in</code>：检查特定值是否不包含在列表中</p></li><li><p>布尔值：<code>True</code>是，<code>False</code>否。注意首字母大写</p></li><li><p>for, if, else, <code>elif</code> 后面都需要加冒号</p></li></ul><h2 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;key1 : value1, key2 : value2, key3 : value3,......&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>keyn</code>的类型可以不一样</p></li><li><p><code>value</code>的类型也可以不一样</p></li><li><p>按照插入的顺序返回元素（可以使用<code>sorted()</code>函数暂时排序）</p></li><li><p>打印单行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wwwwwwww&quot;</span><br>     <span class="hljs-string">&quot;dsvsdvsvsvsv&quot;</span>)<br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>添加键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>[keyn] = valuen<br></code></pre></td></tr></table></figure></li><li><p>修改值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>[keyn] = valuen1<br></code></pre></td></tr></table></figure></li><li><p>删除键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> <span class="hljs-built_in">dict</span>[keyn]<br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li><p>访问值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.get(key[, default_])<br></code></pre></td></tr></table></figure></li><li><p><code>dict.items()</code>  返回整个键值对的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br></code></pre></td></tr></table></figure></li><li><p><code>dict.keys()</code>  返回键的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.keys():<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br><span class="hljs-comment">#二者作用相同：遍历字典时，默认遍历键</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>dict.values()</code>  返回值的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(<span class="hljs-built_in">dict</span>.values()):<br><span class="hljs-comment"># 对包含重复元素的列表调用set()，可以让python找出列表中独一无二的元素，并使用这些元素来创建一个集合</span><br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h4><p><code>set = &#123;key1, key2, key3,......&#125;</code></p><ul><li>没有顺序</li></ul><h2 id="七、用户输入和while循环"><a href="#七、用户输入和while循环" class="headerlink" title="七、用户输入和while循环"></a>七、用户输入和while循环</h2><ul><li><p>读入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input a message&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>input(prompt)返回的类型为字符串，可根据需求进行转换：int()……</p></li><li></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><ul><li>位置对应</li></ul><h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">num, <span class="hljs-built_in">str</span></span>): <br>    <span class="hljs-comment">#code</span><br><br>fun(num = <span class="hljs-number">123</span>, <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">num, <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span></span>): <br>    <span class="hljs-comment">#code</span><br><br>fun(num = <span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><h4 id="倒入整个模块"><a href="#倒入整个模块" class="headerlink" title="倒入整个模块"></a>倒入整个模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br>turtle.setup()<br></code></pre></td></tr></table></figure><h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> setup,fun1,fun2...<br>setup()<br></code></pre></td></tr></table></figure><h4 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t<br>t.setup()<br></code></pre></td></tr></table></figure><h4 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用as给函数指定别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> setup <span class="hljs-keyword">as</span> su<br>su()<br></code></pre></td></tr></table></figure><h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> *<br>setup()<br></code></pre></td></tr></table></figure><h2 id="九、类"><a href="#九、类" class="headerlink" title="九、类"></a>九、类</h2><ul><li>初始化方法：<code>__init__()</code></li><li></li></ul><h2 id="项目二：数据可视化"><a href="#项目二：数据可视化" class="headerlink" title="项目二：数据可视化"></a>项目二：数据可视化</h2><p>遇到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">AttributeError: module <span class="hljs-string">&#x27;backend_interagg&#x27;</span> has no attribute <span class="hljs-string">&#x27;FigureCanvas&#x27;</span>. Did you mean: <span class="hljs-string">&#x27;FigureCanvasAgg&#x27;</span>?<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>mpl.use(<span class="hljs-string">&#x27;TkAgg&#x27;</span>)<br><br><span class="hljs-comment"># 可用后端 [‘GTK3Agg’, ‘GTK3Cairo’, ‘MacOSX’, ‘nbAgg’, ‘Qt4Agg’, ‘Qt4Cairo’, ‘Qt5Agg’, ‘Qt5Cairo’, ‘TkAgg’, ‘TkCairo’, ‘WebAgg’, ‘WX’, ‘WXAgg’, ‘WXCairo’, ‘agg’, ‘cairo’, ‘pdf’, ‘pgf’, ‘ps’, ‘svg’, ‘template’]https://blog.csdn.net/weixin_42610531/article/details/94718670</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>语言入门</tag>
      
      <tag>备忘</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

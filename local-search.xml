<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>矩阵蛇形输出</title>
    <link href="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/"/>
    <url>/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="矩阵蛇形输出"><a href="#矩阵蛇形输出" class="headerlink" title="矩阵蛇形输出"></a>矩阵蛇形输出</h4><p>给定一个 <em>m</em> 行、n* 列的矩阵，请按照下图所示的顺序输出矩阵中所有的元素（从<code>[0][0]</code>位置开始，具体请参见下图）。</p><p><img src="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/9458562fccfacaf87b8293a0a3f1b499f4eb3f49.png"></p><p><strong>注意</strong> 每次碰到边界后，必须且只能沿着边界移动一格，不能后退，不能超出边界；在非边界区域只能向右上或左下方向前进。</p><p><strong>输入格式</strong></p><p>测评机会反复运行你写的程序。每次程序运行时，首先在第一行输入 22 个整数，分别对应题目描述中的 m<em>m</em> 和 n<em>n</em>（1 \leq m,n \leq 1001≤<em>m</em>,<em>n</em>≤100），之间用一个空格分隔。接下来输入 m<em>m</em> 行，每行包含 n<em>n</em> 个整数（-10000 \leq−10000≤ 每个数 \leq 10000≤10000），每两个整数之间用一个空格分隔。</p><p><strong>输出格式</strong></p><p>输出为一行，包括 m\times n<em>m</em>×<em>n</em> 个整数，按照题目要求的顺序依次输出所有矩阵元素，任意两个整数之间用一个空格分隔，最后一个整数后面没有空格。</p><p><strong>格式说明</strong></p><p>输出时每行末尾的多余空格，不影响答案正确性</p><p><img src="/2023/06/07/%E7%9F%A9%E9%98%B5%E8%9B%87%E5%BD%A2%E8%BE%93%E5%87%BA/1661257072003.png"></p><p><strong>样例输入1</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输出1</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输入2</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>样例输出2</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>], i, j, k;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i][j]);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m + n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-keyword">if</span>(j &lt; n &amp;&amp; i - j &lt; m )<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[i-j][j]);<br>        i++;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-keyword">if</span>(j &lt; m &amp;&amp; i - j &lt; n)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[j][i-j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python速查手册</title>
    <link href="/2023/06/07/python-dict/"/>
    <url>/2023/06/07/python-dict/</url>
    
    <content type="html"><![CDATA[<blockquote><p>《Python编程——从入门到实践》（蟒蛇书）自学笔记</p><p>2022年9月8日</p></blockquote><h2 id="二、变量和简单数据类型"><a href="#二、变量和简单数据类型" class="headerlink" title="二、变量和简单数据类型"></a>二、变量和简单数据类型</h2><ul><li>变量命名<strong>不能使用大写字母</strong>，应该以下划线分割</li><li>双引号与单引号并无区别，因此嵌套时可以更灵活</li><li><code>#</code>  单行注释</li><li>可以用<code>==</code>判断两个字符串是否相等</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p><code>str.title()</code>每个单词的首字母大写</p><p><code>str.upper()</code>把字符串全改为大写</p><p><code>str.lower()</code>把字符串全改为小写</p></li><li><p><code>f&quot;aba aba&#123;str1&#125;aba&#123;str2&#125;&quot;</code>格式化字符串&#x2F;f字符串：大括号中的<code>str1</code>和<code>str2</code>会被替换</p></li><li><p><code>str.strip()</code>剔除字符串两侧空白</p><p><code>str.lstrip()</code>左侧</p><p><code>str.rstrip()</code>右侧</p></li><li></li></ul><h4 id="数"><a href="#数" class="headerlink" title="数"></a>数</h4><ul><li><code>**</code>两个乘号表示乘方</li><li><code>//</code>表示整除</li><li><code>100_000_000</code>可以在数字中添加下划线增加可读性</li><li>x, y, z &#x3D; 1, 2, 3 同时给多个变量赋值</li><li>Python没有内置的常量类型</li><li></li></ul><h2 id="三、列表简介"><a href="#三、列表简介" class="headerlink" title="三、列表简介"></a>三、列表简介</h2><ul><li>创建：list &#x3D; []</li><li>负下标访问：list[-1]  表示最后一个元素</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>通用：</strong></p><ul><li><p><code>list.append(elem)</code>  在链表末尾添加元素</p></li><li><p><code>list.insert(index, elem)</code>  在指定位置插入元素</p></li><li><p><code>list.pop()</code>  取列表末尾元素</p><p><code>list.pop(index)</code>  取指定位置元素</p></li><li><p><code>list.remove(elem)</code>  删除链表中第一个指定的值</p></li><li><p><code>list.sort()</code>  永久递增排序</p><p><code>list.sort(reverse = true)</code>  永久递减排序</p></li><li><p><code>list.reverse()</code>  翻转列表</p></li></ul><p><strong>数字列表：</strong></p><ul><li><code>min(list)</code>  最小值</li><li><code>max(list)</code>  最大值</li><li><code>sum(list)</code>  总和</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><code>len(list)</code>  确定列表长度</li><li><code>sorted(list)</code>  临时递增排序</li><li><code>del list[index]</code>  删除指定位置的元素</li><li></li></ul><h2 id="四、操作列表"><a href="#四、操作列表" class="headerlink" title="四、操作列表"></a>四、操作列表</h2><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><ul><li><p><code>range(stop)</code>  返回<code>0 &lt;= num &lt;stop</code>的一组数</p><p><code>range(start, stop)</code>  返回<code>start &lt;= num &lt; stop</code>的一组数</p><p><code>range(start, stop, step)</code>  步长为step</p></li><li><p>返回的是一个整数序列的对象，而不是列表</p><p>但可以用<code>list()</code>函数转换为列表：<code>list(range(start, stop, step))</code></p></li><li><p>列表解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">2</span> ** item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-comment"># list = [2, 4, 8, 16, 32, 64, 128, 256, 512]</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p><code>list[start: stop: step]</code>，返回这个列表</p><p>当step为正时，start为无穷小，stop为无穷大；</p><p>当step为负时，start为无穷大，stop为无穷小；</p><p><a href="https://zhuanlan.zhihu.com/p/79541418">切片详细解析</a></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p><code>tuple = (elem1, elem2, elem3,......)</code>  </p><ul><li>元组的数据不可修改</li><li>当元组只有一个数据时，也需要加逗号：<code>tuple = (elem, )</code></li></ul><h2 id="五、if语句"><a href="#五、if语句" class="headerlink" title="五、if语句"></a>五、if语句</h2><ul><li><p>和：and，或：or，</p></li><li><p>可以连比：<code>10 &lt; num &lt; 20</code></p></li><li><p><code>in</code>：检查列表中是否包括某一元素</p><p><code>not in</code>：检查特定值是否不包含在列表中</p></li><li><p>布尔值：<code>True</code>是，<code>False</code>否。注意首字母大写</p></li><li><p>for, if, else, <code>elif</code> 后面都需要加冒号</p></li></ul><h2 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;key1 : value1, key2 : value2, key3 : value3,......&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>keyn</code>的类型可以不一样</p></li><li><p><code>value</code>的类型也可以不一样</p></li><li><p>按照插入的顺序返回元素（可以使用<code>sorted()</code>函数暂时排序）</p></li><li><p>打印单行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wwwwwwww&quot;</span><br>     <span class="hljs-string">&quot;dsvsdvsvsvsv&quot;</span>)<br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>添加键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>[keyn] = valuen<br></code></pre></td></tr></table></figure></li><li><p>修改值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>[keyn] = valuen1<br></code></pre></td></tr></table></figure></li><li><p>删除键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> <span class="hljs-built_in">dict</span>[keyn]<br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li><p>访问值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.get(key[, default_])<br></code></pre></td></tr></table></figure></li><li><p><code>dict.items()</code>  返回整个键值对的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br></code></pre></td></tr></table></figure></li><li><p><code>dict.keys()</code>  返回键的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.keys():<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br><span class="hljs-comment">#二者作用相同：遍历字典时，默认遍历键</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>dict.values()</code>  返回值的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(<span class="hljs-built_in">dict</span>.values()):<br><span class="hljs-comment"># 对包含重复元素的列表调用set()，可以让python找出列表中独一无二的元素，并使用这些元素来创建一个集合</span><br></code></pre></td></tr></table></figure></li><li></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h4><p><code>set = &#123;key1, key2, key3,......&#125;</code></p><ul><li>没有顺序</li></ul><h2 id="七、用户输入和while循环"><a href="#七、用户输入和while循环" class="headerlink" title="七、用户输入和while循环"></a>七、用户输入和while循环</h2><ul><li><p>读入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input a message&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>input(prompt)返回的类型为字符串，可根据需求进行转换：int()……</p></li><li></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><ul><li>位置对应</li></ul><h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">num, <span class="hljs-built_in">str</span></span>): <br>    <span class="hljs-comment">#code</span><br><br>fun(num = <span class="hljs-number">123</span>, <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">num, <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span></span>): <br>    <span class="hljs-comment">#code</span><br><br>fun(num = <span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><h4 id="倒入整个模块"><a href="#倒入整个模块" class="headerlink" title="倒入整个模块"></a>倒入整个模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br>turtle.setup()<br></code></pre></td></tr></table></figure><h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> setup,fun1,fun2...<br>setup()<br></code></pre></td></tr></table></figure><h4 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t<br>t.setup()<br></code></pre></td></tr></table></figure><h4 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用as给函数指定别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> setup <span class="hljs-keyword">as</span> su<br>su()<br></code></pre></td></tr></table></figure><h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> *<br>setup()<br></code></pre></td></tr></table></figure><h2 id="九、类"><a href="#九、类" class="headerlink" title="九、类"></a>九、类</h2><ul><li>初始化方法：<code>__init__()</code></li><li></li></ul><h2 id="项目二：数据可视化"><a href="#项目二：数据可视化" class="headerlink" title="项目二：数据可视化"></a>项目二：数据可视化</h2><p>遇到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">AttributeError: module <span class="hljs-string">&#x27;backend_interagg&#x27;</span> has no attribute <span class="hljs-string">&#x27;FigureCanvas&#x27;</span>. Did you mean: <span class="hljs-string">&#x27;FigureCanvasAgg&#x27;</span>?<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>mpl.use(<span class="hljs-string">&#x27;TkAgg&#x27;</span>)<br><br><span class="hljs-comment"># 可用后端 [‘GTK3Agg’, ‘GTK3Cairo’, ‘MacOSX’, ‘nbAgg’, ‘Qt4Agg’, ‘Qt4Cairo’, ‘Qt5Agg’, ‘Qt5Cairo’, ‘TkAgg’, ‘TkCairo’, ‘WebAgg’, ‘WX’, ‘WXAgg’, ‘WXCairo’, ‘agg’, ‘cairo’, ‘pdf’, ‘pgf’, ‘ps’, ‘svg’, ‘template’]https://blog.csdn.net/weixin_42610531/article/details/94718670</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>语言入门</tag>
      
      <tag>备忘</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
